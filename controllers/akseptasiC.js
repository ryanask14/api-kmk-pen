var request = require("request");
var LocalStorage = require("node-localstorage").LocalStorage,
  localStorage = new LocalStorage("./scratch");
var model = require("../models/index");
var dateFormat = require("dateformat");
var https = require("https");
var DateDiff = require("date-diff");
var Sybase = require("sybase");
const { setTimeout } = require("timers");
const { param } = require("../routes");
var fs = require("fs");

function padWithZeroes(number, length) {
  var my_string = "" + number;
  while (my_string.length < length) {
    my_string = "0" + my_string;
  }

  return my_string;
}

function monthDiff(d1, d2) {
  var dateString1 = d1;
  var dateString2 = d2;
  var year1 = dateString1.substring(0, 4);
  var month1 = dateString1.substring(4, 6);
  var day1 = dateString1.substring(6, 8);
  var year2 = dateString2.substring(0, 4);
  var month2 = dateString2.substring(4, 6);
  var day2 = dateString2.substring(6, 8);
  var date1 = new Date(year1, month1 - 1, day1);
  var date2 = new Date(year2, month2 - 1, day2);
  var months;
  months = (date2.getFullYear() - date1.getFullYear()) * 12;
  months -= date1.getMonth();
  months += date2.getMonth();
  return months <= 0 ? 0 : months;
}

function isValidDate(s) {
  var bits1 = s.substring(0, 4);
  var bits2 = s.substring(4, 6);
  var bits3 = s.substring(6, 8);
  var d = new Date(bits1, bits2 - 1, bits3);
  console.log(d);
  return d && d.getMonth() + 1 == bits2;
}

function ageCheck(birthdate) {
  var dob = birthdate;
  var year = Number(dob.substr(0, 4));
  var month = Number(dob.substr(4, 2)) - 1;
  var day = Number(dob.substr(6, 2));
  var today = new Date();
  var age = today.getFullYear() - year;
  if (
    today.getMonth() < month ||
    (today.getMonth() == month && today.getDate() < day)
  ) {
    age--;
  }
  return age;
}

insertWSDLMandiri = async function (no_aplikasi, tgl_lahir) {
  no_rekening_pinjaman = await model.sequelize.query(
    "INSERT INTO public.temp_patch_tgl_lahir(no_aplikasi, tgl_lahir)VALUES('" +
      no_aplikasi +
      "', '" +
      tgl_lahir +
      "');",
    {
      // replacements: {id: carIds},
      type: model.sequelize.QueryTypes.INSERT,
      quoteIdentifiers: true,
    }
  );
};

exports.wsdl = function (req, res) {
  fs.readFile("../wsdl_nya.txt", "utf8", function (err, data) {
    if (err) throw err;
    var ore = [];
    var data2 = data;
    // no_aplikasi = data2.split('<tns:noAplikasi>').pop().split('</tns:noAplikasi>')
    no_aplikasi = data2.split(/noAplikasi>\s*(.*?)\s*</g);

    var p = data2
      .match(/<tns:noAplikasi>(.*?)<\/tns:noAplikasi>/g)
      .map(function (val) {
        return val.replace(/<\/?tns:noAplikasi>/g, "");
      });

    var q = data2
      .match(/<tns:tanggalLahir>(.*?)<\/tns:tanggalLahir>/g)
      .map(function (val) {
        return val.replace(/<\/?tns:tanggalLahir>/g, "");
      });
    res.json("done");
    for (var i = 0; i < p.length; i++) {
      var date = q[i].substring(0, 2);
      var month = q[i].substring(3, 5);
      var year = q[i].substring(6, 10);
      var date_fix = year + "-" + month + "-" + date;
      insertWSDLMandiri(p[i], date_fix);
      // ore.push({
      //     noAplikasi: p[i],
      //     tanggalLahir: date_fix
      // });
    }
  });
};

getAllPenjaminan = async function (array, cov = 0) {
  var ret;
  var norek;
  var norek_sub;
  if (array.noRekening) {
    norek_sub = array.noRekening.replace(/[^0-9a-z_]/gi, "");
    norek = array.noRekening;
  } else {
    norek_sub = null;
    norek = null;
  }

  if (cov == 1) {
    norek_sub = "abcd123".replace(/[^0-9a-z_]/gi, "");
    norek = "abcd123";
    array.nomorAplikasi = "abcd123";
  }

  no_rekening_pinjaman = await model.sequelize
    .query(
      "select * from t_penjaminan where kode_bank = " +
        "'" +
        array.kodeBank +
        "'" +
        " and (no_rekening_pinjaman = " +
        "'" +
        norek_sub +
        "' or no_rekening_pinjaman = " +
        "'" +
        norek +
        "') and status_penjaminan_id != 4 and jenis_pembatalan is null and is_lunas_dipercepat = false and id_penjaminan not in (select jenis_pembatalan from t_penjaminan where (no_rekening_pinjaman = " +
        "'" +
        norek_sub +
        "' or no_rekening_pinjaman = " +
        "'" +
        norek +
        "') and jenis_pembatalan is not null and status_penjaminan_id != 4)",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(async function (no_rekening_pinjaman) {
      kode_bank = await model.sequelize
        .query(
          "select * from m_mapping_bank where kode_bank = " +
            "'" +
            array.kodeBank +
            "'" +
            "and kode_cabang_bank =" +
            "'" +
            array.kodeUker +
            "'",
          {
            // replacements: {id: carIds},
            type: model.sequelize.QueryTypes.SELECT,
            quoteIdentifiers: true,
          }
        )
        .then(async function (kode_bank) {
          sektor_ekonomi = await model.sequelize
            .query(
              "select * from m_sektor_ekonomi where kode_sektor_ekonomi = " +
                "'" +
                array.kodeSektor +
                "'",
              {
                // replacements: {id: carIds},
                type: model.sequelize.QueryTypes.SELECT,
                quoteIdentifiers: true,
              }
            )
            .then(async function (sektor_ekonomi) {
              no_aplikasi = await model.sequelize
                .query(
                  "select * from t_penjaminan where transaction_id_bank = " +
                    "'" +
                    array.nomorAplikasi +
                    "' and status_penjaminan_id != 4",
                  {
                    // replacements: {id: carIds},
                    type: model.sequelize.QueryTypes.SELECT,
                    quoteIdentifiers: true,
                  }
                )
                .then(async function (no_aplikasi) {
                  nik = await model.sequelize
                    .query(
                      "select * from t_penjaminan where no_id_debitur = " +
                        "'" +
                        array.noIdentitas +
                        "' and status_penjaminan_id != 4 and jenis_pembatalan is null and is_lunas_dipercepat = false and id_penjaminan not in(select jenis_pembatalan from t_penjaminan where no_id_debitur = " +
                        "'" +
                        array.noIdentitas +
                        "' and status_penjaminan_id != 4 and jenis_pembatalan is not null and jenis_pembatalan is not null and is_lunas_dipercepat = false) order by id_penjaminan desc",
                      {
                        // replacements: {id: carIds},
                        type: model.sequelize.QueryTypes.SELECT,
                        quoteIdentifiers: true,
                      }
                    )
                    .then(async function (nik) {
                      cek_no_pk = await model.sequelize
                        .query(
                          "select * from t_penjaminan where (kode_bank = " +
                            "'" +
                            array.kodeBank +
                            "'" +
                            " and no_perjanjian_kredit = " +
                            "'" +
                            array.noPk +
                            "'" +
                            ") and status_penjaminan_id != 4 and jenis_pembatalan is null and is_lunas_dipercepat = false and id_penjaminan not in(select jenis_pembatalan from t_penjaminan where (no_perjanjian_kredit = " +
                            "'" +
                            array.noPk +
                            "'" +
                            ") and status_penjaminan_id != 4 and jenis_pembatalan is not null and is_lunas_dipercepat = false)",
                          {
                            // replacements: {id: carIds},
                            type: model.sequelize.QueryTypes.SELECT,
                            quoteIdentifiers: true,
                          }
                        )
                        .then(async function (cek_no_pk) {
                          nik_limit = await model.sequelize
                            .query(
                              "SET TIMEZONE='Asia/Bangkok'; select sum(plafond_kredit) as limit_plafond from t_penjaminan where no_id_debitur = " +
                                "'" +
                                array.noIdentitas +
                                "' and status_penjaminan_id != 4 and jenis_pembatalan is null and tgl_akhir_pertanggungan >= now()::date and is_lunas_dipercepat = false and id_penjaminan not in(select jenis_pembatalan from t_penjaminan where no_id_debitur = " +
                                "'" +
                                array.noIdentitas +
                                "' and status_penjaminan_id != 4 and jenis_pembatalan is not null and is_lunas_dipercepat = false)",
                              {
                                // replacements: {id: carIds},
                                type: model.sequelize.QueryTypes.SELECT,
                                quoteIdentifiers: true,
                              }
                            )
                            .then(function (nik_limit) {
                              console.log(kode_bank);
                              console.log(sektor_ekonomi);
                              console.log(no_aplikasi);
                              var cekvalid = [];
                              var diffdate = 0;
                              var tgl_min_pk;
                              var tgl_pk_fix;
                              var tgl_pk_threshold = new Date();
                              var tglawal = array.tanggalAwal;
                              var tglakhir = array.tanggalAkhir;
                              var floor = new Date(
                                tglawal.substring(0, 4) +
                                  "-" +
                                  tglawal.substring(4, 6) +
                                  "-" +
                                  tglawal.substring(6, 8)
                              );
                              var ceil = new Date(
                                tglakhir.substring(0, 4) +
                                  "-" +
                                  tglakhir.substring(4, 6) +
                                  "-" +
                                  tglakhir.substring(6, 8)
                              );
                              var ceil_threshold = new Date(
                                floor.setFullYear(floor.getFullYear() + 3)
                              );
                              var max_pert_inst = new DateDiff(ceil, floor);
                              var max_pert_threshold = new DateDiff(
                                ceil_threshold,
                                floor
                              );
                              var jangka_waktu_hari = max_pert_inst.days();
                              var jangka_waktu_hari_threshold =
                                max_pert_threshold.days();
                              if (
                                (tglawal || tglakhir) &&
                                tglawal.length == 8 &&
                                tglakhir.length == 8
                              ) {
                                var diffdate = monthDiff(tglawal, tglakhir);
                              }
                              if (array.tglPK) {
                                tgl_min_pk = new Date("2022-04-01");
                                tgl_pk_fix = new Date(
                                  dateFormat(
                                    new Date(
                                      array.tglPK.substring(0, 4),
                                      array.tglPK.substring(4, 6) - 1,
                                      array.tglPK.substring(6, 8)
                                    ),
                                    "yyyy-mm-dd"
                                  )
                                );
                                
                                console.log("threshold pk");
                                console.log(array.tglPK.substring(4, 6)- 0);
                                if((array.tglPK.substring(4, 6)) - 0 == 4 || (array.tglPK.substring(4, 6)) - 0 == 5){
                                  tgl_pk_threshold = new Date(
                                    tgl_pk_threshold.setDate(
                                      tgl_pk_threshold.getDate() - 150
                                    )
                                  );
                                } else {
                                  tgl_pk_threshold = new Date(
                                    tgl_pk_threshold.setDate(
                                      tgl_pk_threshold.getDate() - 90
                                    )
                                  );
                                }
                                
                                tgl_pk_threshold = new Date(
                                  tgl_pk_threshold.setHours(0, 0, 0, 0)
                                );
                              } else {
                                tgl_min_pk = 0;
                                tgl_pk_fix = 1;
                              }
                              if (!tglawal || tglawal == "") {
                                tglawal = "tglawal";
                                console.log("gas");
                              } else {
                                tglawal = new Date(
                                  tglawal.substring(0, 4) +
                                    "-" +
                                    tglawal.substring(4, 6) +
                                    "-" +
                                    tglawal.substring(6, 8)
                                );
                              }
                              if (!tglakhir || tglakhir == "") {
                                tglakhir = "tglakhir";
                              } else {
                                tglakhir = new Date(
                                  tglakhir.substring(0, 4) +
                                    "-" +
                                    tglakhir.substring(4, 6) +
                                    "-" +
                                    tglakhir.substring(6, 8)
                                );
                              }
                              var tgl_pk_lama = array.tglPkLama;
                              var tgl_pk = array.tglPK;
                              var tanggal_awal = array.tanggalAwal;
                              var tanggal_akhir = array.tanggalAkhir;
                              var tanggal_lahir = array.tanggalLahir;
                              var tanggal_mulai_usaha = array.tglMulaiUsaha;
                              var nik_limit_fix;
                              if (!nik_limit[0]) {
                                console.log("nik_limit_fix : "+nik_limit_fix);
                                nik_limit_fix = 0;
                                cekvalid.push({
                                  status: false,
                                  errorCode: "0222",
                                  errorType: "Data Validation",
                                  errorMessage:
                                    "Debitur sudah pernah mendapatkan fasilitas PEN",
                                  trxDateResponse: dateFormat(
                                    new Date(),
                                    "yyyymmddHHMMss"
                                  ),
                                  cabangRekanan:
                                    kode_bank[0].kode_cabang_askrindo,
                                });
                              } else {
                                nik_limit_fix = nik_limit[0].limit_plafond;
                              }
                              if (
                                tgl_pk_fix <= tglawal &&
                                //tgl_pk_fix >= tgl_pk_threshold &&
                                (!no_rekening_pinjaman[0] || (no_rekening_pinjaman[0] && array.kodeBank == '002')) &&
                                (!no_aplikasi[0] || (no_aplikasi[0] && array.kodeBank == '002')) &&
                                kode_bank[0] &&
                                sektor_ekonomi[0] &&
                                ((isValidDate(tanggal_lahir) &&
                                  ageCheck(tanggal_lahir) >= 15 &&
                                  tanggal_lahir.substring(0, 4) >= 1930 &&
                                  array.jenisKelamin != 9) ||
                                  array.jenisKelamin == 9) &&
                                jangka_waktu_hari <=
                                  jangka_waktu_hari_threshold &&
                                (diffdate <= 36 || array.jangkaWaktu <= 36) &&
                                array.noIdentitas.length == 16 &&
                                tgl_pk_fix >= tgl_min_pk &&
                                tgl_pk_fix <= new Date() &&
                                tglawal != tglakhir &&
                                tglawal < tglakhir &&
                                ((
                                  nik[0] &&
                                  (array.kodeBank != '002' ||
                                  nik[0].nama_debitur.trim().toLowerCase() ==
                                    array.namaDebitur.trim().toLowerCase()) &&
                                  (nik[0].kode_bank == array.kodeBank ||
                                    (nik[0].kode_bank != array.kodeBank &&
                                      nik[0].is_tagih_djppr == true))) ||
                                  !nik[0] ||
                                  (
                                    nik[0] &&
                                    nik[0].kode_bank != array.kodeBank &&
                                    new Date(nik[0].tgl_akhir_pertanggungan) <
                                      new Date()) ||
                                  (nik[0] &&
                                    nik[0].kode_bank == array.kodeBank &&
                                    new Date(nik[0].tgl_akhir_pertanggungan) <
                                      new Date() &&
                                    new Date(nik[0].tgl_akhir_pertanggungan) <
                                      new Date(tgl_pk_fix)) ) &&
                                nik_limit_fix < 10000000000 &&
                                +nik_limit_fix + array.plafonKredit <=
                                  10000000000 &&
                                ((array.jenisKelamin == 9 &&
                                  array.pendidikan == 9 &&
                                  array.maritalStatus == 9 &&
                                  array.kodePekerjaan == 99) ||
                                  (array.jenisKelamin != 9 &&
                                    array.pendidikan != 9 &&
                                    array.maritalStatus != 9))
                              ) {
                                console.log("OK");
                                ret = "OK";
                              } else {
                                if (kode_bank[0]) {
                                  if (tgl_pk_lama) {
                                    if (!isValidDate(tgl_pk_lama)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal PK Lama Salah, Cek Kembali Tanggal PK Lama",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan:
                                          kode_bank[0].kode_cabang_askrindo,
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.tglPK) {
                                    if (!isValidDate(tgl_pk)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal PK Salah, Cek Kembali Tanggal PK",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan:
                                          kode_bank[0].kode_cabang_askrindo,
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                    if (tgl_pk_fix < tgl_min_pk) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Tanggal Perjanjian Kredit Tidak Sesuai Ketentuan",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan:
                                          kode_bank[0].kode_cabang_askrindo,
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                    if (tgl_pk_fix > new Date()) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Tanggal Perjanjian Kredit Tidak Boleh Melebihi Tanggal Hari Ini",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan:
                                          kode_bank[0].kode_cabang_askrindo,
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                    console.log("tgl_pk_threshold");
                                    console.log(tgl_pk_threshold);
                                    if (tgl_pk_fix < tgl_pk_threshold) {
                                      // cekvalid.push({
                                      //   status: false,
                                      //   errorCode: "0222",
                                      //   errorType: "Data Validation",
                                      //   errorMessage:
                                      //     "Selisih hari antara tgl pk dan tgl hari ini tidak boleh lebih dari 90 Hari",
                                      //   trxDateResponse: dateFormat(
                                      //     new Date(),
                                      //     "yyyymmddHHMMss"
                                      //   ),
                                      //   cabangRekanan:
                                      //     kode_bank[0].kode_cabang_askrindo,
                                      // });

                                      cekvalid.push();
                                    } else {
                                      cekvalid.push();
                                    }
                                    if (tgl_pk_fix > tglawal) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Tanggal Perjanjian Kredit Tidak boleh lebih dari Tanggal Awal Pertanggungan",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan:
                                          kode_bank[0].kode_cabang_askrindo,
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.tanggalAwal) {
                                    if (!isValidDate(tanggal_awal)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal Awal Pertanggungan Salah, Cek Kembali Tanggal Awal Pertanggungan",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan:
                                          kode_bank[0].kode_cabang_askrindo,
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.tanggalAkhir) {
                                    if (!isValidDate(tanggal_akhir)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal Akhir Salah, Cek Kembali Tanggal Akhir Pertanggungan",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan:
                                          kode_bank[0].kode_cabang_askrindo,
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.tanggalLahir) {
                                    if (!isValidDate(tanggal_lahir)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal Lahir Salah, Cek Kembali Tanggal Lahir",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan:
                                          kode_bank[0].kode_cabang_askrindo,
                                      });
                                    } else {
                                      if (
                                        ageCheck(tanggal_lahir) < 17 &&
                                        array.jenisKelamin != 9
                                      ) {
                                        cekvalid.push({
                                          status: false,
                                          errorCode: "0222",
                                          errorType: "Data Validation",
                                          errorMessage:
                                            "Usia debitur pada pengajuan PEN minimal 17 tahun",
                                          trxDateResponse: dateFormat(
                                            new Date(),
                                            "yyyymmddHHMMss"
                                          ),
                                          cabangRekanan:
                                            kode_bank[0].kode_cabang_askrindo,
                                        });
                                      } else if (
                                        tanggal_lahir.substring(0, 4) < 1930 &&
                                        array.jenisKelamin != 9
                                      ) {
                                        cekvalid.push({
                                          status: false,
                                          errorCode: "0222",
                                          errorType: "Data Validation",
                                          errorMessage:
                                            "Tahun lahir debitur pada pengajuan PEN harus lebih atau sama dengan 1930",
                                          trxDateResponse: dateFormat(
                                            new Date(),
                                            "yyyymmddHHMMss"
                                          ),
                                          cabangRekanan:
                                            kode_bank[0].kode_cabang_askrindo,
                                        });
                                      } else {
                                        cekvalid.push();
                                      }
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.tglMulaiUsaha) {
                                    if (!isValidDate(tanggal_mulai_usaha)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal Mulai Usaha Salah, Cek Kembali Tanggal Mulai Usaha",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan:
                                          kode_bank[0].kode_cabang_askrindo,
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.noIdentitas.length != 16) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0220",
                                      errorType: "Data Validation",
                                      errorMessage: "No. KTP harus 16 Karakter",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (
                                    diffdate > 36 ||
                                    array.jangkaWaktu > 36 ||
                                    tglawal == tglakhir ||
                                    jangka_waktu_hari >
                                      jangka_waktu_hari_threshold
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0212",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Jangka Waktu Tidak Memenuhi Ketentuan (max 36 bulan min 1 bulan)",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (no_rekening_pinjaman[0] && array.kodeBank != '002') {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0201",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Debitur dengan No. Rekening " +
                                        array.noRekening +
                                        " Sudah Terdaftar",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (no_aplikasi[0] && array.kodeBank != '002') {
                                    console.log("kodebank: "+array.kodeBank);
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0213",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Debitur dengan No. Aplikasi " +
                                        array.nomorAplikasi +
                                        " Sudah Terdaftar",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (!kode_bank[0]) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0205",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Kode Bank " +
                                        array.kodeBank +
                                        " atau Kode Uker " +
                                        array.kodeUker +
                                        " Belum Terdaftar",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (!sektor_ekonomi[0]) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0204",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Sektor Ekonomi dengan nomor " +
                                        array.kodeSektor +
                                        " tidak termasuk dalam sektor yang dijamin",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  console.log("validasi debitur aktif 1");
                                  //console.log(nik[0].nama_debitur);
                                  console.log(array.namaDebitur);
                                  if (
                                    array.kodeBank != '002' &&
                                    nik[0] &&
                                    nik[0].nama_debitur.trim().toLowerCase() !=
                                      array.namaDebitur.trim().toLowerCase() &&
                                    nik[0] &&
                                    new Date(nik[0].tgl_akhir_pertanggungan) >=
                                      new Date() 
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0220",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "NIK " +
                                        array.noIdentitas +
                                        " sudah pernah terdaftar atas nama " +
                                        nik[0].nama_debitur,
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (
                                    nik[0] &&
                                    nik[0].kode_bank != array.kodeBank &&
                                    nik[0] &&
                                    new Date(nik[0].tgl_akhir_pertanggungan) >=
                                      new Date()
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0220",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "NIK " +
                                        array.noIdentitas +
                                        " sudah pernah terdaftar pada kode bank " +
                                        nik[0].kode_bank,
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  // if(cek_no_pk[0])
                                  // {
                                  //     cekvalid.push({status: false, errorCode:'0220', errorType:'Data Validation', errorMessage:'Nomor perjanjian kredit '+array.noPk+' telah terdaftar dengan kode bank '+array.kodeBank+' (Tidak boleh ada No PK yang sama pada satu kode bank)', trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss" ), cabangRekanan: kode_bank[0].kode_cabang_askrindo})
                                  // }
                                  // else
                                  // {
                                  //     cekvalid.push()
                                  // }
                                  if (
                                    array.plafonKredit > 1000000000 &&
                                    array.omsetUsaha > 50000000000
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0227",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "omsetUsaha melebihi 50 Milyar",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  }

                                  if (
                                    array.plafonKredit > 1000000000 &&
                                    array.modalUsaha > 10000000000
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0227",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "modalUsaha melebihi 10 Miliar",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  }

                                  if (
                                    array.plafonKredit > 1000000000 &&
                                    !array.modalUsaha
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0227",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "modalUsaha wajib diisi jika plafonKredit diatas 1 Miliar",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  }

                                  if (
                                    array.plafonKredit > 1000000000 &&
                                    !array.omsetUsaha
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0227",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "omsetUsaha wajib diisi jika plafonKredit diatas 1 Miliar",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  }

                                  if (
                                    nik_limit_fix >= 10000000000 ||
                                    +nik_limit_fix + array.plafonKredit >
                                      10000000000
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0209",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Total plafond untuk NIK " +
                                        array.noIdentitas +
                                        " sudah mencapai nilai maksimum (10 Miliar)",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (
                                    array.jenisKelamin == 9 &&
                                    (array.pendidikan != 9 ||
                                      array.maritalStatus != 9 ||
                                      array.kodePekerjaan != 99)
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0227",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Bila jenis_kelamin 9, [marital_status,pendidikan] harus 9 dan [kode_pekerjaan] harus 99",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (
                                    array.jenisKelamin != 9 &&
                                    (array.pendidikan == 9 ||
                                      array.maritalStatus == 9)
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0227",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Bila jenis_kelamin = 1 atau 2, [marital_status,pendidikan] tidak boleh 9",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan:
                                        kode_bank[0].kode_cabang_askrindo,
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  console.log(cekvalid);
                                  ret = cekvalid;
                                } else {
                                  if (tgl_pk_lama) {
                                    if (!isValidDate(tgl_pk_lama)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal PK Lama Salah, Cek Kembali Tanggal PK Lama",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan: "Not Found",
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.tglPK) {
                                    if (!isValidDate(tgl_pk)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal PK Salah, Cek Kembali Tanggal PK",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan: "Not Found",
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                    if (tgl_pk_fix < tgl_min_pk) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Tanggal Perjanjian Kredit Tidak Sesuai Ketentuan",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan: "Not Found",
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                    if (tgl_pk_fix > new Date()) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Tanggal Perjanjian Kredit Tidak Boleh Melebihi Tanggal Hari Ini",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan: "Not Found",
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                    if (tgl_pk_fix < tgl_pk_threshold) {
                                      // cekvalid.push({
                                      //   status: false,
                                      //   errorCode: "0222",
                                      //   errorType: "Data Validation",
                                      //   errorMessage:
                                      //     "Selisih hari antara tgl pk dan tgl hari ini tidak boleh lebih dari 90 Hari",
                                      //   trxDateResponse: dateFormat(
                                      //     new Date(),
                                      //     "yyyymmddHHMMss"
                                      //   ),
                                      //   cabangRekanan: "Not Found",
                                      // });

                                      cekvalid.push();
                                    } else {
                                      cekvalid.push();
                                    }
                                    if (tgl_pk_fix > tglawal) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Tanggal Perjanjian Kredit Tidak boleh lebih dari Tanggal Awal Pertanggungan",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan: "Not Found",
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.tanggalAwal) {
                                    if (!isValidDate(tanggal_awal)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal Awal Pertanggungan Salah, Cek Kembali Tanggal Awal Pertanggungan",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan: "Not Found",
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.tanggalAkhir) {
                                    if (!isValidDate(tanggal_akhir)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal Akhir Salah, Cek Kembali Tanggal Akhir Pertanggungan",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan: "Not Found",
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.tanggalLahir) {
                                    if (!isValidDate(tanggal_lahir)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal Lahir Salah, Cek Kembali Tanggal Lahir",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan: "Not Found",
                                      });
                                    } else {
                                      if (
                                        ageCheck(tanggal_lahir) < 17 &&
                                        array.jenisKelamin != 9
                                      ) {
                                        cekvalid.push({
                                          status: false,
                                          errorCode: "0222",
                                          errorType: "Data Validation",
                                          errorMessage:
                                            "Usia debitur pada pengajuan PEN minimal 17 tahun",
                                          trxDateResponse: dateFormat(
                                            new Date(),
                                            "yyyymmddHHMMss"
                                          ),
                                          cabangRekanan: "Not Found",
                                        });
                                      } else if (
                                        tanggal_lahir.substring(0, 4) < 1930 &&
                                        array.jenisKelamin != 9
                                      ) {
                                        cekvalid.push({
                                          status: false,
                                          errorCode: "0222",
                                          errorType: "Data Validation",
                                          errorMessage:
                                            "Tahun lahir debitur pada pengajuan PEN harus lebih atau sama dengan 1930",
                                          trxDateResponse: dateFormat(
                                            new Date(),
                                            "yyyymmddHHMMss"
                                          ),
                                          cabangRekanan: "Not Found",
                                        });
                                      } else {
                                        cekvalid.push();
                                      }
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.tglMulaiUsaha) {
                                    if (!isValidDate(tanggal_mulai_usaha)) {
                                      cekvalid.push({
                                        status: false,
                                        errorCode: "0222",
                                        errorType: "Data Validation",
                                        errorMessage:
                                          "Format Tanggal Mulai Usaha Salah, Cek Kembali Tanggal Mulai Usaha",
                                        trxDateResponse: dateFormat(
                                          new Date(),
                                          "yyyymmddHHMMss"
                                        ),
                                        cabangRekanan: "Not Found",
                                      });
                                    } else {
                                      cekvalid.push();
                                    }
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (array.noIdentitas.length != 16) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0220",
                                      errorType: "Data Validation",
                                      errorMessage: "No. KTP harus 16 Karakter",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan: "Not Found",
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (
                                    diffdate > 36 ||
                                    array.jangkaWaktu > 36 ||
                                    tglawal == tglakhir ||
                                    jangka_waktu_hari >
                                      jangka_waktu_hari_threshold
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0212",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Jangka Waktu Tidak Memenuhi Ketentuan (max 36 bulan min 1 bulan)",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan: "Not Found",
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (no_rekening_pinjaman[0] && !array.kodeBank == '002') {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0201",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Debitur dengan No. Rekening " +
                                        array.noRekening +
                                        " Sudah Terdaftar",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan: "Not Found",
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (no_aplikasi[0] && !array.kodeBank == '002') {
                                    console.log("kodebank: "+array.kodeBank);
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0213",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Debitur dengan No. Aplikasi " +
                                        array.nomorAplikasi +
                                        " Sudah Terdaftar",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan: "Not Found",
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (!kode_bank[0]) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0205",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Kode Bank " +
                                        array.kodeBank +
                                        " atau Kode Uker " +
                                        array.kodeUker +
                                        " Belum Terdaftar",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan: "Not Found",
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (!sektor_ekonomi[0]) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0204",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Sektor Ekonomi dengan nomor " +
                                        array.kodeSektor +
                                        " tidak termasuk dalam sektor yang dijamin",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan: "Not Found",
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  console.log("validasi debitur aktif 2");
                                  //console.log(nik[0].nama_debitur);
                                  console.log(array.namaDebitur);
                                  if (
                                    !array.kodeBank == '002' &&
                                    nik[0] &&
                                    nik[0].nama_debitur.trim().toLowerCase() !=
                                      array.namaDebitur.trim().toLowerCase() &&
                                    nik[0] &&
                                    new Date(nik[0].tgl_akhir_pertanggungan) >=
                                      new Date() 
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0220",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "NIK " +
                                        array.noIdentitas +
                                        " sudah pernah terdaftar atas nama " +
                                        nik[0].nama_debitur,
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan: "Not Found",
                                    });
                                  } else {
                                    cekvalid.push();
                                  }

                                  if (
                                    nik[0] &&
                                    nik[0].kode_bank != array.kodeBank &&
                                    nik[0] &&
                                    new Date(nik[0].tgl_akhir_pertanggungan) >=
                                      new Date()
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0220",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "NIK " +
                                        array.noIdentitas +
                                        " sudah pernah terdaftar pada kode bank " +
                                        nik[0].kode_bank,
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan: "Not Found",
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  // if(cek_no_pk[0])
                                  // {
                                  //     cekvalid.push({status: false, errorCode:'0220', errorType:'Data Validation', errorMessage:'Nomor perjanjian kredit '+array.noPk+' telah terdaftar dengan kode bank '+array.kodeBank+' (Tidak boleh ada No PK yang sama pada satu kode bank)', trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss" ), cabangRekanan: "Not Found"})
                                  // }
                                  // else
                                  // {
                                  //     cekvalid.push()
                                  // }
                                  if (
                                    nik_limit_fix >= 10000000000 ||
                                    +nik_limit_fix + array.plafonKredit >
                                      10000000000
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0209",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Total plafond untuk NIK " +
                                        array.noIdentitas +
                                        " sudah mencapai nilai maksimum (10 Miliar)",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan: "Not Found",
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (
                                    array.jenisKelamin == 9 &&
                                    (array.pendidikan != 9 ||
                                      array.maritalStatus != 9 ||
                                      array.kodePekerjaan != 99)
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0227",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Bila jenis_kelamin 9, [marital_status,pendidikan] harus 9 dan [kode_pekerjaan] harus 99",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan: "Not Found",
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  if (
                                    array.jenisKelamin != 9 &&
                                    (array.pendidikan == 9 ||
                                      array.maritalStatus == 9)
                                  ) {
                                    cekvalid.push({
                                      status: false,
                                      errorCode: "0227",
                                      errorType: "Data Validation",
                                      errorMessage:
                                        "Bila jenis_kelamin = 1 atau 2, [marital_status,pendidikan] tidak boleh 9",
                                      trxDateResponse: dateFormat(
                                        new Date(),
                                        "yyyymmddHHMMss"
                                      ),
                                      cabangRekanan: "Not Found",
                                    });
                                  } else {
                                    cekvalid.push();
                                  }
                                  console.log(cekvalid);
                                  ret = cekvalid;
                                }
                              }
                            });
                        });
                    });
                });
            });
        });
    });
  return ret;
};

getSektorEkonomi = async function (params) {
  var ret;
  sektor_ekonomi = await model.sequelize
    .query(
      "select * from m_sektor_ekonomi where kode_sektor_ekonomi = " +
        "'" +
        params.kodeSektor +
        "'",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (sektor_ekonomi) {
      ret = sektor_ekonomi[0].kode_lbu;
    });
  return ret;
};

getIdPenjaminan = async function (params) {
  var ret;
  id_penjaminan = await model.sequelize
    .query(
      "select * from t_penjaminan where transaction_id_bank = " +
        "'" +
        params.nomorAplikasi +
        "' and no_id_debitur = " +
        "'" +
        params.noIdentitas +
        "' and status_penjaminan_id != 4",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (id_penjaminan) {
      ret = id_penjaminan[0].id_penjaminan;
    });
  return ret;
};

getIdPenjaminanCBC = async function (params) {
  var ret;
  id_penjaminan = await model.sequelize
    .query(
      "select * from t_penjaminan where no_id_debitur = " +
        "'" +
        params.noIdentitas +
        "' and status_penjaminan_id = 6 and kode_bank = " + 
        "'" +
        params.kodeBank +
        "'",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (id_penjaminan) {
      if (id_penjaminan.length > 0) {
        
        updateNorek = model.sequelize
          .query(
            "update t_penjaminan set no_rekening_pinjaman = " +"'" + params.noRekening 
            +"' , transaction_id_bank = '"+params.noRekening 
            +"' , no_perjanjian_kredit = '"+params.noPk
            +"' , plafond_kredit = '"+params.plafonKredit 
            +"' , tgl_awal_pertanggungan = '"+params.tanggalAwal
            +"' , tgl_akhir_pertanggungan = '"+params.tanggalAkhirl  
            +"' WHERE id_penjaminan = "+ id_penjaminan[0].id_penjaminan,
            {
              // replacements: {id: carIds},
              type: model.sequelize.QueryTypes.UPDATE,
              quoteIdentifiers: true,
            }
          )

        ret = id_penjaminan[0].id_penjaminan;

      } else {
        ret = null;
      }
    });
  return ret;
};

getIdPenjaminanCovBatch = async function (params) {
  var ret;
  id_penjaminan = await model.sequelize
    .query(
      "select * from t_penjaminan where transaction_id_bank = " +
        "'" +
        params.transaction_id_bank +
        "' and no_id_debitur = " +
        "'" +
        params.no_id_debitur +
        "' and status_penjaminan_id != 4",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (id_penjaminan) {
      ret = id_penjaminan[0].id_penjaminan;
    });
  return ret;
};

getPenjaminan = async function (params) {
  var ret;
  id_penjaminan = await model.sequelize
    .query(
      "select * from t_penjaminan where no_sertifikat = " + "'" + params + "'",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (id_penjaminan) {
      ret = id_penjaminan;
    });
  return ret;
};

getPenjaminanById = async function (params) {
  var ret;
  penjaminan = await model.sequelize
    .query("select * from t_penjaminan where id_penjaminan = " + params, {
      // replacements: {id: carIds},
      type: model.sequelize.QueryTypes.SELECT,
      quoteIdentifiers: true,
    })
    .then(function (penjaminan) {
      ret = penjaminan;
    });
  return ret;
};

getDokumenPembatalanByIdPrev = async function (params) {
  var ret;
  penjaminan = await model.sequelize
    .query(
      "select dokumen_pembatalan, id_penjaminan from t_penjaminan where id_penjaminan_prev = " +
        params,
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (penjaminan) {
      ret = penjaminan;
    });
  return ret;
};

insertAgunan = async function (
  params,
  id_penjaminan,
  createdBy = "H2H API Direct"
) {
  var ret;
  if (!params.jenisAgunan) {
    params.jenisAgunan = null;
  } else {
    params.jenisAgunan = "'" + params.jenisAgunan + "'";
  }
  if (!params.jenisPengikatan) {
    params.jenisPengikatan = null;
  } else {
    params.jenisPengikatan = "'" + params.jenisPengikatan + "'";
  }
  if (!params.noAgunan) {
    params.noAgunan = null;
  } else {
    params.noAgunan = "'" + params.noAgunan + "'";
  }
  if (!params.lokasiAgunan) {
    params.lokasiAgunan = null;
  } else {
    params.lokasiAgunan = params.lokasiAgunan;
  }
  if (!params.pemilikAgunan) {
    params.pemilikAgunan = null;
  } else {
    params.pemilikAgunan = params.pemilikAgunan;
  }
  if (!params.npw && params.npw !== 0) {
    params.npw = null;
  } else {
    params.npw = params.npw;
  }
  if (!params.nl && params.nl !== 0) {
    params.nl = null;
  } else {
    params.nl = params.nl;
  }
  if (!params.pnpw && params.pnpw !== 0) {
    params.pnpw = null;
  } else {
    params.pnpw = params.pnpw;
  }
  if (!params.pnl && params.pnl !== 0) {
    params.pnl = null;
  } else {
    params.pnl = params.pnl;
  }
  console.log(params.nilaiAgunan);
  if (!params.nilaiAgunan && params.nilaiAgunan !== 0) {
    params.nilaiAgunan = null;
  } else {
    params.nilaiAgunan = params.nilaiAgunan;
  }
  agunan = await model.sequelize
    .query(
      "INSERT INTO public.t_penjaminan_agunan(id_penjaminan, jenis_agunan, jenis_pengikatan, no_agunan, lokasi_agunan, pemilik_agunan, npw, nl, pnpw, pnl, version, created_by, created_date, modified_by, modified_date, nilai_agunan)VALUES(:id_penjaminan, " +
        params.jenisAgunan +
        ", " +
        params.jenisPengikatan +
        ", " +
        params.noAgunan +
        ", :lokasi_agunan, :pemilik_agunan, " +
        params.npw +
        ", " +
        params.nl +
        ", " +
        params.pnpw +
        ", " +
        params.pnl +
        ", 1, '" +
        createdBy +
        "', now(), NULL, NULL, " +
        params.nilaiAgunan +
        ")",
      {
        replacements: {
          id_penjaminan: id_penjaminan,
          pemilik_agunan: params.pemilikAgunan,
          lokasi_agunan: params.lokasiAgunan,
        },
        type: model.sequelize.QueryTypes.INSERT,
        quoteIdentifiers: true,
      }
    )
    .then(function (id_penjaminan) {
      ret = "OK";
    });

  return ret;
};

insertOutstanding = async function (
  params,
  id_penjaminan,
  createdBy = "H2H API Direct"
) {
  var ret;

  if (!params.outstanding && params.outstanding !== 0) {
    params.outstanding = null;
  } else {
    params.outstanding = params.outstanding;
  }
  if (!params.angsuranPokok && params.angsuranPokok !== 0) {
    params.angsuranPokok = null;
  } else {
    params.angsuranPokok = params.angsuranPokok;
  }
  if (!params.angsuranBunga && params.angsuranBunga !== 0) {
    params.angsuranBunga = null;
  } else {
    params.angsuranBunga = params.angsuranBunga;
  }
  if (!params.angsuranDenda && params.angsuranDenda !== 0) {
    params.angsuranDenda = null;
  } else {
    params.angsuranDenda = params.angsuranDenda;
  }

  outstanding = await model.sequelize
    .query(
      "INSERT INTO public.t_outstanding_teoritis(id_penjaminan, tanggal_saldo, outstanding, angsuran_pokok, angsuran_bunga, angsuran_denda, version, created_by, created_date, modified_by, modified_date)VALUES(:id_penjaminan, '" +
        params.tanggalSaldo +
        "', " +
        params.outstanding +
        ", " +
        params.angsuranPokok +
        ", " +
        params.angsuranBunga +
        ", " +
        params.angsuranDenda +
        ", 1, '" +
        createdBy +
        "', now(), NULL, NULL)",
      {
        replacements: { id_penjaminan: id_penjaminan },
        type: model.sequelize.QueryTypes.INSERT,
        quoteIdentifiers: true,
      }
    )
    .then(function (outstanding) {
      ret = "OK";
    });

  return ret;
};

insertIjp = async function (
  id_penjaminan,
  tahun_ke,
  premi,
  cadangan,
  jatuh_tempo,
  jml_hari = 0,
  jml_hari_tahunan = 0,
  createdBy = "H2H API Direct"
) {
  var ret;
  ijp = await model.sequelize
    .query(
      "INSERT INTO public.t_penjaminan_ijp(id_penjaminan, tahun_ke, tgl_premi, premi, jatuh_tempo, premi_dibayar, status_bayar, no_bukti_bayar, tgl_bayar, version, created_by, created_date, modified_by, modified_date, cadangan, jml_hari, jml_hari_tahunan)VALUES(:id_penjaminan, :tahun_ke, (CURRENT_DATE + INTERVAL '" +
        (tahun_ke - 1) +
        " year'), :premi, (date(:jatuh_tempo) + INTERVAL '" +
        (tahun_ke - 1) +
        " year'), 0, false, NULL, NULL, 1, '" +
        createdBy +
        "', now(), NULL, NULL, :cadangan, :jml_hari, :jml_hari_tahunan);",
      {
        replacements: {
          id_penjaminan: id_penjaminan,
          tahun_ke: tahun_ke,
          premi: premi,
          cadangan: cadangan,
          jatuh_tempo: jatuh_tempo,
          jml_hari: jml_hari,
          jml_hari_tahunan: jml_hari_tahunan,
        },
        type: model.sequelize.QueryTypes.INSERT,
        quoteIdentifiers: true,
      }
    )
    .then(function (ijp) {
      ret = "OK";
    });

  return ret;
};

insertIjpPatch = async function (
  id_penjaminan,
  tahun_ke,
  premi,
  cadangan,
  tgl_sertifikat,
  jatuh_tempo,
  createdBy = "H2H API Direct"
) {
  var ret;

  if (tahun_ke == 2 || tahun_ke == 3) {
    ijp = await model.sequelize
      .query(
        "update t_penjaminan_ijp_back27082020 set premi = :premi, cadangan = :cadangan where id_penjaminan = :id_penjaminan and tahun_ke = :tahun_ke;",
        {
          replacements: {
            id_penjaminan: id_penjaminan,
            tahun_ke: tahun_ke,
            premi: premi,
            cadangan: cadangan,
            tgl_sertifikat: tgl_sertifikat,
            jatuh_tempo: jatuh_tempo,
          },
          type: model.sequelize.QueryTypes.UPDATE,
          quoteIdentifiers: true,
        }
      )
      .then(function (ijp) {
        ret = "OK";
      });
  }

  // ijp = await model.sequelize.query("INSERT INTO public.t_penjaminan_ijp(id_penjaminan, tahun_ke, tgl_premi, premi, jatuh_tempo, premi_dibayar, status_bayar, no_bukti_bayar, tgl_bayar, version, created_by, created_date, modified_by, modified_date, cadangan)VALUES(:id_penjaminan, :tahun_ke, (:tgl_sertifikat::date + INTERVAL '"+(tahun_ke-1)+" year'), :premi, (date(:jatuh_tempo) + INTERVAL '"+(tahun_ke-1)+" year'), 0, false, NULL, NULL, 1, '"+createdBy+"', now(), NULL, NULL, :cadangan);", {
  //     replacements: {id_penjaminan: id_penjaminan, tahun_ke: tahun_ke, premi: premi, cadangan: cadangan, tgl_sertifikat: tgl_sertifikat, jatuh_tempo:jatuh_tempo},
  //     type: model.sequelize.QueryTypes.INSERT,
  //     quoteIdentifiers: true}).then(
  //         function (ijp) {
  //             ret = 'OK';
  //         }
  //     )

  return ret;
};

insertReject = async function (params, keterangan = null, no_pks = null) {
  var ret;
  if (!params.uploadId) {
    params.uploadId = null;
  } else {
    params.uploadId = "'" + params.uploadId + "'";
  }
  if (!params.kodeBank) {
    params.kodeBank = null;
  } else {
    params.kodeBank = "'" + params.kodeBank + "'";
  }
  if (!params.sumber) {
    sumber = 1;
  } else {
    sumber = params.sumber;
  }
  if (!params.nomorAplikasi) {
    params.nomorAplikasi = null;
  } else {
    params.nomorAplikasi = "'" + params.nomorAplikasi + "'";
  }
  if (!params.kodeUker) {
    params.kodeUker = null;
  } else {
    params.kodeUker = "'" + params.kodeUker + "'";
  }
  if (!params.namaUker) {
    params.namaUker = null;
  } else {
    params.namaUker = "'" + params.namaUker + "'";
  }
  if (!params.noRekening) {
    params.noRekening = null;
  } else {
    params.noRekening =
      "'" + params.noRekening.replace(/[^0-9a-z]/gi, "") + "'";
  }
  if (!params.noRekLama) {
    params.noRekLama = null;
  } else {
    params.noRekLama = "'" + params.noRekLama + "'";
  }
  if (!params.cif) {
    params.cif = null;
  } else {
    params.cif = "'" + params.cif + "'";
  }
  if (!params.noPk) {
    params.noPk = null;
  } else {
    params.noPk = "'" + params.noPk + "'";
  }
  if (!params.noPkLama) {
    params.noPkLama = null;
  } else {
    params.noPkLama = "'" + params.noPkLama + "'";
  }
  if (!params.tglPK) {
    params.tglPK = null;
  } else {
    params.tglPK = "'" + params.tglPK + "'";
  }
  if (!params.tglPkLama) {
    params.tglPkLama = null;
  } else {
    params.tglPkLama = "'" + params.tglPkLama + "'";
  }
  if (!params.tanggalAwal) {
    params.tanggalAwal = null;
  } else {
    params.tanggalAwal = "'" + params.tanggalAwal + "'";
  }
  if (!params.tanggalAkhir) {
    params.tanggalAkhir = null;
  } else {
    params.tanggalAkhir = "'" + params.tanggalAkhir + "'";
  }
  if (!params.jangkaWaktu) {
    params.jangkaWaktu = null;
  } else {
    params.jangkaWaktu = params.jangkaWaktu;
  }
  if (!params.namaDebitur) {
    params.namaDebitur = null;
  } else {
    params.namaDebitur = params.namaDebitur;
  }
  if (!params.alamatDebitur) {
    params.alamatDebitur = null;
  } else {
    params.alamatDebitur = params.alamatDebitur;
  }
  if (!params.kodePos) {
    params.kodePos = null;
  } else {
    params.kodePos = "'" + params.kodePos + "'";
  }
  if (!params.tempatLahir) {
    params.tempatLahir = null;
  } else {
    params.tempatLahir = "'" + params.tempatLahir + "'";
  }
  if (!params.tanggalLahir) {
    params.tanggalLahir = null;
  } else {
    params.tanggalLahir = "'" + params.tanggalLahir + "'";
  }
  if (!params.jenisKelamin) {
    params.jenisKelamin = null;
  } else {
    params.jenisKelamin = params.jenisKelamin;
  }
  if (!params.noTelepon) {
    params.noTelepon = null;
  } else {
    params.noTelepon = "'" + params.noTelepon + "'";
  }
  if (!params.noHp) {
    params.noHp = null;
  } else {
    params.noHp = "'" + params.noHp + "'";
  }
  if (!params.pendidikan) {
    params.pendidikan = null;
  } else {
    params.pendidikan = params.pendidikan;
  }
  if (!params.maritalStatus && params.maritalStatus != 0) {
    params.maritalStatus = null;
  } else {
    params.maritalStatus = params.maritalStatus;
  }
  if (!params.jenisIdentitas) {
    params.jenisIdentitas = null;
  } else {
    params.jenisIdentitas = "'" + params.jenisIdentitas + "'";
  }
  if (!params.noIdentitas) {
    params.noIdentitas = null;
  } else {
    params.noIdentitas = "'" + params.noIdentitas + "'";
  }
  if (!params.npwp) {
    params.npwp = null;
  } else {
    params.npwp = "'" + params.npwp + "'";
  }
  if (!params.noIjinUsaha) {
    params.noIjinUsaha = null;
  } else {
    params.noIjinUsaha = "'" + params.noIjinUsaha + "'";
  }
  if (!params.tglMulaiUsaha) {
    params.tglMulaiUsaha = null;
  } else {
    params.tglMulaiUsaha = "'" + params.tglMulaiUsaha + "'";
  }
  if (!params.modalUsaha && params.modalUsaha !== 0) {
    params.modalUsaha = null;
  } else {
    params.modalUsaha = params.modalUsaha;
  }
  if (!params.jumlahTenagaKerja && params.jumlahTenagaKerja !== 0) {
    params.jumlahTenagaKerja = null;
  } else {
    params.jumlahTenagaKerja = params.jumlahTenagaKerja;
  }
  if (!params.omsetUsaha && params.omsetUsaha !== 0) {
    params.omsetUsaha = null;
  } else {
    params.omsetUsaha = params.omsetUsaha;
  }
  if (!params.kekayaanBersih && params.kekayaanBersih) {
    params.kekayaanBersih = null;
  } else {
    params.kekayaanBersih = params.kekayaanBersih;
  }
  if (!params.kodePekerjaan) {
    params.kodePekerjaan = null;
  } else {
    params.kodePekerjaan = params.kodePekerjaan;
  }
  if (!params.statusKepegawaian) {
    params.statusKepegawaian = null;
  } else {
    params.statusKepegawaian = "'" + params.statusKepegawaian + "'";
  }
  if (!params.jenisKredit) {
    params.jenisKredit = "GEN2";
  } else {
    params.jenisKredit = "GEN2";
    params.jenisKredit = "'" + params.jenisKredit + "'";
  }
  if (!params.plafonKredit && params.plafonKredit !== 0) {
    params.plafonKredit = null;
  } else {
    params.plafonKredit = params.plafonKredit;
  }
  if (!params.plafonKreditLama && params.plafonKreditLama) {
    params.plafonKreditLama = null;
  } else {
    params.plafonKreditLama = params.plafonKreditLama;
  }
  if (!params.typeTujuanKredit) {
    params.typeTujuanKredit = null;
  } else {
    params.typeTujuanKredit = "'" + params.typeTujuanKredit + "'";
  }
  if (!params.sukuBunga) {
    params.sukuBunga = null;
  } else {
    params.sukuBunga = "'" + params.sukuBunga + "'";
  }
  if (!params.kodeSektor) {
    params.kodeSektor = null;
  } else {
    params.kodeSektor = "'" + params.kodeSektor + "'";
  }
  if (!params.coverage) {
    params.coverage = null;
  } else {
    params.coverage = params.coverage;
  }
  if (!params.statusKolektibilitas) {
    params.statusKolektibilitas = null;
  } else {
    params.statusKolektibilitas = "'" + params.statusKolektibilitas + "'";
  }
  if (!params.loanType) {
    params.loanType = null;
  } else {
    params.loanType = "'" + params.loanType + "'";
  }
  if (!params.statusAkad) {
    params.statusAkad = null;
  } else {
    params.statusAkad = "'" + params.statusAkad + "'";
  }
  if (!params.noSertifikatLama) {
    params.noSertifikatLama = null;
  } else {
    params.noSertifikatLama = "'" + params.noSertifikatLama + "'";
  }
  if (!keterangan) {
    keterangan = null;
  } else {
    keterangan = "'" + keterangan + "'";
  }
  if (!no_pks) {
    no_pks = null;
  } else {
    no_pks = "'" + no_pks + "'";
  }
  if (!params.createdBy) {
    params.createdBy = "'H2H API Direct'";
  } else {
    params.createdBy = "'" + params.createdBy + "'";
  }
  insert = await model.sequelize
    .query(
      "SET TIMEZONE='Asia/Bangkok'; INSERT INTO public.t_upload_reject(upload_id, kode_bank, transaction_id_bank, kode_cabang_bank, nama_cabang_bank, no_rekening_pinjaman, no_rek_lama, cif, no_perjanjian_kredit, no_pk_lama, tgl_pk, tgl_pk_lama, tgl_awal_pertanggungan, tgl_akhir_pertanggungan, jangka_waktu, nama_debitur, alamat_debitur, kode_pos, tempat_lahir, tgl_lahir, jenis_kelamin, no_telepon, no_hp_debitur, pendidikan, marital_status, jenis_identitas, no_id_debitur, npwp, no_ijin_usaha, tgl_mulai_usaha, modal_usaha, jumlah_tenaga_kerja, omset_usaha, kekayaaan_bersih, jenis_pekerjaan, status_kepegawaian, jenis_kredit, plafond_kredit, bakidebet, nilai_pertanggungan, type_tujuan_kredit, suku_bunga_kredit, currency, sektor_ekonomi, coverage, kolektibilitas_kredit, loan_type, mekanisme_penyaluran, jenis_pengajuan, no_sertifikat_sebelumnya, no_pks, keterangan, version, created_by, created_date, modified_by, modified_date)VALUES(" +
        params.uploadId +
        ", " +
        params.kodeBank +
        ", " +
        params.nomorAplikasi +
        ", " +
        params.kodeUker +
        ", " +
        params.namaUker +
        ", " +
        params.noRekening +
        ", " +
        params.noRekLama +
        ", " +
        params.cif +
        ", " +
        params.noPk +
        ", " +
        params.noPkLama +
        ", " +
        params.tglPK +
        ", " +
        params.tglPkLama +
        ", " +
        params.tanggalAwal +
        ", " +
        params.tanggalAkhir +
        ", " +
        params.jangkaWaktu +
        ", :nama_debitur, :alamat_debitur, " +
        params.kodePos +
        ", " +
        params.tempatLahir +
        ", " +
        params.tanggalLahir +
        ", " +
        params.jenisKelamin +
        ", " +
        params.noTelepon +
        ", " +
        params.noHp +
        ", " +
        params.pendidikan +
        ", " +
        params.maritalStatus +
        ", " +
        params.jenisIdentitas +
        ", " +
        params.noIdentitas +
        ", " +
        params.npwp +
        ", " +
        params.noIjinUsaha +
        ", " +
        params.tglMulaiUsaha +
        ", " +
        params.modalUsaha +
        ", " +
        params.jumlahTenagaKerja +
        ", " +
        params.omsetUsaha +
        ", " +
        params.kekayaanBersih +
        ", " +
        params.kodePekerjaan +
        ", " +
        params.statusKepegawaian +
        ", " +
        params.jenisKredit +
        ", " +
        params.plafonKredit +
        ", " +
        params.plafonKreditLama +
        ", " +
        (params.plafonKredit * params.coverage) / 100 +
        ", " +
        params.typeTujuanKredit +
        ", " +
        params.sukuBunga +
        ", 'IDR', " +
        params.kodeSektor +
        ", " +
        params.coverage +
        ", " +
        params.statusKolektibilitas +
        ", " +
        params.loanType +
        ", '1', " +
        params.statusAkad +
        ", " +
        params.noSertifikatLama +
        ", " +
        no_pks +
        ", " +
        keterangan +
        ", 1, " +
        params.createdBy +
        ", now(), NULL, NULL)",
      {
        replacements: {
          nama_debitur: params.namaDebitur,
          alamat_debitur: params.alamatDebitur,
        },
        type: model.sequelize.QueryTypes.INSERT,
        quoteIdentifiers: true,
      }
    )
    .then(
      function (params) {
        ret = "OK";
      },
      function (error) {
        ret = error;
      }
    );
  return ret;
};

updateSummaryUpload = async function (upload_id, sukses, gagal) {
  var ret;
  summary = await model.sequelize
    .query(
      "UPDATE t_upload_summary SET data_sukses = :sukses, data_gagal = :gagal, status = 'Done' WHERE upload_id = :upload_id",
      {
        replacements: { sukses: sukses, gagal: gagal, upload_id: upload_id },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = "OK";
    });
  return ret;
};

getKodeCabangAskrindo = async function (kodeBank, kodeUker) {
  var ret;
  kode_bank = await model.sequelize
    .query(
      "select * from m_mapping_bank where kode_bank = " +
        "'" +
        kodeBank +
        "'" +
        "and kode_cabang_bank =" +
        "'" +
        kodeUker +
        "'",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (kode_bank) {
      if (kode_bank.length == 0) {
        ret = "";
        console.log(ret);
      } else {
        ret = kode_bank[0].kode_cabang_askrindo;
        console.log(ret);
      }
    });
  return ret;
};

cekMDebitur = async function (params, ket_validasi_ejamku, validasi_ejamku) {
  var ret;
  m_debitur = await model.sequelize
    .query(
      "SELECT * FROM m_debitur WHERE no_id_debitur = " + params.noIdentitas,
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(async function (m_debitur) {
      if (m_debitur.length == 0) {
        insertDebitur = await model.sequelize.query(
          "INSERT INTO public.m_debitur (no_id_debitur,cif,nama_debitur,alamat_debitur,kode_pos,tempat_lahir,tgl_lahir,jenis_kelamin,no_telepon,no_hp_debitur,pendidikan,marital_status,jenis_identitas,npwp,no_ijin_usaha,tgl_mulai_usaha,modal_usaha,jumlah_tenaga_kerja,omset_usaha,kekayaan_bersih,jenis_pekerjaan,status_kepegawaian,status_ejamku,ket_ejamku,is_active,version,created_by,created_date) VALUES (" +
            params.noIdentitas +
            "," +
            params.cif +
            " ,'" +
            params.namaDebitur +
            "','" +
            params.alamatDebitur +
            "'," +
            params.kodePos +
            "," +
            params.tempatLahir +
            "," +
            params.tanggalLahir +
            "," +
            params.jenisKelamin +
            "," +
            params.noTelepon +
            "," +
            params.noHp +
            "," +
            params.pendidikan +
            "," +
            params.maritalStatus +
            "," +
            params.jenisIdentitas +
            "," +
            params.npwp +
            "," +
            params.noIjinUsaha +
            "," +
            params.tglMulaiUsaha +
            "," +
            params.modalUsaha +
            "," +
            params.jumlahTenagaKerja +
            "," +
            params.omsetUsaha +
            "," +
            params.kekayaanBersih +
            "," +
            params.kodePekerjaan +
            "," +
            params.statusKepegawaian +
            "," +
            validasi_ejamku +
            "," +
            ket_validasi_ejamku +
            ",true,1," +
            params.createdBy +
            ", now() )",
          {
            //replacements: {},
            type: model.sequelize.QueryTypes.INSERT,
            quoteIdentifiers: true,
          }
        );
        ret = params;
        console.log(ret);
      } else {
        ret = params;
        console.log(ret);
      }
    });
  return ret;
};

insertTanpaAcs = async function (
  params,
  statuspenjaminan,
  ket_validasi_ejamku,
  validasi_ejamku,
  keterangan = "SUCCESS",
  status_sikp = 0
) {
  var ret;
  var kode_cabang_askrindo_ret;
  var is_cac;
  var sumber;

  kode_bank = await model.sequelize
    .query(
      "select * from m_mapping_bank where kode_bank = " +
        "'" +
        params.kodeBank +
        "'" +
        "and kode_cabang_bank =" +
        "'" +
        params.kodeUker +
        "'",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(async function (kode_bank) {
      no_pks = await model.sequelize
        .query(
          "select * from m_bank where kode_bank = " +
            "'" +
            params.kodeBank +
            "'",
          {
            // replacements: {id: carIds},
            type: model.sequelize.QueryTypes.SELECT,
            quoteIdentifiers: true,
          }
        )
        .then(async function (no_pks) {
          if (!params.sumber) {
            sumber = 1;
          } else {
            sumber = params.sumber;
          }
          if (params.plafonKredit <= 1000000000) {
            is_cac = true;
          } else {
            is_cac = false;
          }
          if (!params.uploadId) {
            params.uploadId = null;
          } else {
            params.uploadId = "'" + params.uploadId + "'";
          }
          if (!params.kodeBank) {
            params.kodeBank = null;
          } else {
            params.kodeBank = "'" + params.kodeBank + "'";
          }
          if (!params.nomorAplikasi) {
            params.nomorAplikasi = null;
          } else {
            params.nomorAplikasi = "'" + params.nomorAplikasi + "'";
          }
          if (!params.kodeUker) {
            params.kodeUker = null;
          } else {
            params.kodeUker = "'" + params.kodeUker + "'";
          }
          if (!params.namaUker) {
            params.namaUker = null;
          } else {
            params.namaUker = "'" + params.namaUker + "'";
          }
          if (!params.noRekening) {
            params.noRekening = null;
          } else {
            params.noRekening =
              "'" + params.noRekening.replace(/[^0-9a-z]/gi, "") + "'";
          }
          if (!params.noRekLama) {
            params.noRekLama = null;
          } else {
            params.noRekLama = "'" + params.noRekLama + "'";
          }
          if (!params.cif) {
            params.cif = null;
          } else {
            params.cif = "'" + params.cif + "'";
          }
          if (!params.noPk) {
            params.noPk = null;
          } else {
            params.noPk = "'" + params.noPk + "'";
          }
          if (!params.noPkLama) {
            params.noPkLama = null;
          } else {
            params.noPkLama = "'" + params.noPkLama + "'";
          }
          if (!params.tglPK) {
            params.tglPK = null;
          } else {
            params.tglPK = "'" + params.tglPK + "'";
          }
          if (!params.tglPkLama) {
            params.tglPkLama = null;
          } else {
            params.tglPkLama = "'" + params.tglPkLama + "'";
          }
          if (!params.tanggalAwal) {
            params.tanggalAwal = null;
          } else {
            params.tanggalAwal = "'" + params.tanggalAwal + "'";
          }
          if (!params.tanggalAkhir) {
            params.tanggalAkhir = null;
          } else {
            params.tanggalAkhir = "'" + params.tanggalAkhir + "'";
          }
          if (!params.jangkaWaktu) {
            params.jangkaWaktu = null;
          } else {
            params.jangkaWaktu = params.jangkaWaktu;
          }
          if (!params.namaDebitur) {
            params.namaDebitur = null;
          } else {
            params.namaDebitur = params.namaDebitur;
          }
          if (!params.alamatDebitur) {
            params.alamatDebitur = null;
          } else {
            params.alamatDebitur = params.alamatDebitur;
          }
          if (!params.kodePos) {
            params.kodePos = null;
          } else {
            params.kodePos = "'" + params.kodePos + "'";
          }
          if (!params.tempatLahir) {
            params.tempatLahir = null;
          } else {
            params.tempatLahir = "'" + params.tempatLahir + "'";
          }
          if (!params.tanggalLahir) {
            params.tanggalLahir = null;
          } else {
            params.tanggalLahir = "'" + params.tanggalLahir + "'";
          }
          if (!params.jenisKelamin) {
            params.jenisKelamin = null;
          } else {
            params.jenisKelamin = params.jenisKelamin;
          }
          if (!params.noTelepon) {
            params.noTelepon = null;
          } else {
            params.noTelepon = "'" + params.noTelepon + "'";
          }
          if (!params.noHp) {
            params.noHp = null;
          } else {
            params.noHp = "'" + params.noHp + "'";
          }
          if (!params.pendidikan) {
            params.pendidikan = null;
          } else {
            params.pendidikan = params.pendidikan;
          }
          if (!params.maritalStatus && params.maritalStatus != 0) {
            params.maritalStatus = null;
          } else {
            params.maritalStatus = params.maritalStatus;
          }
          if (!params.jenisIdentitas) {
            params.jenisIdentitas = null;
          } else {
            params.jenisIdentitas = "'" + params.jenisIdentitas + "'";
          }
          if (!params.noIdentitas) {
            params.noIdentitas = null;
          } else {
            params.noIdentitas = "'" + params.noIdentitas + "'";
          }
          if (!params.npwp) {
            params.npwp = null;
          } else {
            params.npwp = "'" + params.npwp + "'";
          }
          if (!params.noIjinUsaha) {
            params.noIjinUsaha = null;
          } else {
            params.noIjinUsaha = "'" + params.noIjinUsaha + "'";
          }
          if (!params.tglMulaiUsaha) {
            params.tglMulaiUsaha = null;
          } else {
            params.tglMulaiUsaha = "'" + params.tglMulaiUsaha + "'";
          }
          if (!params.modalUsaha && params.modalUsaha !== 0) {
            params.modalUsaha = null;
          } else {
            params.modalUsaha = params.modalUsaha;
          }
          if (!params.jumlahTenagaKerja && params.jumlahTenagaKerja !== 0) {
            params.jumlahTenagaKerja = null;
          } else {
            params.jumlahTenagaKerja = params.jumlahTenagaKerja;
          }
          if (!params.omsetUsaha && params.omsetUsaha !== 0) {
            params.omsetUsaha = null;
          } else {
            params.omsetUsaha = params.omsetUsaha;
          }
          if (!params.kekayaanBersih && params.kekayaanBersih !== 0) {
            params.kekayaanBersih = null;
          } else {
            params.kekayaanBersih = params.kekayaanBersih;
          }
          if (!params.kodePekerjaan) {
            params.kodePekerjaan = null;
          } else {
            params.kodePekerjaan = params.kodePekerjaan;
          }
          if (!params.statusKepegawaian) {
            params.statusKepegawaian = null;
          } else {
            params.statusKepegawaian = "'" + params.statusKepegawaian + "'";
          }
          if (!params.jenisKredit) {
            params.jenisKredit = "GEN2";
          } else {
            params.jenisKredit = "GEN2";
            params.jenisKredit = "'" + params.jenisKredit + "'";
          }
          if (!params.plafonKredit && params.plafonKredit !== 0) {
            params.plafonKredit = null;
          } else {
            params.plafonKredit = params.plafonKredit;
          }
          if (!params.plafonKreditLama && params.plafonKreditLama !== 0) {
            params.plafonKreditLama = null;
          } else {
            params.plafonKreditLama = params.plafonKreditLama;
          }
          if (!params.typeTujuanKredit) {
            params.typeTujuanKredit = null;
          } else {
            params.typeTujuanKredit = "'" + params.typeTujuanKredit + "'";
          }
          if (!params.sukuBunga) {
            params.sukuBunga = null;
          } else {
            params.sukuBunga = "'" + params.sukuBunga + "'";
          }
          if (!params.kodeSektor) {
            params.kodeSektor = null;
          } else {
            params.kodeSektor = "'" + params.kodeSektor + "'";
          }
          if (!params.coverage) {
            params.coverage = null;
          } else {
            params.coverage = params.coverage;
          }
          if (!params.statusKolektibilitas) {
            params.statusKolektibilitas = null;
          } else {
            params.statusKolektibilitas =
              "'" + params.statusKolektibilitas + "'";
          }
          if (!params.loanType) {
            params.loanType = null;
          } else {
            params.loanType = "'" + params.loanType + "'";
          }
          if (!params.statusAkad) {
            params.statusAkad = null;
          } else {
            params.statusAkad = "'" + params.statusAkad + "'";
          }
          if (!params.noSertifikatLama) {
            params.noSertifikatLama = null;
          } else {
            params.noSertifikatLama = "'" + params.noSertifikatLama + "'";
          }
          if (!keterangan) {
            keterangan = null;
          } else {
            keterangan = "'" + keterangan + "'";
          }

          if (!params.createdBy) {
            params.createdBy = "'H2H API Direct'";
          } else {
            params.createdBy = "'" + params.createdBy + "'";
          }
          kode_cabang_askrindo_ret =
            "'" + kode_bank[0].kode_cabang_askrindo + "'";
          no_pks = no_pks[0].no_pks;

          m_debitur = await model.sequelize
            .query(
              "SELECT * FROM m_debitur WHERE no_id_debitur = " +
                params.noIdentitas,
              {
                // replacements: {id: carIds},
                type: model.sequelize.QueryTypes.SELECT,
                quoteIdentifiers: true,
              }
            )
            .then(async function (m_debitur) {
              if (m_debitur.length == 0) {
                insertDebitur = await model.sequelize.query(
                  "INSERT INTO public.m_debitur (no_id_debitur,cif,nama_debitur,alamat_debitur,kode_pos,tempat_lahir,tgl_lahir,jenis_kelamin,no_telepon,no_hp_debitur,pendidikan,marital_status,jenis_identitas,npwp,no_ijin_usaha,tgl_mulai_usaha,modal_usaha,jumlah_tenaga_kerja,omset_usaha,kekayaan_bersih,jenis_pekerjaan,status_kepegawaian,status_ejamku,ket_ejamku,is_active,version,created_by,created_date) VALUES (" +
                    params.noIdentitas +
                    "," +
                    params.cif +
                    ",'" +
                    params.namaDebitur +
                    "','" +
                    params.alamatDebitur +
                    "'," +
                    params.kodePos +
                    "," +
                    params.tempatLahir +
                    "," +
                    params.tanggalLahir +
                    "," +
                    params.jenisKelamin +
                    "," +
                    params.noTelepon +
                    "," +
                    params.noHp +
                    "," +
                    params.pendidikan +
                    "," +
                    params.maritalStatus +
                    "," +
                    params.jenisIdentitas +
                    "," +
                    params.npwp +
                    "," +
                    params.noIjinUsaha +
                    "," +
                    params.tglMulaiUsaha +
                    "," +
                    params.modalUsaha +
                    "," +
                    params.jumlahTenagaKerja +
                    "," +
                    params.omsetUsaha +
                    "," +
                    params.kekayaanBersih +
                    "," +
                    params.kodePekerjaan +
                    "," +
                    params.statusKepegawaian +
                    "," +
                    validasi_ejamku +
                    "," +
                    ket_validasi_ejamku +
                    ",true,1," +
                    params.createdBy +
                    ", now() )",
                  {
                    type: model.sequelize.QueryTypes.INSERT,
                    quoteIdentifiers: true,
                  }
                );
                console.log("OK");
              } else {
                console.log("OK");
              }
            });

          cekCBC = await model.sequelize
          .query(
            "SELECT * FROM t_penjaminan WHERE no_id_debitur = " +
              params.noIdentitas +" AND status_penjaminan_id = 6 ",
            {
              // replacements: {id: carIds},
              type: model.sequelize.QueryTypes.SELECT,
              quoteIdentifiers: true,
            }
          ).then(async function (cekCBC) {
            if (cekCBC.length > 0) {
              updateCBC = await model.sequelize
              .query(
                "UPDATE t_penjaminan SET kode_bank = " + params.kodeBank + " , " +
                "transaction_id_bank = " + params.nomorAplikasi + " , " +
                "kode_cabang_bank = " + params.kodeUker + " , " +
                "nama_cabang_bank = " + params.namaUker + " , " +
                "kode_cabang_askrindo =  " + kode_cabang_askrindo_ret + " , " +
                "no_rekening_pinjaman = " + params.noRekening + " , " +
                "no_rek_lama = " + params.noRekLama + " , " +
                "cif = " + params.cif + " , " +
                "no_perjanjian_kredit =  " + params.noPk + " , " +
                "no_pk_lama = " + params.noPkLama + " , " +
                "tgl_pk = " + params.tglPK + " , " +
                "tgl_pk_lama =  " + params.tglPkLama + " , " +
                "tgl_awal_pertanggungan =  " + params.tanggalAwal + " , " +
                "tgl_akhir_pertanggungan = " + params.tanggalAkhir + " , " +
                "jangka_waktu = " + params.jangkaWaktu + " , " +
                "nama_debitur = '" + params.namaDebitur + "', " +
                "alamat_debitur = "+ params.alamatDebitur + ", " +
                "kode_pos = " + params.kodePos + " , " +
                "tempat_lahir = " + params.tempatLahir + " , " +
                "tgl_lahir = " + params.tanggalLahir + " , " +
                "jenis_kelamin =  " + params.jenisKelamin + " , " +
                "no_telepon = " + params.noTelepon + " , " +
                "no_hp_debitur =  " + params.noHp + " , " +
                "pendidikan = " + params.pendidikan + " , " +
                "marital_status =  " + params.maritalStatus + " , " +
                "jenis_identitas = " + params.jenisIdentitas + " , " +
                "no_id_debitur = " + params.noIdentitas + " , " +
                "npwp = " + params.npwp + " , " +
                "no_ijin_usaha =  " + params.noIjinUsaha + " , " +
                "tgl_mulai_usaha =  " + params.tglMulaiUsaha + " , " +
                "modal_usaha = " + params.modalUsaha + " , " +
                "jumlah_tenaga_kerja =  " + params.jumlahTenagaKerja + " , " +
                "omset_usaha = " + params.omsetUsaha + " , " +
                "kekayaan_bersih =  " + params.kekayaanBersih + " , " +
                "jenis_pekerjaan = " + params.kodePekerjaan + " , " +
                "status_kepegawaian =  " + params.statusKepegawaian + " , " +
                "jenis_kredit = " + params.jenisKredit + " , " +
                "plafond_kredit = " + params.plafonKredit + " , " +
                "bakidebet = " + params.plafonKreditLama + " , " +
                "nilai_pertanggungan = " + (params.plafonKredit * params.coverage) / 100 + " , " +
                "type_tujuan_kredit = " + params.typeTujuanKredit + " , " +
                "suku_bunga_kredit = " + params.sukuBunga + " , " +
                "currency = 'IDR' , " +
                "sektor_ekonomi =  " + params.kodeSektor + " , " +
                "coverage = " + params.coverage + " , " +
                "kolektibilitas_kredit = " + params.statusKolektibilitas + " , " +
                "loan_type = " + params.loanType + " , " +
                "mekanisme_penyaluran = '1' , " +
                "no_sertifikat = NULL , " +
                "tgl_sertifikat = NULL , " +
                "tgl_rekam_sertifikat =  NULL , " +
                "rate = 0 , " +
                "total_ijp =  0 , " +
                "status_penjaminan_id = :status_penjaminan_id , " +
                "jenis_pengajuan = " + params.statusAkad + " , " +
                "no_sertifikat_sebelumnya = " + params.noSertifikatLama + " , " +
                "keterangan = NULL ," +
                "version = 1 , " +
                "modified_by = "+ params.createdBy , + " , " +
                "modified_date =  now() ," +
                "ket_validasi_ejamku =  :ket_validasi_ejamku , " +
                "validasi_ejamku = :validasi_ejamku , " +
                "status_sikp = :status_sikp , " +
                "jenis_pen = 'GEN2' WHERE id_penjaminan = "+ cekCBC[0].id_penjaminan ,
                {
                  replacements: {
                    status_penjaminan_id: statuspenjaminan,
                    sumber: sumber,
                    validasi_ejamku: validasi_ejamku,
                    ket_validasi_ejamku: ket_validasi_ejamku,
                    status_sikp: status_sikp,
                  },
                  type: model.sequelize.QueryTypes.UPDATE,
                  quoteIdentifiers: true,
                }
              )
            } else {
              insert = await model.sequelize
            .query(
              "SET TIMEZONE='Asia/Bangkok'; INSERT INTO public.t_penjaminan(kode_bank, transaction_id_bank, kode_cabang_bank, nama_cabang_bank, kode_cabang_askrindo, no_rekening_pinjaman, no_rek_lama, cif, no_perjanjian_kredit, no_pk_lama, tgl_pk, tgl_pk_lama, tgl_awal_pertanggungan, tgl_akhir_pertanggungan, jangka_waktu, nama_debitur, alamat_debitur, kode_pos, tempat_lahir, tgl_lahir, jenis_kelamin, no_telepon, no_hp_debitur, pendidikan, marital_status, jenis_identitas, no_id_debitur, npwp, no_ijin_usaha, tgl_mulai_usaha, modal_usaha, jumlah_tenaga_kerja, omset_usaha, kekayaan_bersih, jenis_pekerjaan, status_kepegawaian, jenis_kredit, plafond_kredit, bakidebet, nilai_pertanggungan, type_tujuan_kredit, suku_bunga_kredit, currency, sektor_ekonomi, coverage, kolektibilitas_kredit, loan_type, mekanisme_penyaluran, is_cac, sumber, no_sertifikat, tgl_sertifikat, tgl_rekam_sertifikat, rate, total_ijp, status_penjaminan_id, jenis_pengajuan, no_sertifikat_sebelumnya, no_pks, keterangan, version, created_by, created_date, modified_by, modified_date, ket_validasi_ejamku, validasi_ejamku, status_sikp, jenis_pen)VALUES(" +
                params.kodeBank +
                ", " +
                params.nomorAplikasi +
                ", " +
                params.kodeUker +
                ", " +
                params.namaUker +
                ", " +
                kode_cabang_askrindo_ret +
                ", " +
                params.noRekening +
                ", " +
                params.noRekLama +
                ", " +
                params.cif +
                ", " +
                params.noPk +
                ", " +
                params.noPkLama +
                ", " +
                params.tglPK +
                ", " +
                params.tglPkLama +
                ", " +
                params.tanggalAwal +
                ", " +
                params.tanggalAkhir +
                ", " +
                params.jangkaWaktu +
                ", :nama_debitur, :alamat_debitur, " +
                params.kodePos +
                ", " +
                params.tempatLahir +
                ", " +
                params.tanggalLahir +
                ", " +
                params.jenisKelamin +
                ", " +
                params.noTelepon +
                ", " +
                params.noHp +
                ", " +
                params.pendidikan +
                ", " +
                params.maritalStatus +
                ", " +
                params.jenisIdentitas +
                ", " +
                params.noIdentitas +
                ", " +
                params.npwp +
                ", " +
                params.noIjinUsaha +
                ", " +
                params.tglMulaiUsaha +
                ", " +
                params.modalUsaha +
                ", " +
                params.jumlahTenagaKerja +
                ", " +
                params.omsetUsaha +
                ", " +
                params.kekayaanBersih +
                ", " +
                params.kodePekerjaan +
                ", " +
                params.statusKepegawaian +
                ", " +
                params.jenisKredit +
                ", " +
                params.plafonKredit +
                ", " +
                params.plafonKreditLama +
                ", " +
                (params.plafonKredit * params.coverage) / 100 +
                ", " +
                params.typeTujuanKredit +
                ", " +
                params.sukuBunga +
                ", 'IDR', " +
                params.kodeSektor +
                ", " +
                params.coverage +
                ", " +
                params.statusKolektibilitas +
                ", " +
                params.loanType +
                ", '1', " +
                is_cac +
                ", :sumber, NULL, NULL, NULL, 0, 0, :status_penjaminan_id, " +
                params.statusAkad +
                ", " +
                params.noSertifikatLama +
                ", '" +
                no_pks +
                "', NULL, 1, " +
                params.createdBy +
                ", now(), NULL, NULL, :ket_validasi_ejamku, :validasi_ejamku, :status_sikp, 'GEN2')",
              {
                replacements: {
                  status_penjaminan_id: statuspenjaminan,
                  sumber: sumber,
                  nama_debitur: params.namaDebitur,
                  alamat_debitur: params.alamatDebitur,
                  validasi_ejamku: validasi_ejamku,
                  ket_validasi_ejamku: ket_validasi_ejamku,
                  status_sikp: status_sikp,
                },
                type: model.sequelize.QueryTypes.INSERT,
                quoteIdentifiers: true,
              }
            )
            .then({
              function(out) {
                console.log(kode_bank[0].kode_cabang_askrindo);
              },
              function(error) {
                console.log(error);
                ret = error;
              },
            });
              console.log("OK");
            }
          });

          
        });
    });
  return kode_cabang_askrindo_ret;
};

updateStatusPenjaminan = async function (
  id_penjaminan,
  no_sertifikat,
  tanggal_rekam,
  keterangan,
  status
) {
  var ret;
  if (keterangan === "" || !keterangan) {
    keterangan = null;
  }
  if (no_sertifikat === "" || !no_sertifikat) {
    no_sertifikat = null;
  }
  if (tanggal_rekam === "" || !tanggal_rekam) {
    tanggal_rekam = null;
  }
  kode_bank = await model.sequelize
    .query(
      "UPDATE t_penjaminan SET status_penjaminan_id = :status, keterangan = :keterangan, no_sertifikat = :no_sertifikat, tgl_sertifikat = :tgl_rekam, tgl_rekam_sertifikat = :tgl_rekam WHERE id_penjaminan = :id_penjaminan and status_penjaminan_id != 4",
      {
        replacements: {
          id_penjaminan: id_penjaminan,
          keterangan: keterangan,
          status: status,
          no_sertifikat: no_sertifikat,
          tgl_rekam: tanggal_rekam,
        },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = "OK";
    });
  return ret;
};

updateStatusPenjaminanCovFlag = async function (
  id_penjaminan,
  no_sertifikat,
  tanggal_rekam,
  keterangan,
  status
) {
  var ret;
  if (keterangan === "" || !keterangan) {
    keterangan = null;
  }
  if (no_sertifikat === "" || !no_sertifikat) {
    no_sertifikat = null;
  }
  if (tanggal_rekam === "" || !tanggal_rekam) {
    tanggal_rekam = null;
  }
  kode_bank = await model.sequelize
    .query(
      "UPDATE t_penjaminan SET status_penjaminan_id = :status, keterangan = :keterangan, no_sertifikat = :no_sertifikat, tgl_sertifikat = :tgl_rekam WHERE id_penjaminan = :id_penjaminan and status_penjaminan_id != 4",
      {
        replacements: {
          id_penjaminan: id_penjaminan,
          keterangan: keterangan,
          status: status,
          no_sertifikat: no_sertifikat,
          tgl_rekam: tanggal_rekam,
        },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = "OK";
    });
  return ret;
};

updateTotalIjp = async function (total_ijp, jangka_waktu_hari, id_penjaminan) {
  var ret;

  kode_bank = await model.sequelize
    .query(
      "UPDATE t_penjaminan SET jangka_waktu_hari = :jangka_waktu_hari, total_ijp = :total_ijp WHERE id_penjaminan = :id_penjaminan",
      {
        replacements: {
          total_ijp: total_ijp,
          jangka_waktu_hari: jangka_waktu_hari,
          id_penjaminan: id_penjaminan,
        },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = "OK";
    });
  return ret;
};

updateTotalIjpPatch = async function (
  total_ijp,
  jangka_waktu_hari,
  id_penjaminan
) {
  var ret;

  kode_bank = await model.sequelize
    .query(
      "UPDATE t_penjaminan_back27082020 SET jangka_waktu_hari = :jangka_waktu_hari, total_ijp = :total_ijp WHERE id_penjaminan = :id_penjaminan",
      {
        replacements: {
          total_ijp: total_ijp,
          jangka_waktu_hari: jangka_waktu_hari,
          id_penjaminan: id_penjaminan,
        },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = "OK";
    });
  return ret;
};

getPolis = async function (params) {
  var ret;
  kode_bank = await model.sequelize
    .query(
      "select * from m_mapping_bank where kode_bank = " +
        "'" +
        params.kodeBank +
        "'" +
        "and kode_cabang_bank =" +
        "'" +
        params.kodeUker +
        "'",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(async function (kode_bank) {
      m_cabang = await model.sequelize
        .query(
          "select * from m_cabang where kode_cabang = " +
            "'" +
            kode_bank[0].kode_cabang_askrindo +
            "' and group_id = 2",
          {
            // replacements: {id: carIds},
            type: model.sequelize.QueryTypes.SELECT,
            quoteIdentifiers: true,
          }
        )
        .then(async function (m_cabang) {
          console.log(m_cabang);
          counter = await model.sequelize
            .query(
              "select counter from t_gen_number where toc = '1401' and kode_cabang = " +
                "'" +
                m_cabang[0].kode_cabang_acs +
                "' and tahun = " +
                "'" +
                dateFormat(new Date(), "yyyy") +
                "'",
              {
                // replacements: {id: carIds},
                type: model.sequelize.QueryTypes.SELECT,
                quoteIdentifiers: true,
              }
            )
            .then(async function (counter) {
              var counter_temp;
              if (counter.length > 0) {
                counter_temp = counter[0].counter;
                counter = await model.sequelize
                  .query(
                    "UPDATE t_gen_number SET counter = " +
                      (+counter_temp + 1) +
                      " WHERE toc='1401' and kode_cabang='" +
                      m_cabang[0].kode_cabang_acs +
                      "' and tahun='" +
                      dateFormat(new Date(), "yyyy") +
                      "'",
                    {
                      // replacements: {id: carIds},
                      type: model.sequelize.QueryTypes.SELECT,
                      quoteIdentifiers: true,
                    }
                  )
                  .then(function (params) {
                    var toc = "1401";
                    var kode_cabang_askrindo = m_cabang[0].kode_cabang_acs; //parameter
                    var tahun = dateFormat(new Date(), "yy");
                    var counter_fix = padWithZeroes(+counter_temp + 1, 8); //parameter dalam kurung
                    // var cek_digit = (toc*9 + kode_cabang_askrindo*4 + tahun + counter_fix*3)%9
                    ret =
                      "0" +
                      kode_cabang_askrindo +
                      "." +
                      toc +
                      "." +
                      tahun +
                      "9" +
                      counter_fix +
                      "/000";
                  });
              } else {
                counter_temp = 0;
                counter = await model.sequelize
                  .query(
                    "INSERT INTO t_gen_number(toc, kode_cabang, tahun, counter)VALUES('1401', '" +
                      m_cabang[0].kode_cabang_acs +
                      "', '" +
                      dateFormat(new Date(), "yyyy") +
                      "', 1)",
                    {
                      // replacements: {id: carIds},
                      type: model.sequelize.QueryTypes.SELECT,
                      quoteIdentifiers: true,
                    }
                  )
                  .then(function (params) {
                    var toc = "1401";
                    var kode_cabang_askrindo = m_cabang[0].kode_cabang_acs; //parameter
                    var tahun = dateFormat(new Date(), "yy");
                    var counter_fix = padWithZeroes(+counter_temp + 1, 8); //parameter dalam kurung
                    // var cek_digit = (toc*9 + kode_cabang_askrindo*4 + tahun + counter_fix*3)%9
                    ret =
                      "0" +
                      kode_cabang_askrindo +
                      "." +
                      toc +
                      "." +
                      tahun +
                      "9" +
                      counter_fix +
                      "/000";
                  });
              }
            });
        });
    });

  return ret;
};

getPolisCovBatch = async function (params) {
  var ret;
  kode_bank = await model.sequelize
    .query(
      "select * from m_mapping_bank where kode_bank = " +
        "'" +
        params.kode_bank +
        "'" +
        "and kode_cabang_bank =" +
        "'" +
        params.kode_cabang_bank +
        "'",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(async function (kode_bank) {
      m_cabang = await model.sequelize
        .query(
          "select * from m_cabang where kode_cabang = " +
            "'" +
            kode_bank[0].kode_cabang_askrindo +
            "' and group_id = 2",
          {
            // replacements: {id: carIds},
            type: model.sequelize.QueryTypes.SELECT,
            quoteIdentifiers: true,
          }
        )
        .then(async function (m_cabang) {
          console.log(m_cabang);
          counter = await model.sequelize
            .query(
              "select counter from t_gen_number where toc = '1401' and kode_cabang = " +
                "'" +
                m_cabang[0].kode_cabang_acs +
                "' and tahun = " +
                "'" +
                dateFormat(new Date(), "yyyy") +
                "'",
              {
                // replacements: {id: carIds},
                type: model.sequelize.QueryTypes.SELECT,
                quoteIdentifiers: true,
              }
            )
            .then(async function (counter) {
              var counter_temp;
              if (counter.length > 0) {
                counter_temp = counter[0].counter;
                counter = await model.sequelize
                  .query(
                    "UPDATE t_gen_number SET counter = " +
                      (+counter_temp + 1) +
                      " WHERE toc='1401' and kode_cabang='" +
                      m_cabang[0].kode_cabang_acs +
                      "' and tahun='" +
                      dateFormat(new Date(), "yyyy") +
                      "'",
                    {
                      // replacements: {id: carIds},
                      type: model.sequelize.QueryTypes.SELECT,
                      quoteIdentifiers: true,
                    }
                  )
                  .then(function (params) {
                    var toc = "1401";
                    var kode_cabang_askrindo = m_cabang[0].kode_cabang_acs; //parameter
                    var tahun = dateFormat(new Date(), "yy");
                    var counter_fix = padWithZeroes(+counter_temp + 1, 8); //parameter dalam kurung
                    // var cek_digit = (toc*9 + kode_cabang_askrindo*4 + tahun + counter_fix*3)%9
                    ret =
                      "0" +
                      kode_cabang_askrindo +
                      "." +
                      toc +
                      "." +
                      tahun +
                      "9" +
                      counter_fix +
                      "/000";
                  });
              } else {
                counter_temp = 0;
                counter = await model.sequelize
                  .query(
                    "INSERT INTO t_gen_number(toc, kode_cabang, tahun, counter)VALUES('1401', '" +
                      m_cabang[0].kode_cabang_acs +
                      "', '" +
                      dateFormat(new Date(), "yyyy") +
                      "', 1)",
                    {
                      // replacements: {id: carIds},
                      type: model.sequelize.QueryTypes.SELECT,
                      quoteIdentifiers: true,
                    }
                  )
                  .then(function (params) {
                    var toc = "1401";
                    var kode_cabang_askrindo = m_cabang[0].kode_cabang_acs; //parameter
                    var tahun = dateFormat(new Date(), "yy");
                    var counter_fix = padWithZeroes(+counter_temp + 1, 8); //parameter dalam kurung
                    // var cek_digit = (toc*9 + kode_cabang_askrindo*4 + tahun + counter_fix*3)%9
                    ret =
                      "0" +
                      kode_cabang_askrindo +
                      "." +
                      toc +
                      "." +
                      tahun +
                      "9" +
                      counter_fix +
                      "/000";
                  });
              }
            });
        });
    });

  return ret;
};

getKodeCabangACS = async function (params) {
  var ret;
  m_cabang = await model.sequelize
    .query(
      "select * from m_cabang where kode_cabang = " +
        "'" +
        params +
        "' and group_id = 2",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (m_cabang) {
      ret = m_cabang[0].kode_cabang_acs;
    });
  return ret;
};

updateSertifikat = async function (id_penjaminan, no_sertifikat) {
  var ret;

  sertifikat = await model.sequelize
    .query(
      "UPDATE t_penjaminan SET no_sertifikat = :no_sertifikat, tgl_sertifikat = now(), tgl_rekam_sertifikat = now(), status_penjaminan_id = 3, keterangan = 'Terbit' WHERE id_penjaminan = :id_penjaminan",
      {
        replacements: {
          no_sertifikat: no_sertifikat,
          id_penjaminan: id_penjaminan,
        },
        type: model.sequelize.QueryTypes.UPDATE,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = "OK";
    });
  return ret;
};

getPenjaminanByTanggalIJP = async function (tgl_awal, tgl_akhir, status_sikp) {
  var ret;
  kode_bank = await model.sequelize
    .query(
      "select * from t_penjaminan a, t_penjaminan_ijp b where a.id_penjaminan = b.id_penjaminan and b.tgl_premi >= :tgl_awal_premi and b.tgl_premi <= :tgl_akhir_premi and a.status_penjaminan_id = 3 and a.status_sikp = :status_sikp and a.is_cancel = false",
      {
        replacements: {
          tgl_awal_premi: tgl_awal,
          tgl_akhir_premi: tgl_akhir,
          status_sikp: status_sikp,
        },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = params;
    });
  return ret;
};

getPenjaminanJPASByTanggalIJP = async function (
  tgl_awal,
  tgl_akhir,
  status_sikp
) {
  var ret;
  kode_bank = await model.sequelize
    .query(
      "select * from t_penjaminan_jpas a, t_penjaminan_ijp_jpas b where a.id_penjaminan = b.id_penjaminan and b.tgl_premi >= :tgl_awal_premi and b.tgl_premi <= :tgl_akhir_premi and a.status_penjaminan_id = 3 and a.status_sikp = :status_sikp and a.is_cancel = false",
      {
        replacements: {
          tgl_awal_premi: tgl_awal,
          tgl_akhir_premi: tgl_akhir,
          status_sikp: status_sikp,
        },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = params;
    });
  return ret;
};

getPenjaminanJPASBatch = async function (data_batch) {
  var ret;
  kode_bank = await model.sequelize
    .query(
      "select * from t_penjaminan_jpas a, t_penjaminan_ijp_jpas b where a.id_penjaminan = b.id_penjaminan and a.status_penjaminan_id = 3 and a.id_penjaminan in (" +
        data_batch +
        ") and a.is_cancel = false",
      {
        replacements: { data_batch: data_batch },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = params;
    });
  return ret;
};

getPenjaminanBatch = async function (data_batch) {
  var ret;
  kode_bank = await model.sequelize
    .query(
      "select * from t_penjaminan a, t_penjaminan_ijp b where a.id_penjaminan = b.id_penjaminan and a.status_penjaminan_id = 3 and a.id_penjaminan in (" +
        data_batch +
        ") and a.is_cancel = false and a.jenis_pembatalan is null",
      {
        replacements: { data_batch: data_batch },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = params;
    });
  return ret;
};

getPenjaminanByNoAplikasi = async function (no_aplikasi, jenis_pengajuan) {
  if (jenis_pengajuan == "CAC") {
    var ret;
    kode_bank = await model.sequelize
      .query(
        "select * from t_penjaminan a, t_penjaminan_ijp b where a.id_penjaminan = b.id_penjaminan and a.transaction_id_bank = '" +
          no_aplikasi +
          "' and a.status_penjaminan_id = 3 and cast(b.tgl_premi as varchar) like :tahun and a.is_cancel = false",
        {
          replacements: { tahun: dateFormat(new Date(), "yyyy") + "%" },
          type: model.sequelize.QueryTypes.SELECT,
          quoteIdentifiers: true,
        }
      )
      .then(function (params) {
        ret = params;
      });
    return ret;
  } else {
    var ret;
    kode_bank = await model.sequelize
      .query(
        "select * from t_penjaminan a where a.transaction_id_bank = '" +
          no_aplikasi +
          "' and a.status_penjaminan_id = 1 and a.is_cancel = false",
        {
          replacements: {},
          type: model.sequelize.QueryTypes.SELECT,
          quoteIdentifiers: true,
        }
      )
      .then(function (params) {
        ret = params;
      });
    return ret;
  }
};

// getPenjaminanScheduler = async function () {
//     var ret
//     kode_bank = await model.sequelize.query("select * from t_penjaminan a, t_penjaminan_ijp b where a.id_penjaminan = b.id_penjaminan and a.status_penjaminan_id = 3 and cast(b.tgl_premi as varchar) like :tahun and a.is_cancel = false", {
//         replacements: {no_aplikasi: no_aplikasi, tahun: dateFormat(new Date(), "yyyy" )+'-'+dateFormat(new Date(), "mm" )+'%'},
//         type: model.sequelize.QueryTypes.SELECT,
//         quoteIdentifiers: true}).then(function (params) {
//             ret = params
//         })
//     return ret
// }

updateStatusSIKPPenjaminan = async function (
  id_penjaminan,
  status_sikp,
  id_debitur
) {
  var ret;
  if (status_sikp == 1) {
    update_status = await model.sequelize
      .query(
        "update t_penjaminan set status_sikp = :status_sikp where no_id_debitur = :id_debitur",
        {
          replacements: {
            id_penjaminan: id_penjaminan,
            status_sikp: status_sikp,
            id_debitur: id_debitur,
          },
          type: model.sequelize.QueryTypes.UPDATE,
          quoteIdentifiers: true,
        }
      )
      .then(function (update_status) {
        ret = "OK";
      });
  } else {
    update_status = await model.sequelize
      .query(
        "update t_penjaminan set status_sikp = :status_sikp where id_penjaminan = :id_penjaminan",
        {
          replacements: {
            id_penjaminan: id_penjaminan,
            status_sikp: status_sikp,
            id_debitur: id_debitur,
          },
          type: model.sequelize.QueryTypes.UPDATE,
          quoteIdentifiers: true,
        }
      )
      .then(function (update_status) {
        ret = "OK";
      });
  }

  return ret;
};

updateStatusSIKPPenjaminanJPAS = async function (
  id_penjaminan,
  status_sikp,
  id_debitur
) {
  var ret;
  if (status_sikp == 1) {
    update_status = await model.sequelize
      .query(
        "update t_penjaminan_jpas set status_sikp = :status_sikp where no_id_debitur = :id_debitur",
        {
          replacements: {
            id_penjaminan: id_penjaminan,
            status_sikp: status_sikp,
            id_debitur: id_debitur,
          },
          type: model.sequelize.QueryTypes.UPDATE,
          quoteIdentifiers: true,
        }
      )
      .then(function (update_status) {
        ret = "OK";
      });
  } else {
    update_status = await model.sequelize
      .query(
        "update t_penjaminan_jpas set status_sikp = :status_sikp where id_penjaminan = :id_penjaminan",
        {
          replacements: {
            id_penjaminan: id_penjaminan,
            status_sikp: status_sikp,
            id_debitur: id_debitur,
          },
          type: model.sequelize.QueryTypes.UPDATE,
          quoteIdentifiers: true,
        }
      )
      .then(function (update_status) {
        ret = "OK";
      });
  }

  return ret;
};

updateStatusSIKPIJP = async function (
  penjaminan_ijp_id,
  status_sikp,
  no_tagihan
) {
  var ret;
  update_status = await model.sequelize
    .query(
      "update t_penjaminan_ijp set status_sikp = :status_sikp, tgl_penagihan = now(), bulan_penagihan = :bulan_penagihan, tahun_penagihan = :tahun_penagihan where penjaminan_ijp_id = :penjaminan_ijp_id",
      {
        replacements: {
          penjaminan_ijp_id: penjaminan_ijp_id,
          status_sikp: status_sikp,
          bulan_penagihan: no_tagihan.substring(5, 7),
          tahun_penagihan: no_tagihan.substring(0, 4),
        },
        type: model.sequelize.QueryTypes.UPDATE,
        quoteIdentifiers: true,
      }
    )
    .then(function (update_status) {
      ret = "OK";
    });
  return ret;
};

updateStatusSIKPIJPJPAS = async function (
  penjaminan_ijp_id,
  status_sikp,
  no_tagihan
) {
  var ret;
  update_status = await model.sequelize
    .query(
      "update t_penjaminan_ijp_jpas set status_sikp = :status_sikp, tgl_penagihan = now(), bulan_penagihan = :bulan_penagihan, tahun_penagihan = :tahun_penagihan where penjaminan_ijp_id = :penjaminan_ijp_id",
      {
        replacements: {
          penjaminan_ijp_id: penjaminan_ijp_id,
          status_sikp: status_sikp,
          bulan_penagihan: no_tagihan.substring(5, 7),
          tahun_penagihan: no_tagihan.substring(0, 4),
        },
        type: model.sequelize.QueryTypes.UPDATE,
        quoteIdentifiers: true,
      }
    )
    .then(function (update_status) {
      ret = "OK";
    });
  return ret;
};

getAgunan = async function (id_penjaminan) {
  var ret;
  kode_bank = await model.sequelize
    .query(
      "select a.*, b.label from t_penjaminan_agunan a, m_lookup b where b.group_code = 'Jenis Agunan' and b.lookup_id = cast(a.jenis_agunan as int) and a.id_penjaminan = :id_penjaminan",
      {
        replacements: { id_penjaminan: id_penjaminan },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = params;
    });
  // .catch(function () {
  //     catched = [{label: null}]
  //     ret = catched;
  // })
  return ret;
};

insertLogSIKP = async function (
  id_penjaminan,
  no_rekening,
  no_aplikasi,
  tgl_premi,
  no_sertifikat,
  id_debitur,
  status,
  keterangan
) {
  var ret;
  if (!tgl_premi && !no_sertifikat) {
    tgl_premi = new Date();
    no_sertifikat = "CBC id_penjaminan " + id_penjaminan;
  }
  check = await model.sequelize
    .query(
      "select * from log_sikp where id_penjaminan = :id_penjaminan and is_active = true",
      {
        replacements: { id_penjaminan: id_penjaminan },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(async function (check) {
      if (check.length === 0) {
        insert_log = await model.sequelize
          .query(
            "INSERT INTO log_sikp(no_rekening, no_aplikasi, no_sertifikat, id_penjaminan, id_debitur, tgl_premi, status, keterangan, is_active)VALUES(:no_rekening, :no_aplikasi, :no_sertifikat, :id_penjaminan, :id_debitur, :tgl_premi, :status, :keterangan, true);",
            {
              replacements: {
                id_penjaminan: id_penjaminan,
                no_aplikasi: no_aplikasi,
                no_rekening: no_rekening,
                no_sertifikat: no_sertifikat,
                id_debitur: id_debitur,
                status: status,
                keterangan: keterangan,
                tgl_premi: tgl_premi,
              },
              type: model.sequelize.QueryTypes.INSERT,
              quoteIdentifiers: true,
            }
          )
          .then(function (insert_log) {
            ret = "OK";
          });
      } else {
        update_log = await model.sequelize
          .query(
            "update log_sikp set is_active = false where id_penjaminan = :id_penjaminan",
            {
              replacements: {
                id_penjaminan: id_penjaminan,
                no_aplikasi: no_aplikasi,
                no_rekening: no_rekening,
                no_sertifikat: no_sertifikat,
                id_debitur: id_debitur,
                status: status,
                keterangan: keterangan,
                tgl_premi: tgl_premi,
              },
              type: model.sequelize.QueryTypes.UPDATE,
              quoteIdentifiers: true,
            }
          )
          .then(async function (update_log) {
            insert_log = await model.sequelize
              .query(
                "INSERT INTO log_sikp(no_rekening, no_aplikasi, no_sertifikat, id_penjaminan, id_debitur, tgl_premi, status, keterangan, is_active)VALUES(:no_rekening, :no_aplikasi, :no_sertifikat, :id_penjaminan, :id_debitur, :tgl_premi, :status, :keterangan, true);",
                {
                  replacements: {
                    id_penjaminan: id_penjaminan,
                    no_aplikasi: no_aplikasi,
                    no_rekening: no_rekening,
                    no_sertifikat: no_sertifikat,
                    id_debitur: id_debitur,
                    status: status,
                    keterangan: keterangan,
                    tgl_premi: tgl_premi,
                  },
                  type: model.sequelize.QueryTypes.INSERT,
                  quoteIdentifiers: true,
                }
              )
              .then(function (insert_log) {
                ret = "OK";
              });
          });
      }
    });

  return ret;
};

insertLogSIKPJPAS = async function (
  id_penjaminan,
  no_rekening,
  tgl_premi,
  no_sertifikat,
  id_debitur,
  status,
  keterangan
) {
  var ret;
  check = await model.sequelize
    .query(
      "select * from log_sikp_jpas where id_penjaminan = :id_penjaminan and is_active = true",
      {
        replacements: { id_penjaminan: id_penjaminan },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(async function (check) {
      if (check.length === 0) {
        insert_log = await model.sequelize
          .query(
            "INSERT INTO log_sikp_jpas(no_rekening, no_sertifikat, id_penjaminan, id_debitur, tgl_premi, status, keterangan, is_active)VALUES(:no_rekening, :no_sertifikat, :id_penjaminan, :id_debitur, :tgl_premi, :status, :keterangan, true);",
            {
              replacements: {
                id_penjaminan: id_penjaminan,
                no_rekening: no_rekening,
                no_sertifikat: no_sertifikat,
                id_debitur: id_debitur,
                status: status,
                keterangan: keterangan,
                tgl_premi: tgl_premi,
              },
              type: model.sequelize.QueryTypes.INSERT,
              quoteIdentifiers: true,
            }
          )
          .then(function (insert_log) {
            ret = "OK";
          });
      } else {
        update_log = await model.sequelize
          .query(
            "update log_sikp_jpas set is_active = false where id_penjaminan = :id_penjaminan",
            {
              replacements: {
                id_penjaminan: id_penjaminan,
                no_rekening: no_rekening,
                no_sertifikat: no_sertifikat,
                id_debitur: id_debitur,
                status: status,
                keterangan: keterangan,
                tgl_premi: tgl_premi,
              },
              type: model.sequelize.QueryTypes.UPDATE,
              quoteIdentifiers: true,
            }
          )
          .then(async function (update_log) {
            insert_log = await model.sequelize
              .query(
                "INSERT INTO log_sikp_jpas(no_rekening, no_sertifikat, id_penjaminan, id_debitur, tgl_premi, status, keterangan, is_active)VALUES(:no_rekening, :no_sertifikat, :id_penjaminan, :id_debitur, :tgl_premi, :status, :keterangan, true);",
                {
                  replacements: {
                    id_penjaminan: id_penjaminan,
                    no_rekening: no_rekening,
                    no_sertifikat: no_sertifikat,
                    id_debitur: id_debitur,
                    status: status,
                    keterangan: keterangan,
                    tgl_premi: tgl_premi,
                  },
                  type: model.sequelize.QueryTypes.INSERT,
                  quoteIdentifiers: true,
                }
              )
              .then(function (insert_log) {
                ret = "OK";
              });
          });
      }
    });

  return ret;
};

getOutstanding = async function (id_penjaminan) {
  var ret;
  kode_bank = await model.sequelize
    .query(
      "select * from t_outstanding_teoritis where id_penjaminan = :id_penjaminan",
      {
        replacements: { id_penjaminan: id_penjaminan },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = params;
    });
  return ret;
};

getKodeKotaSIKP = async function (kode_pos) {
  var ret;
  kode_kabkota = await model.sequelize
    .query(
      "SELECT * FROM m_mapping_kodepos_wilayah WHERE kode_pos = :kodePos",
      {
        replacements: { kodePos: kode_pos },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (params) {
      ret = params;
    });
  return ret;
};

updateStatusCetak = async function (no_polis, status_cetak = 1) {
  var ret;
  update_status = await model.sequelize
    .query(
      "update t_penjaminan set status_cetak = :status_cetak where no_sertifikat = :no_polis",
      {
        replacements: { no_polis: no_polis, status_cetak: status_cetak },
        type: model.sequelize.QueryTypes.UPDATE,
        quoteIdentifiers: true,
      }
    )
    .then(function (update_status) {
      ret = "OK";
    });
  return ret;
};

postSIKPPerEntry = async function (
  no_aplikasi,
  status_sikp,
  jenis_pengajuan = "CAC"
) {
  var agent;
  agentOptions = {
    host: "202.61.126.162",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };
  agent = new https.Agent(agentOptions);
  return new Promise((resolve) => {
    request(
      {
        url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
        // agent: agent,
        json: {
          username: "askrindo",
          password: "bzMjN9Wc8DeATBKh",
          // "password" :"development"
        },
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      },
      function (error, response, body) {
        if (error) {
          console.log(error);
        } else {
          console.log(body);
          if (body.data && body.data != "") {
            getPenjaminanByNoAplikasi(no_aplikasi, jenis_pengajuan).then(
              function (params) {
                if (params) {
                  var sukses = 0;

                  var gagal = 0;
                  params.forEach((val, i) => {
                    setTimeout(function () {
                      if (status_sikp == 0) {
                        var substring_ktp;
                        var pendidikan;
                        getKodeKotaSIKP(val.kode_pos).then(
                          function (kode_sikp_get) {
                            if (kode_sikp_get.length == 0) {
                              substring_ktp = val.no_id_debitur.substring(0, 4);
                            } else {
                              substring_ktp = kode_sikp_get[0].kode_kota_sikp;
                            }
                            request(
                              {
                                url:
                                  "http://10.238.136.117/pen-umkm-dev/api/v1/Referensi/KabKota/" +
                                  substring_ktp,
                                // agent: agent,
                                method: "GET",
                                json: {},
                                headers: {
                                  "Content-Type": "application/json",
                                  Authorization: "Bearer " + body.data,
                                },
                              },
                              function (error2, response2, body2) {
                                if (error2) {
                                  console.log(error2);
                                } else {
                                  if (response2.statusCode != 200) {
                                    request(
                                      {
                                        url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                        // agent: agent,
                                        json: {
                                          username: "askrindo",
                                          password: "bzMjN9Wc8DeATBKh",
                                          // "password" :"development"
                                        },
                                        method: "POST",
                                        headers: {
                                          "Content-Type": "application/json",
                                        },
                                      },
                                      function (
                                        errorfix,
                                        responsefix,
                                        bodyfix
                                      ) {
                                        if (errorfix) {
                                          console.log(errorfix);
                                        } else {
                                          body.data = bodyfix.data;
                                          console.log("REFRESH TOKEN");
                                        }
                                      }
                                    );
                                  } else if (body2.code === "51") {
                                    console.log(body2);
                                    getAgunan(val.id_penjaminan).then(function (
                                      agunan
                                    ) {
                                      var uraian_agunan = "";
                                      if (agunan.length === 0) {
                                        uraian_agunan = null;
                                      } else {
                                        uraian_agunan = agunan[0].label;
                                      }
                                      if (val.npwp) {
                                        val.npwp = val.npwp.replace(
                                          /[^0-9a-z]/gi,
                                          ""
                                        );
                                      } else {
                                        val.npwp = null;
                                      }
                                      console.log({
                                        nik: val.no_id_debitur,
                                        nama: val.nama_debitur,
                                        tgl_lahir: new Date(val.tgl_lahir),
                                        jns_kelamin: val.jenis_kelamin,
                                        maritas_sts: val.marital_status,
                                        pendidikan: val.pendidikan,
                                        pekerjaan: val.jenis_pekerjaan,
                                        jns_debitur: "R",
                                        alamat: val.alamat_debitur,
                                        kode_kabkota: body2.data.kode,
                                        kode_pos: val.kode_pos,
                                        npwp: val.npwp.replace(
                                          /[^0-9a-z]/gi,
                                          ""
                                        ),
                                        mulai_usaha: new Date(
                                          val.tgl_mulai_usaha
                                        ),
                                        alamat_usaha: val.alamat_debitur,
                                        ijin_usaha: val.no_ijin_usaha,
                                        modal_usaha: val.modal_usaha,
                                        jml_pekerja: 1,
                                        jml_kredit: val.plafond_kredit,
                                        no_hp: val.no_hp_debitur,
                                        uraian_agunan: uraian_agunan,
                                      });
                                      var tgl_lahir;
                                      if (val.jenis_kelamin == "9") {
                                        tgl_lahir = null;
                                      } else {
                                        tgl_lahir = new Date(val.tgl_lahir);
                                      }
                                      request(
                                        {
                                          url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon",
                                          // agent: agent,
                                          json: {
                                            nik: val.no_id_debitur,
                                            nama: val.nama_debitur,
                                            tgl_lahir: tgl_lahir,
                                            jns_kelamin: val.jenis_kelamin,
                                            maritas_sts: val.marital_status,
                                            pendidikan: val.pendidikan,
                                            pekerjaan: val.jenis_pekerjaan,
                                            jns_debitur: "R",
                                            alamat: val.alamat_debitur,
                                            kode_kabkota: body2.data.kode,
                                            kode_pos: val.kode_pos,
                                            npwp: val.npwp.replace(
                                              /[^0-9a-z]/gi,
                                              ""
                                            ),
                                            mulai_usaha: new Date(
                                              val.tgl_mulai_usaha
                                            ),
                                            alamat_usaha: val.alamat_debitur,
                                            ijin_usaha: val.no_ijin_usaha,
                                            modal_usaha: val.modal_usaha,
                                            jml_pekerja: 1,
                                            jml_kredit: val.plafond_kredit,
                                            no_hp: val.no_hp_debitur,
                                            uraian_agunan: uraian_agunan,
                                          },
                                          method: "POST",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (error3, response3, body3) {
                                          if (error3) {
                                            console.log(error3);
                                          } else {
                                            console.log(body3);
                                            if (response3.statusCode != 200) {
                                              request(
                                                {
                                                  url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                                  // agent: agent,
                                                  json: {
                                                    username: "askrindo",
                                                    password:
                                                      "bzMjN9Wc8DeATBKh",
                                                    // "password" :"development"
                                                  },
                                                  method: "POST",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                  },
                                                },
                                                function (
                                                  errorfix,
                                                  responsefix,
                                                  bodyfix
                                                ) {
                                                  if (errorfix) {
                                                    console.log(errorfix);
                                                  } else {
                                                    body.data = bodyfix.data;
                                                    console.log(
                                                      "REFRESH TOKEN"
                                                    );
                                                    request(
                                                      {
                                                        url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon",
                                                        // agent: agent,
                                                        json: {
                                                          nik: val.no_id_debitur,
                                                          nama: val.nama_debitur,
                                                          tgl_lahir: tgl_lahir,
                                                          jns_kelamin:
                                                            val.jenis_kelamin,
                                                          maritas_sts:
                                                            val.marital_status,
                                                          pendidikan:
                                                            val.pendidikan,
                                                          pekerjaan:
                                                            val.jenis_pekerjaan,
                                                          jns_debitur: "R",
                                                          alamat:
                                                            val.alamat_debitur,
                                                          kode_kabkota:
                                                            body2.data.kode,
                                                          kode_pos:
                                                            val.kode_pos,
                                                          npwp: val.npwp.replace(
                                                            /[^0-9a-z]/gi,
                                                            ""
                                                          ),
                                                          mulai_usaha: new Date(
                                                            val.tgl_mulai_usaha
                                                          ),
                                                          alamat_usaha:
                                                            val.alamat_debitur,
                                                          ijin_usaha:
                                                            val.no_ijin_usaha,
                                                          modal_usaha:
                                                            val.modal_usaha,
                                                          jml_pekerja: 1,
                                                          jml_kredit:
                                                            val.plafond_kredit,
                                                          no_hp:
                                                            val.no_hp_debitur,
                                                          uraian_agunan:
                                                            uraian_agunan,
                                                        },
                                                        method: "POST",
                                                        headers: {
                                                          "Content-Type":
                                                            "application/json",
                                                          Authorization:
                                                            "Bearer " +
                                                            body.data,
                                                        },
                                                      },
                                                      function (
                                                        error3re,
                                                        response3re,
                                                        body3re
                                                      ) {
                                                        if (error3) {
                                                          console.log(error3re);
                                                        } else {
                                                          console.log(body3re);

                                                          if (
                                                            body3re.code ===
                                                            "00"
                                                          ) {
                                                            if (
                                                              i ==
                                                              params.length - 1
                                                            ) {
                                                              sukses++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              updateStatusSIKPPenjaminan(
                                                                val.id_penjaminan,
                                                                1,
                                                                val.no_id_debitur
                                                              ).then(function (
                                                                params
                                                              ) {
                                                                resolve(
                                                                  "POST SIKP CALON SUKSES!"
                                                                );
                                                              });
                                                            } else {
                                                              sukses++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              updateStatusSIKPPenjaminan(
                                                                val.id_penjaminan,
                                                                1,
                                                                val.no_id_debitur
                                                              ).then(function (
                                                                params
                                                              ) {
                                                                resolve(
                                                                  "POST SIKP CALON SUKSES!"
                                                                );
                                                              });
                                                            }
                                                          } else {
                                                            if (
                                                              i ==
                                                              params.length - 1
                                                            ) {
                                                              gagal++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              //insert calon gagal
                                                              insertLogSIKP(
                                                                val.id_penjaminan,
                                                                val.no_rekening_pinjaman,
                                                                val.transaction_id_bank,
                                                                val.tgl_premi,
                                                                val.no_sertifikat,
                                                                val.no_id_debitur,
                                                                0,
                                                                body3re.message
                                                              ).then(function (
                                                                params
                                                              ) {
                                                                resolve(
                                                                  "POST SIKP CALON GAGAL!"
                                                                );
                                                              });
                                                            } else {
                                                              gagal++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              //insert calon gagal
                                                              insertLogSIKP(
                                                                val.id_penjaminan,
                                                                val.no_rekening_pinjaman,
                                                                val.transaction_id_bank,
                                                                val.tgl_premi,
                                                                val.no_sertifikat,
                                                                val.no_id_debitur,
                                                                0,
                                                                body3re.message
                                                              ).then(function (
                                                                params
                                                              ) {
                                                                resolve(
                                                                  "POST SIKP CALON GAGAL!"
                                                                );
                                                              });
                                                            }
                                                          }
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            } else if (body3.code === "00") {
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPPenjaminan(
                                                  val.id_penjaminan,
                                                  1,
                                                  val.no_id_debitur
                                                ).then(function (params) {
                                                  resolve(
                                                    "POST SIKP CALON SUKSES!"
                                                  );
                                                });
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPPenjaminan(
                                                  val.id_penjaminan,
                                                  1,
                                                  val.no_id_debitur
                                                ).then(function (params) {
                                                  resolve(
                                                    "POST SIKP CALON SUKSES!"
                                                  );
                                                });
                                              }
                                            } else {
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  0,
                                                  body3.message
                                                ).then(function (params) {
                                                  resolve(
                                                    "POST SIKP CALON GAGAL!"
                                                  );
                                                });
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  0,
                                                  body3.message
                                                ).then(function (params) {
                                                  resolve(
                                                    "POST SIKP CALON GAGAL!"
                                                  );
                                                });
                                              }
                                            }
                                          }
                                        }
                                      );
                                    });
                                  } else {
                                    gagal++;
                                    console.log(
                                      "Calon sukses = " +
                                        sukses +
                                        " & gagal = " +
                                        gagal
                                    );
                                    insertLogSIKP(
                                      val.id_penjaminan,
                                      val.no_rekening_pinjaman,
                                      val.transaction_id_bank,
                                      val.tgl_premi,
                                      val.no_sertifikat,
                                      val.no_id_debitur,
                                      0,
                                      body2.message + " (Get No Kota/Kab)"
                                    ).then(function () {
                                      resolve("POST SIKP CALON GAGAL!");
                                    });
                                  }
                                }
                              }
                            );
                          }
                        );
                      } else if (status_sikp == 1) {
                        if (val.no_rek_lama) {
                          val.no_rek_lama = val.no_rek_lama.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          );
                        }
                        console.log({
                          rekening_baru: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          nik: val.no_id_debitur,
                          rekening_lama: val.no_rek_lama,
                          status_akad: "B",
                          status_rekening: 1,
                          nomor_akad: val.no_perjanjian_kredit,
                          tgl_akad: new Date(val.tgl_pk),
                          tgl_penarikan: new Date(val.tgl_awal_pertanggungan),
                          tgl_jatuh_tempo: new Date(
                            val.tgl_akhir_pertanggungan
                          ),
                          nilai_akad: val.plafond_kredit,
                          tgl_penjaminan: val.tgl_sertifikat,
                          nomor_penjaminan: val.no_sertifikat,
                          nilai_dijamin: val.nilai_pertanggungan,
                          sektor: val.sektor_ekonomi,
                        });
                        request(
                          {
                            url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad",
                            // agent: agent,
                            json: {
                              rekening_baru: val.no_rekening_pinjaman.replace(
                                /[^0-9a-z_]/gi,
                                ""
                              ),
                              kode_bank: val.kode_bank,
                              nik: val.no_id_debitur,
                              rekening_lama: val.no_rek_lama,
                              status_akad: "B",
                              status_rekening: 1,
                              nomor_akad: val.no_perjanjian_kredit,
                              tgl_akad: new Date(val.tgl_pk),
                              tgl_penarikan: new Date(
                                val.tgl_awal_pertanggungan
                              ),
                              tgl_jatuh_tempo: new Date(
                                val.tgl_akhir_pertanggungan
                              ),
                              nilai_akad: val.plafond_kredit,
                              tgl_penjaminan: val.tgl_sertifikat,
                              nomor_penjaminan: val.no_sertifikat,
                              nilai_dijamin: val.nilai_pertanggungan,
                              sektor: val.sektor_ekonomi,
                            },
                            method: "POST",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error4, response4, body4) {
                            if (error4) {
                              console.log(error4);
                            } else {
                              console.log(body4);
                              if (response4.statusCode != 200) {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                    // agent: agent,
                                    json: {
                                      username: "askrindo",
                                      password: "bzMjN9Wc8DeATBKh",
                                      // "password" :"development"
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                    },
                                  },
                                  function (errorfix, responsefix, bodyfix) {
                                    if (errorfix) {
                                      console.log(errorfix);
                                    } else {
                                      body.data = bodyfix.data;
                                      console.log("REFRESH TOKEN");
                                      request(
                                        {
                                          url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad",
                                          // agent: agent,
                                          json: {
                                            rekening_baru:
                                              val.no_rekening_pinjaman.replace(
                                                /[^0-9a-z_]/gi,
                                                ""
                                              ),
                                            kode_bank: val.kode_bank,
                                            nik: val.no_id_debitur,
                                            rekening_lama: val.no_rek_lama,
                                            status_akad: "B",
                                            status_rekening: 1,
                                            nomor_akad:
                                              val.no_perjanjian_kredit,
                                            tgl_akad: new Date(val.tgl_pk),
                                            tgl_penarikan: new Date(
                                              val.tgl_awal_pertanggungan
                                            ),
                                            tgl_jatuh_tempo: new Date(
                                              val.tgl_akhir_pertanggungan
                                            ),
                                            nilai_akad: val.plafond_kredit,
                                            tgl_penjaminan: val.tgl_sertifikat,
                                            nomor_penjaminan: val.no_sertifikat,
                                            nilai_dijamin:
                                              val.nilai_pertanggungan,
                                            sektor: val.sektor_ekonomi,
                                          },
                                          method: "POST",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (
                                          error4re,
                                          response4re,
                                          body4re
                                        ) {
                                          if (error4re) {
                                            console.log(error4re);
                                          } else {
                                            if (body4re.code === "00") {
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPPenjaminan(
                                                  val.id_penjaminan,
                                                  2,
                                                  val.no_id_debitur
                                                ).then(function (params) {
                                                  resolve(
                                                    "POST SIKP AKAD SUKSES!"
                                                  );
                                                });
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPPenjaminan(
                                                  val.id_penjaminan,
                                                  2,
                                                  val.no_id_debitur
                                                ).then(function (params) {
                                                  resolve(
                                                    "POST SIKP AKAD SUKSES!"
                                                  );
                                                });
                                              }
                                            } else {
                                              // insert akad gagal
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  1,
                                                  body4re.message
                                                ).then(function (params) {
                                                  resolve(
                                                    "POST SIKP AKAD GAGAL!"
                                                  );
                                                });
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  1,
                                                  body4re.message
                                                ).then(function (params) {
                                                  resolve(
                                                    "POST SIKP AKAD GAGAL!"
                                                  );
                                                });
                                              }
                                            }
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              } else if (body4.code === "00") {
                                if (i == params.length - 1) {
                                  sukses++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  updateStatusSIKPPenjaminan(
                                    val.id_penjaminan,
                                    2,
                                    val.no_id_debitur
                                  ).then(function (params) {
                                    resolve("POST SIKP AKAD SUKSES!");
                                  });
                                } else {
                                  sukses++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  updateStatusSIKPPenjaminan(
                                    val.id_penjaminan,
                                    2,
                                    val.no_id_debitur
                                  ).then(function (params) {
                                    resolve("POST SIKP AKAD SUKSES!");
                                  });
                                }
                              } else {
                                // insert akad gagal
                                if (i == params.length - 1) {
                                  gagal++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  insertLogSIKP(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.transaction_id_bank,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    1,
                                    body4.message
                                  ).then(function (params) {
                                    resolve("POST SIKP AKAD GAGAL!");
                                  });
                                } else {
                                  gagal++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  insertLogSIKP(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.transaction_id_bank,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    1,
                                    body4.message
                                  ).then(function (params) {
                                    resolve("POST SIKP AKAD GAGAL!");
                                  });
                                }
                              }
                            }
                          }
                        );
                      } else if (status_sikp == 2) {
                        console.log({
                          nomor_tagihan: val.tgl_sertifikat.substring(0, 7) + "GEN2",
                          nomor_rekening: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          outstanding: val.plafond_kredit,
                          tahun: dateFormat(new Date(), "yyyy"),
                          nilai_ijp: val.premi,
                          periode: dateFormat(new Date(val.tgl_premi), "yyyy"),
                        });
                        request(
                          {
                            url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                            // agent: agent,
                            json: {
                              nomor_tagihan: val.tgl_sertifikat.substring(0, 7) + "GEN2",
                              nomor_rekening: val.no_rekening_pinjaman.replace(
                                /[^0-9a-z_]/gi,
                                ""
                              ),
                              kode_bank: val.kode_bank,
                              outstanding: val.plafond_kredit,
                              tahun: dateFormat(new Date(), "yyyy"),
                              nilai_ijp: val.premi,
                              periode: val.tahun_ke,
                            },
                            method: "POST",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error5, response5, body5) {
                            if (error5) {
                              console.log(error5);
                            } else {
                              console.log(body5);
                              if (response5.statusCode != 200) {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                    // agent: agent,
                                    json: {
                                      username: "askrindo",
                                      password: "bzMjN9Wc8DeATBKh",
                                      // "password" :"development"
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                    },
                                  },
                                  function (errorfix, responsefix, bodyfix) {
                                    if (errorfix) {
                                      console.log(errorfix);
                                    } else {
                                      body.data = bodyfix.data;
                                      console.log("REFRESH TOKEN");
                                      request(
                                        {
                                          url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                                          // agent: agent,
                                          json: {
                                            nomor_tagihan:
                                              val.tgl_sertifikat.substring(
                                                0,
                                                7
                                              ) + "GEN2",
                                            nomor_rekening:
                                              val.no_rekening_pinjaman.replace(
                                                /[^0-9a-z_]/gi,
                                                ""
                                              ),
                                            kode_bank: val.kode_bank,
                                            outstanding: val.plafond_kredit,
                                            tahun: dateFormat(
                                              new Date(),
                                              "yyyy"
                                            ),
                                            nilai_ijp: val.premi,
                                            periode: val.tahun_ke,
                                          },
                                          method: "POST",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (
                                          error5re,
                                          response5re,
                                          body5re
                                        ) {
                                          if (error5re) {
                                            console.log(error5re);
                                          } else {
                                            console.log(body5re);
                                            console.log("REFRESH TOKEN");
                                            if (body5re.code === "00") {
                                              console.log(
                                                "tagihan sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal
                                              );
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "tagihan sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPIJP(
                                                  val.penjaminan_ijp_id,
                                                  true,
                                                  val.tgl_sertifikat.substring(
                                                    0,
                                                    7
                                                  )
                                                ).then(function (params) {
                                                  updateStatusSIKPPenjaminan(
                                                    val.id_penjaminan,
                                                    3,
                                                    val.no_id_debitur
                                                  ).then(function (params) {
                                                    resolve(
                                                      "POST SIKP TAGIHAN SUKSES!"
                                                    );
                                                  });
                                                });
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "tagihan sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPIJP(
                                                  val.penjaminan_ijp_id,
                                                  true,
                                                  val.tgl_sertifikat.substring(
                                                    0,
                                                    7
                                                  )
                                                ).then(function (params) {
                                                  resolve(
                                                    "POST SIKP TAGIHAN SUKSES!"
                                                  );
                                                });
                                              }
                                            } else {
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "tagihan sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  2,
                                                  body5re.message
                                                ).then(function (params) {
                                                  resolve(
                                                    "POST SIKP TAGIHAN GAGAL!"
                                                  );
                                                });
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "tagihan sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  2,
                                                  body5re.message
                                                ).then(function (params) {
                                                  resolve(
                                                    "POST SIKP TAGIHAN GAGAL!"
                                                  );
                                                });
                                              }
                                              //insert tagihan gagal
                                            }
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              } else if (body5.code === "00") {
                                sukses++;
                                if (i == params.length - 1) {
                                  console.log(
                                    "tagihan sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  updateStatusSIKPIJP(
                                    val.penjaminan_ijp_id,
                                    true,
                                    val.tgl_sertifikat.substring(0, 7)
                                  ).then(function (params) {
                                    updateStatusSIKPPenjaminan(
                                      val.id_penjaminan,
                                      3,
                                      val.no_id_debitur
                                    ).then(function (params) {
                                      resolve("POST SIKP TAGIHAN SUKSES!");
                                    });
                                  });
                                } else {
                                  console.log(
                                    "tagihan sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  updateStatusSIKPIJP(
                                    val.penjaminan_ijp_id,
                                    true,
                                    val.tgl_sertifikat.substring(0, 7)
                                  ).then(function (params) {
                                    updateStatusSIKPPenjaminan(
                                      val.id_penjaminan,
                                      3,
                                      val.no_id_debitur
                                    ).then(function (params) {
                                      resolve("POST SIKP TAGIHAN SUKSES!");
                                    });
                                  });
                                }
                              } else {
                                if (i == params.length - 1) {
                                  gagal++;
                                  console.log(
                                    "tagihan sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  insertLogSIKP(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.transaction_id_bank,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    2,
                                    body5.message
                                  ).then(function (params) {
                                    resolve("POST SIKP TAGIHAN GAGAL!");
                                  });
                                } else {
                                  gagal++;
                                  console.log(
                                    "tagihan sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  insertLogSIKP(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.transaction_id_bank,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    2,
                                    body5.message
                                  ).then(function (params) {
                                    resolve("POST SIKP TAGIHAN GAGAL!");
                                  });
                                }
                                //insert tagihan gagal
                              }
                            }
                          }
                        );
                      } else {
                        resolve("GAGAL, INVALID COMMAND!");
                      }
                    }, i * 2000);
                  });
                } else {
                  resolve("GAGAL, DATA TIDAK DITEMUKAN!");
                }
              }
            );
          }
        }
      }
    );
  });
};

cekNIK = function (nik) {
  return Promise.resolve("OK");
};

cekDebitur = function (bod, isCBC) {
  var agent;
  console.log("NOW="+new Date(
    new Date().setHours(0, 0, 0, 0)
  ));
  agentOptions = {
    host: "202.61.126.162",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };
  return new Promise((resolve) => {
    agent = new https.Agent(agentOptions);

    request(
      {
        url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
        // agent: agent,
        json: {
          username: "askrindo",
          password: "bzMjN9Wc8DeATBKh",
          // "password" :"development"
        },
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      },
      async function (errorfix, responsefix, bodyfix) {
        if (errorfix) {
          console.log(errorfix);
          resolve("ERROR");
        } else {
          console.log(bodyfix);
          if (responsefix.statusCode != 200) {
            resolve("ERROR");
          } else {
            request(
              {
                url:
                  "http://10.238.136.117/pen-umkm-dev/api/v1/Debitur/" +
                  bod.noIdentitas,
                // agent: agent,
                method: "GET",
                headers: {
                  "Content-Type": "application/json",
                  Authorization: "Bearer " + bodyfix.data,
                },
              },
              function (error3re, response3re, body3re) {
                if (error3re) {
                  console.log(error3re);
                  resolve("ERROR");
                } else {
                  if (response3re.statusCode != 200) {
                    resolve("ERROR");
                  } else {
                    body3re = JSON.parse(body3re);
                    console.log(body3re);

                    if (body3re.code == "47") {
                      let substring_ktp;
                      getKodeKotaSIKP(bod.kodePos).then(
                        function (kode_sikp_get) {
                          if (kode_sikp_get.length == 0) {
                            substring_ktp = bod.noIdentitas.substring(0, 4);
                          } else {
                            substring_ktp = kode_sikp_get[0].kode_kabkota;
                          }
                          if (bod.npwp) {
                            bod.npwp = bod.npwp.replace(/[^0-9a-z]/gi, "");
                          } else {
                            bod.npwp = null;
                          }
                          console.log("debitur c1")
                          console.log(
                            {
                              nik: bod.noIdentitas,
                              nama: bod.namaDebitur,
                              tgl_lahir: new Date(
                                bod.tanggalLahir.substring(0, 4) +
                                  "-" +
                                  bod.tanggalLahir.substring(4, 6) +
                                  "-" +
                                  bod.tanggalLahir.substring(6, 8)
                              ),
                              jns_kelamin: bod.jenisKelamin,
                              maritas_sts: bod.maritalStatus,
                              pendidikan: bod.pendidikan,
                              pekerjaan: bod.kodePekerjaan,
                              jns_debitur: "R",
                              alamat: bod.alamatDebitur,
                              kode_kabkota: substring_ktp,
                              kode_pos: bod.kodePos,
                              npwp: bod.npwp,
                              mulai_usaha: new Date(
                                bod.tglMulaiUsaha.substring(0, 4) +
                                  "-" +
                                  bod.tglMulaiUsaha.substring(4, 6) +
                                  "-" +
                                  bod.tglMulaiUsaha.substring(6, 8)
                              ),
                              alamat_usaha: bod.alamatDebitur,
                              ijin_usaha: bod.noIjinUsaha,
                              modal_usaha: bod.modalUsaha,
                              jml_pekerja: 1,
                              jml_kredit: bod.plafonKredit,
                              no_hp: bod.noHp,
                              uraian_agunan: "-",
                            }
                          );

                          request(
                            {
                              url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon/",
                              // agent: agent,
                              json: {
                                nik: bod.noIdentitas,
                                nama: bod.namaDebitur,
                                tgl_lahir: new Date(
                                  bod.tanggalLahir.substring(0, 4) +
                                    "-" +
                                    bod.tanggalLahir.substring(4, 6) +
                                    "-" +
                                    bod.tanggalLahir.substring(6, 8)
                                ),
                                jns_kelamin: bod.jenisKelamin,
                                maritas_sts: bod.maritalStatus,
                                pendidikan: bod.pendidikan,
                                pekerjaan: bod.kodePekerjaan,
                                jns_debitur: "R",
                                alamat: bod.alamatDebitur,
                                kode_kabkota: substring_ktp,
                                kode_pos: bod.kodePos,
                                npwp: bod.npwp,
                                mulai_usaha: new Date(
                                  bod.tglMulaiUsaha.substring(0, 4) +
                                    "-" +
                                    bod.tglMulaiUsaha.substring(4, 6) +
                                    "-" +
                                    bod.tglMulaiUsaha.substring(6, 8)
                                ),
                                alamat_usaha: bod.alamatDebitur,
                                ijin_usaha: bod.noIjinUsaha,
                                modal_usaha: bod.modalUsaha,
                                jml_pekerja: 1,
                                jml_kredit: bod.plafonKredit,
                                no_hp: bod.noHp,
                                uraian_agunan: "-",
                              },
                              method: "POST",
                              headers: {
                                "Content-Type": "application/json",
                                Authorization: "Bearer " + bodyfix.data,
                              },
                            },
                            function (error4re, response4re, body4re) {
                              if (error4re) {
                                console.log(error4re);
                                console.log(response4re);
                                resolve("ERROR");
                              } else {
                                if (response4re.statusCode != 200) {
                                  console.log(response4re);
                                  resolve("ERROR");
                                } else {
                                  if (
                                    body4re.code == "00" ||
                                    body4re.code == "04"
                                  ) { 
                                    if(isCBC){
                                      resolve("SUCCESS");
                                    } else {
                                      console.log("akad c1");
                                    console.log(new Date(
                                      new Date().setHours(7, 0, 0, 0)
                                    ));
                                    console.log(JSON.stringify({
                                      rekening_baru: bod.noRekening.replace(
                                        /[^0-9a-z_]/gi,
                                        ""
                                      ),
                                      kode_bank: bod.kodeBank,
                                      nik: bod.noIdentitas,
                                      rekening_lama: bod.noRekLama,
                                      status_akad: "B",
                                      status_rekening: 1,
                                      nomor_akad: bod.noPk,
                                      tgl_akad: new Date(
                                        bod.tglPK.substring(0, 4) +
                                          "-" +
                                          bod.tglPK.substring(4, 6) +
                                          "-" +
                                          bod.tglPK.substring(6, 8)
                                      ),
                                      tgl_penarikan: new Date(
                                        bod.tanggalAwal.substring(0, 4) +
                                          "-" +
                                          bod.tanggalAwal.substring(4, 6) +
                                          "-" +
                                          bod.tanggalAwal.substring(6, 8)
                                      ),
                                      tgl_jatuh_tempo: new Date(
                                        bod.tanggalAkhir.substring(0, 4) +
                                          "-" +
                                          bod.tanggalAkhir.substring(4, 6) +
                                          "-" +
                                          bod.tanggalAkhir.substring(6, 8)
                                      ),
                                      nilai_akad: bod.plafonKredit,
                                      tgl_penjaminan: new Date(
                                        new Date().setHours(7, 0, 0, 0)
                                      ),
                                      nomor_penjaminan: bod.noRekening.replace(
                                        /[^0-9a-z_]/gi,
                                        ""
                                      ),
                                      nilai_dijamin:
                                        Math.round(
                                          bod.plafonKredit * 0.7 * 100
                                        ) / 100,
                                      sektor: bod.kodeSektor,
                                    }));
                                    request(
                                      {
                                        url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/",
                                        // agent: agent,
                                        json: {
                                          rekening_baru: bod.noRekening.replace(
                                            /[^0-9a-z_]/gi,
                                            ""
                                          ),
                                          kode_bank: bod.kodeBank,
                                          nik: bod.noIdentitas,
                                          rekening_lama: bod.noRekLama,
                                          status_akad: "B",
                                          status_rekening: 1,
                                          nomor_akad: bod.noPk,
                                          tgl_akad: new Date(
                                            bod.tglPK.substring(0, 4) +
                                              "-" +
                                              bod.tglPK.substring(4, 6) +
                                              "-" +
                                              bod.tglPK.substring(6, 8)
                                          ),
                                          tgl_penarikan: new Date(
                                            bod.tanggalAwal.substring(0, 4) +
                                              "-" +
                                              bod.tanggalAwal.substring(4, 6) +
                                              "-" +
                                              bod.tanggalAwal.substring(6, 8)
                                          ),
                                          tgl_jatuh_tempo: new Date(
                                            bod.tanggalAkhir.substring(0, 4) +
                                              "-" +
                                              bod.tanggalAkhir.substring(4, 6) +
                                              "-" +
                                              bod.tanggalAkhir.substring(6, 8)
                                          ),
                                          nilai_akad: bod.plafonKredit,
                                          tgl_penjaminan: new Date(
                                            new Date().setHours(7, 0, 0, 0)
                                          ),
                                          nomor_penjaminan:
                                            bod.noRekening.replace(
                                              /[^0-9a-z_]/gi,
                                              ""
                                            ),
                                          nilai_dijamin:
                                            Math.round(
                                              bod.plafonKredit * 0.7 * 100
                                            ) / 100,
                                          sektor: bod.kodeSektor,
                                        },
                                        method: "POST",
                                        headers: {
                                          "Content-Type": "application/json",
                                          Authorization:
                                            "Bearer " + bodyfix.data,
                                        },
                                      },
                                      function (
                                        error5re,
                                        response5re,
                                        body5re
                                      ) {
                                        if (error4re) {
                                          console.log(error5re);
                                          resolve("ERROR");
                                        } else {
                                          if (response5re.statusCode != 200) {
                                            console.log(response5re);
                                            resolve("ERROR");
                                          } else {
                                            if (body5re.code == "00") {
                                              resolve("SUCCESS");
                                            } else {
                                              console.log(body5re);
                                              resolve(body5re);
                                            }
                                          }
                                        }
                                      }
                                    ); 
                                  }  
                                  } else {
                                    resolve(body4re);
                                  }
                                }
                              }
                            }
                          );
                        }
                      );
                    } else {
                      console.log("akad c2");
                      console.log({
                        rekening_baru: bod.noRekening.replace(
                          /[^0-9a-z_]/gi,
                          ""
                        ),
                        kode_bank: bod.kodeBank,
                        nik: bod.noIdentitas,
                        rekening_lama: bod.noRekLama,
                        status_akad: "B",
                        status_rekening: 1,
                        nomor_akad: bod.noPk,
                        tgl_akad: new Date(
                          bod.tglPK.substring(0, 4) +
                            "-" +
                            bod.tglPK.substring(4, 6) +
                            "-" +
                            bod.tglPK.substring(6, 8)
                        ),
                        tgl_penarikan: new Date(
                          bod.tanggalAwal.substring(0, 4) +
                            "-" +
                            bod.tanggalAwal.substring(4, 6) +
                            "-" +
                            bod.tanggalAwal.substring(6, 8)
                        ),
                        tgl_jatuh_tempo: new Date(
                          bod.tanggalAkhir.substring(0, 4) +
                            "-" +
                            bod.tanggalAkhir.substring(4, 6) +
                            "-" +
                            bod.tanggalAkhir.substring(6, 8)
                        ),
                        nilai_akad: bod.plafonKredit,
                        tgl_penjaminan: new Date(
                          new Date().setHours(7, 0, 0, 0)
                        ),
                        nomor_penjaminan: bod.noRekening.replace(
                          /[^0-9a-z_]/gi,
                          ""
                        ),
                        nilai_dijamin:
                          Math.round(bod.plafonKredit * 0.7 * 100) / 100,
                        sektor: bod.kodeSektor,
                      });
                      request(
                        {
                          url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/",
                          // agent: agent,
                          json: {
                            rekening_baru: bod.noRekening.replace(
                              /[^0-9a-z_]/gi,
                              ""
                            ),
                            kode_bank: bod.kodeBank,
                            nik: bod.noIdentitas,
                            rekening_lama: bod.noRekLama,
                            status_akad: "B",
                            status_rekening: 1,
                            nomor_akad: bod.noPk,
                            tgl_akad: new Date(
                              bod.tglPK.substring(0, 4) +
                                "-" +
                                bod.tglPK.substring(4, 6) +
                                "-" +
                                bod.tglPK.substring(6, 8)
                            ),
                            tgl_penarikan: new Date(
                              bod.tanggalAwal.substring(0, 4) +
                                "-" +
                                bod.tanggalAwal.substring(4, 6) +
                                "-" +
                                bod.tanggalAwal.substring(6, 8)
                            ),
                            tgl_jatuh_tempo: new Date(
                              bod.tanggalAkhir.substring(0, 4) +
                                "-" +
                                bod.tanggalAkhir.substring(4, 6) +
                                "-" +
                                bod.tanggalAkhir.substring(6, 8)
                            ),
                            nilai_akad: bod.plafonKredit,
                            tgl_penjaminan: new Date(
                              new Date().setHours(7, 0, 0, 0)
                            ),
                            nomor_penjaminan: bod.noRekening.replace(
                              /[^0-9a-z_]/gi,
                              ""
                            ),
                            nilai_dijamin:
                              Math.round(bod.plafonKredit * 0.7 * 100) / 100,
                            sektor: bod.kodeSektor,
                          },
                          method: "POST",
                          headers: {
                            "Content-Type": "application/json",
                            Authorization: "Bearer " + bodyfix.data,
                          },
                        },
                        function (error5re, response5re, body5re) {
                          if (error5re) {
                            console.log(error5re);
                            resolve("ERROR");
                          } else {
                            if (response5re.statusCode != 200) {
                              resolve("ERROR");
                            } else {
                              if (body5re.code == "00") {
                                resolve("SUCCESS");
                              } else {
                                resolve(body5re);
                              }
                            }
                          }
                        }
                      );
                    }
                  }
                }
              }
            );
          }
        }
      }
    );
  });
};

exports.pembatalanAkseptasi = async function (req, res) {
  get_t_penjaminan = await model.sequelize
    .query("select * from t_penjaminan where id_penjaminan = :id_penjaminan", {
      replacements: { id_penjaminan: req.body.idPenjaminan },
      type: model.sequelize.QueryTypes.SELECT,
      quoteIdentifiers: true,
    })
    .then(async function (get_t_penjaminan) {
      get_t_penjaminan_ijp = await model.sequelize
        .query(
          "select * from t_penjaminan_ijp where id_penjaminan = :id_penjaminan",
          {
            replacements: { id_penjaminan: req.body.idPenjaminan },
            type: model.sequelize.QueryTypes.SELECT,
            quoteIdentifiers: true,
          }
        )
        .then(async function (get_t_penjaminan_ijp) {
          var belum_laporan =
            get_t_penjaminan[0].status_sikp != 3 ||
            get_t_penjaminan_ijp[0].status_sikp == false;
          var sudah_laporan =
            get_t_penjaminan[0].status_sikp == 3 ||
            get_t_penjaminan_ijp[0].status_sikp == true;
          var sudah_dibayar = false;
          if (
            get_t_penjaminan_ijp.find((o) => o.id_jurnal_produksi_ijp !== null)
          ) {
            sudah_dibayar = true;
          } else {
            sudah_dibayar = false;
          }

          if (sudah_dibayar) {
            var no_sertifikat_endorse;

            if (!get_t_penjaminan[0].no_sertifikat) {
              no_sertifikat_endorse = null;
            } else {
              if (!get_t_penjaminan[0].transaction_id_bank) {
                get_t_penjaminan[0].transaction_id_bank = null;
              } else {
                get_t_penjaminan[0].transaction_id_bank =
                  "'" + get_t_penjaminan[0].transaction_id_bank + "'";
              }
              if (!get_t_penjaminan[0].kode_bank) {
                get_t_penjaminan[0].kode_bank = null;
              } else {
                get_t_penjaminan[0].kode_bank =
                  "'" + get_t_penjaminan[0].kode_bank + "'";
              }
              if (!get_t_penjaminan[0].kode_cabang_bank) {
                get_t_penjaminan[0].kode_cabang_bank = null;
              } else {
                get_t_penjaminan[0].kode_cabang_bank =
                  "'" + get_t_penjaminan[0].kode_cabang_bank + "'";
              }
              if (!get_t_penjaminan[0].nama_cabang_bank) {
                get_t_penjaminan[0].nama_cabang_bank = null;
              } else {
                get_t_penjaminan[0].nama_cabang_bank =
                  "'" + get_t_penjaminan[0].nama_cabang_bank + "'";
              }
              if (!get_t_penjaminan[0].no_rekening_pinjaman) {
                get_t_penjaminan[0].no_rekening_pinjaman = null;
              } else {
                get_t_penjaminan[0].no_rekening_pinjaman =
                  "'" +
                  get_t_penjaminan[0].no_rekening_pinjaman.replace(
                    /[^0-9a-z]/gi,
                    ""
                  ) +
                  "'";
              }
              if (!get_t_penjaminan[0].no_rek_lama) {
                get_t_penjaminan[0].no_rek_lama = null;
              } else {
                get_t_penjaminan[0].no_rek_lama =
                  "'" + get_t_penjaminan[0].no_rek_lama + "'";
              }
              if (!get_t_penjaminan[0].cif) {
                get_t_penjaminan[0].cif = null;
              } else {
                get_t_penjaminan[0].cif = "'" + get_t_penjaminan[0].cif + "'";
              }
              if (!get_t_penjaminan[0].no_perjanjian_kredit) {
                get_t_penjaminan[0].no_perjanjian_kredit = null;
              } else {
                get_t_penjaminan[0].no_perjanjian_kredit =
                  "'" + get_t_penjaminan[0].no_perjanjian_kredit + "'";
              }
              if (!get_t_penjaminan[0].no_pk_lama) {
                get_t_penjaminan[0].no_pk_lama = null;
              } else {
                get_t_penjaminan[0].no_pk_lama =
                  "'" + get_t_penjaminan[0].no_pk_lama + "'";
              }
              if (!get_t_penjaminan[0].tgl_pk) {
                get_t_penjaminan[0].tgl_pk = null;
              } else {
                get_t_penjaminan[0].tgl_pk =
                  "'" + get_t_penjaminan[0].tgl_pk + "'";
              }
              if (!get_t_penjaminan[0].tgl_pk_lama) {
                get_t_penjaminan[0].tgl_pk_lama = null;
              } else {
                get_t_penjaminan[0].tgl_pk_lama =
                  "'" + get_t_penjaminan[0].tgl_pk_lama + "'";
              }
              if (!get_t_penjaminan[0].tgl_awal_pertanggungan) {
                get_t_penjaminan[0].tgl_awal_pertanggungan = null;
              } else {
                get_t_penjaminan[0].tgl_awal_pertanggungan =
                  "'" + get_t_penjaminan[0].tgl_awal_pertanggungan + "'";
              }
              if (!get_t_penjaminan[0].tgl_akhir_pertanggungan) {
                get_t_penjaminan[0].tgl_akhir_pertanggungan = null;
              } else {
                get_t_penjaminan[0].tgl_akhir_pertanggungan =
                  "'" + get_t_penjaminan[0].tgl_akhir_pertanggungan + "'";
              }
              if (!get_t_penjaminan[0].jangka_waktu) {
                get_t_penjaminan[0].jangka_waktu = null;
              } else {
                get_t_penjaminan[0].jangka_waktu =
                  get_t_penjaminan[0].jangka_waktu;
              }
              if (!get_t_penjaminan[0].nama_debitur) {
                get_t_penjaminan[0].nama_debitur = null;
              } else {
                get_t_penjaminan[0].nama_debitur =
                  get_t_penjaminan[0].nama_debitur;
              }
              if (!get_t_penjaminan[0].alamat_debitur) {
                get_t_penjaminan[0].alamat_debitur = null;
              } else {
                get_t_penjaminan[0].alamat_debitur =
                  get_t_penjaminan[0].alamat_debitur;
              }
              if (!get_t_penjaminan[0].kode_pos) {
                get_t_penjaminan[0].kode_pos = null;
              } else {
                get_t_penjaminan[0].kode_pos =
                  "'" + get_t_penjaminan[0].kode_pos + "'";
              }
              if (!get_t_penjaminan[0].tempat_lahir) {
                get_t_penjaminan[0].tempat_lahir = null;
              } else {
                get_t_penjaminan[0].tempat_lahir =
                  "'" + get_t_penjaminan[0].tempat_lahir + "'";
              }
              if (!get_t_penjaminan[0].tgl_lahir) {
                get_t_penjaminan[0].tgl_lahir = null;
              } else {
                get_t_penjaminan[0].tgl_lahir =
                  "'" + get_t_penjaminan[0].tgl_lahir + "'";
              }
              if (!get_t_penjaminan[0].jenis_kelamin) {
                get_t_penjaminan[0].jenis_kelamin = null;
              } else {
                get_t_penjaminan[0].jenis_kelamin =
                  get_t_penjaminan[0].jenis_kelamin;
              }
              if (!get_t_penjaminan[0].no_telepon) {
                get_t_penjaminan[0].no_telepon = null;
              } else {
                get_t_penjaminan[0].no_telepon =
                  "'" + get_t_penjaminan[0].no_telepon + "'";
              }
              if (!get_t_penjaminan[0].no_hp_debitur) {
                get_t_penjaminan[0].no_hp_debitur = null;
              } else {
                get_t_penjaminan[0].no_hp_debitur =
                  "'" + get_t_penjaminan[0].no_hp_debitur + "'";
              }
              if (!get_t_penjaminan[0].pendidikan) {
                get_t_penjaminan[0].pendidikan = null;
              } else {
                get_t_penjaminan[0].pendidikan = get_t_penjaminan[0].pendidikan;
              }
              if (!get_t_penjaminan[0].marital_status) {
                get_t_penjaminan[0].marital_status = null;
              } else {
                get_t_penjaminan[0].marital_status =
                  get_t_penjaminan[0].marital_status;
              }
              if (!get_t_penjaminan[0].jenis_identitas) {
                get_t_penjaminan[0].jenis_identitas = null;
              } else {
                get_t_penjaminan[0].jenis_identitas =
                  "'" + get_t_penjaminan[0].jenis_identitas + "'";
              }
              if (!get_t_penjaminan[0].no_id_debitur) {
                get_t_penjaminan[0].no_id_debitur = null;
              } else {
                get_t_penjaminan[0].no_id_debitur =
                  "'" + get_t_penjaminan[0].no_id_debitur + "'";
              }
              if (!get_t_penjaminan[0].npwp) {
                get_t_penjaminan[0].npwp = null;
              } else {
                get_t_penjaminan[0].npwp = "'" + get_t_penjaminan[0].npwp + "'";
              }
              if (!get_t_penjaminan[0].no_ijin_usaha) {
                get_t_penjaminan[0].no_ijin_usaha = null;
              } else {
                get_t_penjaminan[0].no_ijin_usaha =
                  "'" + get_t_penjaminan[0].no_ijin_usaha + "'";
              }
              if (!get_t_penjaminan[0].tgl_mulai_usaha) {
                get_t_penjaminan[0].tgl_mulai_usaha = null;
              } else {
                get_t_penjaminan[0].tgl_mulai_usaha =
                  "'" + get_t_penjaminan[0].tgl_mulai_usaha + "'";
              }
              if (
                !get_t_penjaminan[0].modal_usaha &&
                get_t_penjaminan[0].modal_usaha !== 0
              ) {
                get_t_penjaminan[0].modal_usaha = null;
              } else {
                get_t_penjaminan[0].modal_usaha =
                  get_t_penjaminan[0].modal_usaha;
              }
              if (
                !get_t_penjaminan[0].jumlah_tenaga_kerja &&
                get_t_penjaminan[0].jumlah_tenaga_kerja !== 0
              ) {
                get_t_penjaminan[0].jumlah_tenaga_kerja = null;
              } else {
                get_t_penjaminan[0].jumlah_tenaga_kerja =
                  get_t_penjaminan[0].jumlah_tenaga_kerja;
              }
              if (
                !get_t_penjaminan[0].omset_usaha &&
                get_t_penjaminan[0].omset_usaha !== 0
              ) {
                get_t_penjaminan[0].omset_usaha = null;
              } else {
                get_t_penjaminan[0].omset_usaha =
                  get_t_penjaminan[0].omset_usaha;
              }
              if (
                !get_t_penjaminan[0].kekayaan_bersih &&
                get_t_penjaminan[0].kekayaan_bersih !== 0
              ) {
                get_t_penjaminan[0].kekayaan_bersih = null;
              } else {
                get_t_penjaminan[0].kekayaan_bersih =
                  get_t_penjaminan[0].kekayaan_bersih;
              }
              if (!get_t_penjaminan[0].jenis_pekerjaan) {
                get_t_penjaminan[0].jenis_pekerjaan = null;
              } else {
                get_t_penjaminan[0].jenis_pekerjaan =
                  get_t_penjaminan[0].jenis_pekerjaan;
              }
              if (!get_t_penjaminan[0].status_kepegawaian) {
                get_t_penjaminan[0].status_kepegawaian = null;
              } else {
                get_t_penjaminan[0].status_kepegawaian =
                  "'" + get_t_penjaminan[0].status_kepegawaian + "'";
              }
              if (!get_t_penjaminan[0].jenis_kredit) {
                get_t_penjaminan[0].jenis_kredit = null;
              } else {
                get_t_penjaminan[0].jenis_kredit =
                  "'" + get_t_penjaminan[0].jenis_kredit + "'";
              }
              if (
                !get_t_penjaminan[0].plafond_kredit &&
                get_t_penjaminan[0].plafond_kredit !== 0
              ) {
                get_t_penjaminan[0].plafond_kredit = null;
              } else {
                get_t_penjaminan[0].plafond_kredit =
                  get_t_penjaminan[0].plafond_kredit;
              }
              if (
                !get_t_penjaminan[0].bakidebet &&
                get_t_penjaminan[0].bakidebet !== 0
              ) {
                get_t_penjaminan[0].bakidebet = null;
              } else {
                get_t_penjaminan[0].bakidebet = get_t_penjaminan[0].bakidebet;
              }
              if (!get_t_penjaminan[0].type_tujuan_kredit) {
                get_t_penjaminan[0].type_tujuan_kredit = null;
              } else {
                get_t_penjaminan[0].type_tujuan_kredit =
                  "'" + get_t_penjaminan[0].type_tujuan_kredit + "'";
              }
              if (!get_t_penjaminan[0].suku_bunga_kredit) {
                get_t_penjaminan[0].suku_bunga_kredit = null;
              } else {
                get_t_penjaminan[0].suku_bunga_kredit =
                  "'" + get_t_penjaminan[0].suku_bunga_kredit + "'";
              }
              if (!get_t_penjaminan[0].sektor_ekonomi) {
                get_t_penjaminan[0].sektor_ekonomi = null;
              } else {
                get_t_penjaminan[0].sektor_ekonomi =
                  "'" + get_t_penjaminan[0].sektor_ekonomi + "'";
              }
              if (!get_t_penjaminan[0].coverage) {
                get_t_penjaminan[0].coverage = null;
              } else {
                get_t_penjaminan[0].coverage = get_t_penjaminan[0].coverage;
              }
              if (!get_t_penjaminan[0].kolektibilitas_kredit) {
                get_t_penjaminan[0].kolektibilitas_kredit = null;
              } else {
                get_t_penjaminan[0].kolektibilitas_kredit =
                  "'" + get_t_penjaminan[0].kolektibilitas_kredit + "'";
              }
              if (!get_t_penjaminan[0].loan_type) {
                get_t_penjaminan[0].loan_type = null;
              } else {
                get_t_penjaminan[0].loan_type =
                  "'" + get_t_penjaminan[0].loan_type + "'";
              }
              if (!get_t_penjaminan[0].jenis_pengajuan) {
                get_t_penjaminan[0].jenis_pengajuan = null;
              } else {
                get_t_penjaminan[0].jenis_pengajuan =
                  "'" + get_t_penjaminan[0].jenis_pengajuan + "'";
              }
              if (!get_t_penjaminan[0].no_sertifikat_sebelumnya) {
                get_t_penjaminan[0].no_sertifikat_sebelumnya = null;
              } else {
                get_t_penjaminan[0].no_sertifikat_sebelumnya =
                  "'" + get_t_penjaminan[0].no_sertifikat_sebelumnya + "'";
              }
              if (!get_t_penjaminan[0].no_pks) {
                get_t_penjaminan[0].no_pks = null;
              } else {
                get_t_penjaminan[0].no_pks =
                  "'" + get_t_penjaminan[0].no_pks + "'";
              }

              if (!get_t_penjaminan[0].created_by) {
                get_t_penjaminan[0].created_by = "'H2H API Direct'";
              } else {
                get_t_penjaminan[0].created_by =
                  "'" + get_t_penjaminan[0].created_by + "'";
              }
              if (!get_t_penjaminan[0].created_date) {
                get_t_penjaminan[0].created_date = "'H2H API Direct'";
              } else {
                get_t_penjaminan[0].created_date =
                  "'" +
                  dateFormat(
                    new Date(get_t_penjaminan[0].created_date),
                    "yyyy-mm-dd hh:mm:ss"
                  ) +
                  "'";
              }

              no_sertifikat_endorse =
                get_t_penjaminan[0].no_sertifikat.substring(0, 23) + "3";
              insert = await model.sequelize
                .query(
                  "SET TIMEZONE='Asia/Bangkok'; INSERT INTO public.t_penjaminan(kode_bank, transaction_id_bank, kode_cabang_bank, nama_cabang_bank, kode_cabang_askrindo, no_rekening_pinjaman, no_rek_lama, cif, no_perjanjian_kredit, no_pk_lama, tgl_pk, tgl_pk_lama, tgl_awal_pertanggungan, tgl_akhir_pertanggungan, jangka_waktu, nama_debitur, alamat_debitur, kode_pos, tempat_lahir, tgl_lahir, jenis_kelamin, no_telepon, no_hp_debitur, pendidikan, marital_status, jenis_identitas, no_id_debitur, npwp, no_ijin_usaha, tgl_mulai_usaha, modal_usaha, jumlah_tenaga_kerja, omset_usaha, kekayaan_bersih, jenis_pekerjaan, status_kepegawaian, jenis_kredit, plafond_kredit, bakidebet, nilai_pertanggungan, type_tujuan_kredit, suku_bunga_kredit, currency, sektor_ekonomi, coverage, kolektibilitas_kredit, loan_type, mekanisme_penyaluran, is_cac, sumber, no_sertifikat, tgl_sertifikat, tgl_rekam_sertifikat, rate, total_ijp, status_penjaminan_id, jenis_pengajuan, no_sertifikat_sebelumnya, no_pks, keterangan, version, created_by, created_date, modified_by, modified_date, ket_audit_trail, is_cancel, jangka_waktu_hari, id_penjaminan_prev, jenis_pembatalan, is_proses_approval, dokumen_pembatalan, tgl_surat_pembatalan, no_surat_pembatalan, jenis_pen)VALUES(" +
                    get_t_penjaminan[0].kode_bank +
                    ", " +
                    get_t_penjaminan[0].transaction_id_bank +
                    ", " +
                    get_t_penjaminan[0].kode_cabang_bank +
                    ", " +
                    get_t_penjaminan[0].nama_cabang_bank +
                    ", " +
                    get_t_penjaminan[0].kode_cabang_askrindo +
                    ", " +
                    get_t_penjaminan[0].no_rekening_pinjaman +
                    ", " +
                    get_t_penjaminan[0].no_rek_lama +
                    ", " +
                    get_t_penjaminan[0].cif +
                    ", " +
                    get_t_penjaminan[0].no_perjanjian_kredit +
                    ", " +
                    get_t_penjaminan[0].no_pk_lama +
                    ", " +
                    get_t_penjaminan[0].tgl_pk +
                    ", " +
                    get_t_penjaminan[0].tgl_pk_lama +
                    ", " +
                    get_t_penjaminan[0].tgl_awal_pertanggungan +
                    ", " +
                    get_t_penjaminan[0].tgl_akhir_pertanggungan +
                    ", " +
                    get_t_penjaminan[0].jangka_waktu +
                    ", :nama_debitur, :alamat_debitur, " +
                    get_t_penjaminan[0].kode_pos +
                    ", " +
                    get_t_penjaminan[0].tempat_lahir +
                    ", " +
                    get_t_penjaminan[0].tgl_lahir +
                    ", " +
                    get_t_penjaminan[0].jenis_kelamin +
                    ", " +
                    get_t_penjaminan[0].no_telepon +
                    ", " +
                    get_t_penjaminan[0].no_hp_debitur +
                    ", " +
                    get_t_penjaminan[0].pendidikan +
                    ", " +
                    get_t_penjaminan[0].marital_status +
                    ", " +
                    get_t_penjaminan[0].jenis_identitas +
                    ", " +
                    get_t_penjaminan[0].no_id_debitur +
                    ", " +
                    get_t_penjaminan[0].npwp +
                    ", " +
                    get_t_penjaminan[0].no_ijin_usaha +
                    ", " +
                    get_t_penjaminan[0].tgl_mulai_usaha +
                    ", " +
                    get_t_penjaminan[0].modal_usaha +
                    ", " +
                    get_t_penjaminan[0].jumlah_tenaga_kerja +
                    ", " +
                    get_t_penjaminan[0].omset_usaha +
                    ", " +
                    get_t_penjaminan[0].kekayaan_bersih +
                    ", " +
                    get_t_penjaminan[0].jenis_pekerjaan +
                    ", " +
                    get_t_penjaminan[0].status_kepegawaian +
                    ", " +
                    get_t_penjaminan[0].jenis_kredit +
                    ", " +
                    -1 * get_t_penjaminan[0].plafond_kredit +
                    ", " +
                    get_t_penjaminan[0].bakidebet +
                    ", " +
                    -1 * get_t_penjaminan[0].nilai_pertanggungan +
                    ", " +
                    get_t_penjaminan[0].type_tujuan_kredit +
                    ", " +
                    get_t_penjaminan[0].suku_bunga_kredit +
                    ", 'IDR', " +
                    get_t_penjaminan[0].sektor_ekonomi +
                    ", " +
                    get_t_penjaminan[0].coverage +
                    ", " +
                    get_t_penjaminan[0].kolektibilitas_kredit +
                    ", " +
                    get_t_penjaminan[0].loan_type +
                    ", '1', " +
                    get_t_penjaminan[0].is_cac +
                    ", :sumber, NULL, NULL, NULL, 0, " +
                    -1 * get_t_penjaminan[0].total_ijp +
                    ", :status_penjaminan_id, " +
                    get_t_penjaminan[0].jenis_pengajuan +
                    ", '" +
                    get_t_penjaminan[0].no_sertifikat +
                    "', " +
                    get_t_penjaminan[0].no_pks +
                    ", 'Pembatalan Endorse Menunggu Approval', " +
                    get_t_penjaminan[0].version +
                    ", " +
                    get_t_penjaminan[0].created_by +
                    ", " +
                    get_t_penjaminan[0].created_date +
                    ", NULL, NULL, :alasan_pembatalan, true, " +
                    get_t_penjaminan[0].jangka_waktu_hari +
                    ", " +
                    req.body.idPenjaminan +
                    ", 3, true, :file, :tgl_surat_pembatalan, :no_surat_pembatalan, 'GEN2' ); update t_penjaminan set jenis_pembatalan = 3, is_proses_approval = true where id_penjaminan = " +
                    req.body.idPenjaminan +
                    ";",
                  {
                    replacements: {
                      status_penjaminan_id: 14,
                      sumber: 3,
                      nama_debitur: get_t_penjaminan[0].nama_debitur,
                      alamat_debitur: get_t_penjaminan[0].alamat_debitur,
                      alasan_pembatalan: req.body.alasanPembatalan,
                      file: req.body.file,
                      no_surat_pembatalan: req.body.noSuratBank,
                      tgl_surat_pembatalan: req.body.tanggalSurat,
                    },
                    type: model.sequelize.QueryTypes.INSERT,
                    quoteIdentifiers: true,
                  }
                )
                .then(async function () {
                  // var jatuh_tempo = dateFormat(new Date(), "dd" )
                  // if(jatuh_tempo >= 15)
                  // {
                  //     jatuh_tempo = dateFormat(new Date(), "yyyy" )+(padWithZeroes((+(dateFormat(new Date(), "mm" ))+1), 2))+'15'
                  // }
                  // else
                  // {
                  //     jatuh_tempo = dateFormat(new Date(), "yyyymm" )+'15'
                  // } untuk tambah jatuh tempo
                  get_t_penjaminan_ijp.forEach((val, i) => {
                    setTimeout(async function () {
                      getDokumenPembatalanByIdPrev(req.body.idPenjaminan).then(
                        async function (id_prev) {
                          ijp = await model.sequelize
                            .query(
                              "SET TIMEZONE='Asia/Bangkok'; INSERT INTO public.t_penjaminan_ijp(id_penjaminan, tahun_ke, premi, premi_dibayar, status_bayar, no_bukti_bayar, tgl_bayar, version, created_by, created_date, modified_by, modified_date, cadangan)VALUES(:id_penjaminan, :tahun_ke, :premi, 0, false, NULL, NULL, 1, '" +
                                req.body.createdBy +
                                "', now(), NULL, NULL, :cadangan);",
                              {
                                replacements: {
                                  id_penjaminan: id_prev[0].id_penjaminan,
                                  tahun_ke: val.tahun_ke,
                                  premi: val.premi * -1,
                                  cadangan: val.cadangan * -1,
                                },
                                type: model.sequelize.QueryTypes.INSERT,
                                quoteIdentifiers: true,
                              }
                            )
                            .then(async function () {
                              if (i == get_t_penjaminan_ijp.length - 1) {
                                res.status(200).json({
                                  error: false,
                                  message:
                                    "Pengajuan pembatalan dengan endorsement sukses!",
                                  data: {
                                    id_penjaminan: req.body.idPenjaminan,
                                    alasan_pembatalan:
                                      req.body.alasanPembatalan,
                                    dokumen_pembatalan:
                                      "http://10.100.10.30:9200/akseptasi/getDokumenPembatalan?id=" +
                                      req.body.idPenjaminan,
                                  },
                                });
                              }
                            });
                        }
                      );
                    }, i * 2000);
                  });
                });
            }
          } else {
            var sudah_laporan =
              get_t_penjaminan[0].status_sikp == 3 ||
              get_t_penjaminan_ijp[0].status_sikp == true;
            var jenis_pembatalan;
            if (sudah_laporan) {
              jenis_pembatalan = 2;
            } else {
              jenis_pembatalan = 1;
            }
            update_penjaminan = await model.sequelize
              .query(
                "update t_penjaminan set ket_audit_trail = :alasanPembatalan, no_surat_pembatalan = :noSuratBank, jenis_pembatalan = :jenis_pembatalan, tgl_surat_pembatalan = :tanggalSurat, modified_by = :createdBy, dokumen_pembatalan = :file, modified_date = now(), is_proses_approval = true where id_penjaminan = :idPenjaminan",
                {
                  replacements: {
                    idPenjaminan: req.body.idPenjaminan,
                    alasanPembatalan: req.body.alasanPembatalan,
                    noSuratBank: req.body.noSuratBank,
                    tanggalSurat: req.body.tanggalSurat,
                    createdBy: req.body.createdBy,
                    jenis_pembatalan: jenis_pembatalan,
                    file: req.body.file,
                  },
                  type: model.sequelize.QueryTypes.UPDATE,
                  quoteIdentifiers: true,
                }
              )
              .then(function () {
                res.status(200).json({
                  error: false,
                  message: "Pengajuan pembatalan tanpa endorsement sukses!",
                  data: {
                    id_penjaminan: req.body.idPenjaminan,
                    alasan_pembatalan: req.body.alasanPembatalan,
                    no_surat_bank: req.body.noSuratBank,
                    tanggal_surat: req.body.tanggalSurat,
                  },
                });
              });
          }
        });
    });
};

exports.getDokumenPembatalan = function (req, res) {
  getDokumenPembatalanByIdPrev(req.query.id)
    .then(function (penjaminan) {
      const download = Buffer.from(penjaminan[0].dokumen_pembatalan, "base64");
      res.setHeader(
        "Content-disposition",
        'inline; filename="dokumen-' + req.query.id + '.pdf"'
      );
      res.setHeader("Content-type", "application/pdf");
      res.end(download);
    })
    .catch(function () {
      res.setHeader("Content-Type", "text/html");
      res.status(400).send("<h1>Dokumen Pembatalan Tidak Ditemukan!</h1>");
    });
};

exports.getDetailPembatalan = async function (req, res) {
  detail_pembatalan = await model.sequelize
    .query(
      "select b.nama_bank, a.kode_bank, a.kode_cabang_bank, a.nama_cabang_bank, a.no_rekening_pinjaman, a.no_sertifikat, a.tgl_sertifikat, a.nama_debitur, a.status_penjaminan_id, a.status_sikp, a.id_penjaminan, a.ket_audit_trail as alasan_pembatalan, a.dokumen_pembatalan, a.tgl_surat_pembatalan, a.no_surat_pembatalan, a.jenis_pembatalan, a.id_penjaminan_prev from t_penjaminan a, m_bank b where a.kode_bank = b.kode_bank and a.no_sertifikat = :no_sertifikat",
      {
        replacements: { no_sertifikat: req.query.no_sertifikat },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(async function (detail_pembatalan) {
      if (!detail_pembatalan[0]) {
        detail_pembatalan.push({ id_penjaminan: null });
      }
      endorsement_check = await model.sequelize
        .query(
          "select * from t_penjaminan a where a.id_penjaminan_prev = :id_penjaminan",
          {
            replacements: { id_penjaminan: detail_pembatalan[0].id_penjaminan },
            type: model.sequelize.QueryTypes.SELECT,
            quoteIdentifiers: true,
          }
        )
        .then(async function (endorsement_check) {
          if (endorsement_check[0]) {
            detail_pembatalan[0].dokumen_pembatalan =
              endorsement_check[0].dokumen_pembatalan;
            detail_pembatalan[0].tgl_surat_pembatalan =
              endorsement_check[0].tgl_surat_pembatalan;
            detail_pembatalan[0].no_surat_pembatalan =
              endorsement_check[0].no_surat_pembatalan;
            detail_pembatalan[0].alasan_pembatalan =
              endorsement_check[0].ket_audit_trail;
          }
          detail_ijp = await model.sequelize
            .query(
              "select tahun_ke, tgl_premi, premi, cadangan, premi_nett, status_sikp as status_sikp_ijp, id_jurnal_produksi_ijp from t_penjaminan_ijp where id_penjaminan = :id_penjaminan ",
              {
                replacements: {
                  id_penjaminan: detail_pembatalan[0].id_penjaminan,
                },
                type: model.sequelize.QueryTypes.SELECT,
                quoteIdentifiers: true,
              }
            )
            .then(function (detail_ijp) {
              res.status(200).json({
                error: false,
                data: {
                  akseptasi: detail_pembatalan[0],
                  detail_ijp_akseptasi: detail_ijp,
                },
              });
            })
            .catch(function (params) {
              res.status(400).json({
                error: true,
                message: "something wrong, check your parameter!",
              });
            });
        });
    });
};

exports.getAllPembatalan = async function (req, res) {
  console.log(req.query.no_sertifikat);
  if (req.query.no_sertifikat) {
    detail_pembatalan = await model.sequelize
      .query(
        "SELECT b.nama_bank, a.id_penjaminan, a.kode_bank, a.transaction_id_bank, a.kode_cabang_bank, a.nama_cabang_bank, a.kode_cabang_askrindo, a.no_rekening_pinjaman, a.no_rek_lama, a.cif, a.no_perjanjian_kredit, a.no_pk_lama, a.tgl_pk, a.tgl_pk_lama, a.tgl_awal_pertanggungan, a.tgl_akhir_pertanggungan, a.jangka_waktu, a.nama_debitur, a.alamat_debitur, a.kode_pos, a.tempat_lahir, a.tgl_lahir, a.jenis_kelamin, a.no_telepon, a.no_hp_debitur, a.pendidikan, a.marital_status, a.jenis_identitas, a.no_id_debitur, a.npwp, a.no_ijin_usaha, a.tgl_mulai_usaha, a.modal_usaha, a.jumlah_tenaga_kerja, a.omset_usaha, a.kekayaan_bersih, a.jenis_pekerjaan, a.status_kepegawaian, a.jenis_kredit, a.plafond_kredit, a.bakidebet, a.nilai_pertanggungan, a.type_tujuan_kredit, a.suku_bunga_kredit, a.currency, a.sektor_ekonomi, a.coverage, a.kolektibilitas_kredit, a.loan_type, a.mekanisme_penyaluran, a.is_cac, a.sumber, a.no_sertifikat, a.tgl_sertifikat, a.tgl_rekam_sertifikat, a.rate, a.total_ijp, a.status_penjaminan_id, a.jenis_pengajuan, a.no_sertifikat_sebelumnya, a.no_pks, a.keterangan, a.version, a.created_by, a.created_date, a.modified_by, a.modified_date, a.plafon_disetujui, a.alasan_penolakan, a.no_reg_air, a.ket_audit_trail, a.exception_flag, a.status_sikp, a.is_cancel, a.status_update_sikp, a.jangka_waktu_hari, a.status_cetak, a.id_penjaminan_prev, a.is_penagihan, a.persetujuan_bank, a.is_proses_approval, a.tgl_endorse, a.tgl_surat_pembatalan, a.no_surat_pembatalan, a.jenis_pembatalan from t_penjaminan a, m_bank b where a.kode_bank = b.kode_bank and (a.no_sertifikat = :no_sertifikat or a.no_sertifikat like :no_sertifikat_like) order by a.id_penjaminan",
        {
          replacements: {
            no_sertifikat: req.query.no_sertifikat,
            no_sertifikat_like: req.query.no_sertifikat + "%",
            limit: req.query.limit,
            offset: req.query.limit * (req.query.page - 1),
          },
          type: model.sequelize.QueryTypes.SELECT,
          quoteIdentifiers: true,
        }
      )
      .then(async function (detail_pembatalan) {
        if (!detail_pembatalan[0]) {
          detail_pembatalan.push({ id_penjaminan: null });
        }
        check_endorsement = await model.sequelize
          .query(
            "SELECT id_penjaminan, kode_bank, transaction_id_bank, kode_cabang_bank, nama_cabang_bank, kode_cabang_askrindo, no_rekening_pinjaman, no_rek_lama, cif, no_perjanjian_kredit, no_pk_lama, tgl_pk, tgl_pk_lama, tgl_awal_pertanggungan, tgl_akhir_pertanggungan, jangka_waktu, nama_debitur, alamat_debitur, kode_pos, tempat_lahir, tgl_lahir, jenis_kelamin, no_telepon, no_hp_debitur, pendidikan, marital_status, jenis_identitas, no_id_debitur, npwp, no_ijin_usaha, tgl_mulai_usaha, modal_usaha, jumlah_tenaga_kerja, omset_usaha, kekayaan_bersih, jenis_pekerjaan, status_kepegawaian, jenis_kredit, plafond_kredit, bakidebet, nilai_pertanggungan, type_tujuan_kredit, suku_bunga_kredit, currency, sektor_ekonomi, coverage, kolektibilitas_kredit, loan_type, mekanisme_penyaluran, is_cac, sumber, no_sertifikat, tgl_sertifikat, tgl_rekam_sertifikat, rate, total_ijp, status_penjaminan_id, jenis_pengajuan, no_sertifikat_sebelumnya, no_pks, keterangan, version, created_by, created_date, modified_by, modified_date, plafon_disetujui, alasan_penolakan, no_reg_air, ket_audit_trail, exception_flag, status_sikp, is_cancel, status_update_sikp, jangka_waktu_hari, status_cetak, id_penjaminan_prev, is_penagihan, persetujuan_bank, is_proses_approval, tgl_endorse, tgl_surat_pembatalan, no_surat_pembatalan, jenis_pembatalan from t_penjaminan where id_penjaminan_prev = :id_penjaminan_asli order by id_penjaminan",
            {
              replacements: {
                id_penjaminan_asli: detail_pembatalan[0].id_penjaminan,
              },
              type: model.sequelize.QueryTypes.SELECT,
              quoteIdentifiers: true,
            }
          )
          .then(async function (check_endorsement) {
            count_pembatalan = await model.sequelize
              .query(
                "SELECT count(id_penjaminan) as count from t_penjaminan where is_proses_approval = true",
                {
                  type: model.sequelize.QueryTypes.SELECT,
                  quoteIdentifiers: true,
                }
              )
              .then(async function (count_pembatalan) {
                if (check_endorsement[0]) {
                  if (check_endorsement[0].is_proses_approval == true) {
                    res.status(200).json({
                      error: false,
                      //count: count_pembatalan[0].count,
                      count: 1,
                      data: detail_pembatalan,
                    });
                  } else {
                    res.status(200).json({
                      error: false,
                      // count: count_pembatalan[0].count,
                      count: 0,
                      data: [],
                    });
                  }
                } else {
                  if (detail_pembatalan[0].is_proses_approval == true) {
                    res.status(200).json({
                      error: false,
                      // count: count_pembatalan[0].count,
                      count: 1,
                      data: detail_pembatalan,
                    });
                  } else {
                    res.status(200).json({
                      error: false,
                      // count: count_pembatalan[0].count,
                      count: 0,
                      data: [],
                    });
                  }
                }
              })
              .catch(function (params) {
                res.status(400).json({
                  error: true,
                  message: "something wrong, check your parameter!",
                });
              });
          });
      });
  } else {
    detail_pembatalan = await model.sequelize
      .query(
        "SELECT b.nama_bank, a.id_penjaminan, a.kode_bank, a.transaction_id_bank, a.kode_cabang_bank, a.nama_cabang_bank, a.kode_cabang_askrindo, a.no_rekening_pinjaman, a.no_rek_lama, a.cif, a.no_perjanjian_kredit, a.no_pk_lama, a.tgl_pk, a.tgl_pk_lama, a.tgl_awal_pertanggungan, a.tgl_akhir_pertanggungan, a.jangka_waktu, a.nama_debitur, a.alamat_debitur, a.kode_pos, a.tempat_lahir, a.tgl_lahir, a.jenis_kelamin, a.no_telepon, a.no_hp_debitur, a.pendidikan, a.marital_status, a.jenis_identitas, a.no_id_debitur, a.npwp, a.no_ijin_usaha, a.tgl_mulai_usaha, a.modal_usaha, a.jumlah_tenaga_kerja, a.omset_usaha, a.kekayaan_bersih, a.jenis_pekerjaan, a.status_kepegawaian, a.jenis_kredit, a.plafond_kredit, a.bakidebet, a.nilai_pertanggungan, a.type_tujuan_kredit, a.suku_bunga_kredit, a.currency, a.sektor_ekonomi, a.coverage, a.kolektibilitas_kredit, a.loan_type, a.mekanisme_penyaluran, a.is_cac, a.sumber, a.no_sertifikat, a.tgl_sertifikat, a.tgl_rekam_sertifikat, a.rate, a.total_ijp, a.status_penjaminan_id, a.jenis_pengajuan, a.no_sertifikat_sebelumnya, a.no_pks, a.keterangan, a.version, a.created_by, a.created_date, a.modified_by, a.modified_date, a.plafon_disetujui, a.alasan_penolakan, a.no_reg_air, a.ket_audit_trail, a.exception_flag, a.status_sikp, a.is_cancel, a.status_update_sikp, a.jangka_waktu_hari, a.status_cetak, a.id_penjaminan_prev, a.is_penagihan, a.persetujuan_bank, a.is_proses_approval, a.tgl_endorse, a.tgl_surat_pembatalan, a.no_surat_pembatalan, a.jenis_pembatalan from t_penjaminan a, m_bank b where a.kode_bank = b.kode_bank and a.is_proses_approval = true order by a.modified_date desc NULLS LAST offset :offset limit :limit",
        {
          replacements: {
            limit: req.query.limit,
            offset: req.query.limit * (req.query.page - 1),
          },
          type: model.sequelize.QueryTypes.SELECT,
          quoteIdentifiers: true,
        }
      )
      .then(async function (detail_pembatalan) {
        count_pembatalan = await model.sequelize
          .query(
            "SELECT count(id_penjaminan) as count from t_penjaminan where is_proses_approval = true",
            {
              type: model.sequelize.QueryTypes.SELECT,
              quoteIdentifiers: true,
            }
          )
          .then(async function (count_pembatalan) {
            res.status(200).json({
              error: false,
              count: count_pembatalan[0].count,
              data: detail_pembatalan,
            });
          })
          .catch(function (params) {
            res.status(400).json({
              error: true,
              message: "something wrong, check your parameter!",
            });
          });
      });
  }
};

exports.approvalPembatalan = async function (req, res) {
  if (req.query.status == 0) {
    check_endorsement = await model.sequelize
      .query(
        "SELECT id_penjaminan, kode_bank, transaction_id_bank, kode_cabang_bank, nama_cabang_bank, kode_cabang_askrindo, no_rekening_pinjaman, no_rek_lama, cif, no_perjanjian_kredit, no_pk_lama, tgl_pk, tgl_pk_lama, tgl_awal_pertanggungan, tgl_akhir_pertanggungan, jangka_waktu, nama_debitur, alamat_debitur, kode_pos, tempat_lahir, tgl_lahir, jenis_kelamin, no_telepon, no_hp_debitur, pendidikan, marital_status, jenis_identitas, no_id_debitur, npwp, no_ijin_usaha, tgl_mulai_usaha, modal_usaha, jumlah_tenaga_kerja, omset_usaha, kekayaan_bersih, jenis_pekerjaan, status_kepegawaian, jenis_kredit, plafond_kredit, bakidebet, nilai_pertanggungan, type_tujuan_kredit, suku_bunga_kredit, currency, sektor_ekonomi, coverage, kolektibilitas_kredit, loan_type, mekanisme_penyaluran, is_cac, sumber, no_sertifikat, tgl_sertifikat, tgl_rekam_sertifikat, rate, total_ijp, status_penjaminan_id, jenis_pengajuan, no_sertifikat_sebelumnya, no_pks, keterangan, version, created_by, created_date, modified_by, modified_date, plafon_disetujui, alasan_penolakan, no_reg_air, ket_audit_trail, exception_flag, status_sikp, is_cancel, status_update_sikp, jangka_waktu_hari, status_cetak, id_penjaminan_prev, is_penagihan, persetujuan_bank, is_proses_approval, tgl_endorse, tgl_surat_pembatalan, no_surat_pembatalan, jenis_pembatalan from t_penjaminan where id_penjaminan_prev = :id_penjaminan",
        {
          replacements: { id_penjaminan: req.query.id_penjaminan },
          type: model.sequelize.QueryTypes.SELECT,
          quoteIdentifiers: true,
        }
      )
      .then(async function (check_endorsement) {
        if (check_endorsement[0]) {
          delete_endorsement = await model.sequelize
            .query(
              "DELETE FROM t_penjaminan WHERE id_penjaminan = :id_penjaminan; DELETE FROM t_penjaminan_ijp WHERE id_penjaminan = :id_penjaminan; update t_penjaminan set jenis_pembatalan = null, is_proses_approval = false where id_penjaminan = :id_penjaminan_asli;",
              {
                replacements: {
                  id_penjaminan: check_endorsement[0].id_penjaminan,
                  id_penjaminan_asli: req.query.id_penjaminan,
                },
                type: model.sequelize.QueryTypes.DELETE,
                quoteIdentifiers: true,
              }
            )
            .then(function (delete_endorsement) {
              res.status(200).json({
                error: false,
                message:
                  "Data Pengajuan Pembatalan Dengan Endorsement Berhasil ditolak!",
              });
            })
            .catch(function () {
              res.status(400).json({
                error: true,
                message: "Something wrong, try again later!",
              });
            });
        } else {
          update_pembatalan = await model.sequelize
            .query(
              "SET TIMEZONE='Asia/Bangkok'; update t_penjaminan set tgl_surat_pembatalan = null, no_surat_pembatalan = null, dokumen_pembatalan = null, is_proses_approval = false, jenis_pembatalan = null, is_cancel = false, ket_audit_trail = null, modified_date = now() where id_penjaminan = :id_penjaminan",
              {
                replacements: { id_penjaminan: req.query.id_penjaminan },
                type: model.sequelize.QueryTypes.UPDATE,
                quoteIdentifiers: true,
              }
            )
            .then(function (delete_endorsement) {
              res.status(200).json({
                error: false,
                message: "Data Pengajuan Pembatalan Berhasil ditolak!",
              });
            })
            .catch(function () {
              res.status(400).json({
                error: true,
                message: "Something wrong, try again later!",
              });
            });
        }
      });
  } else if (req.query.status == 1) {
    check_endorsement = await model.sequelize
      .query(
        "SELECT id_penjaminan, kode_bank, transaction_id_bank, kode_cabang_bank, nama_cabang_bank, kode_cabang_askrindo, no_rekening_pinjaman, no_rek_lama, cif, no_perjanjian_kredit, no_pk_lama, tgl_pk, tgl_pk_lama, tgl_awal_pertanggungan, tgl_akhir_pertanggungan, jangka_waktu, nama_debitur, alamat_debitur, kode_pos, tempat_lahir, tgl_lahir, jenis_kelamin, no_telepon, no_hp_debitur, pendidikan, marital_status, jenis_identitas, no_id_debitur, npwp, no_ijin_usaha, tgl_mulai_usaha, modal_usaha, jumlah_tenaga_kerja, omset_usaha, kekayaan_bersih, jenis_pekerjaan, status_kepegawaian, jenis_kredit, plafond_kredit, bakidebet, nilai_pertanggungan, type_tujuan_kredit, suku_bunga_kredit, currency, sektor_ekonomi, coverage, kolektibilitas_kredit, loan_type, mekanisme_penyaluran, is_cac, sumber, no_sertifikat, tgl_sertifikat, tgl_rekam_sertifikat, rate, total_ijp, status_penjaminan_id, jenis_pengajuan, no_sertifikat_sebelumnya, no_pks, keterangan, version, created_by, created_date, modified_by, modified_date, plafon_disetujui, alasan_penolakan, no_reg_air, ket_audit_trail, exception_flag, status_sikp, is_cancel, status_update_sikp, jangka_waktu_hari, status_cetak, id_penjaminan_prev, is_penagihan, persetujuan_bank, is_proses_approval, tgl_endorse, tgl_surat_pembatalan, no_surat_pembatalan, jenis_pembatalan from t_penjaminan where id_penjaminan_prev = :id_penjaminan",
        {
          replacements: { id_penjaminan: req.query.id_penjaminan },
          type: model.sequelize.QueryTypes.SELECT,
          quoteIdentifiers: true,
        }
      )
      .then(async function (check_endorsement) {
        if (check_endorsement[0]) {
          get_no_sertifikat = await model.sequelize
            .query(
              "SELECT a.no_sertifikat, b.tahun_ke, b.penjaminan_ijp_id from t_penjaminan a, t_penjaminan_ijp b where a.id_penjaminan = :id_penjaminan and a.id_penjaminan = b.id_penjaminan order by b.tahun_ke",
              {
                replacements: { id_penjaminan: req.query.id_penjaminan },
                type: model.sequelize.QueryTypes.SELECT,
                quoteIdentifiers: true,
              }
            )
            .then(async function (get_no_sertifikat) {
              get_ijp_endorse = await model.sequelize
                .query(
                  "select * from t_penjaminan_ijp where id_penjaminan = :id_penjaminan",
                  {
                    replacements: {
                      id_penjaminan: check_endorsement[0].id_penjaminan,
                    },
                    type: model.sequelize.QueryTypes.SELECT,
                    quoteIdentifiers: true,
                  }
                )
                .then(async function (get_ijp_endorse) {
                  update_pembatalan_approve = await model.sequelize
                    .query(
                      "SET TIMEZONE='Asia/Bangkok'; update t_penjaminan set tgl_sertifikat = now(), tgl_rekam_sertifikat = now(), no_sertifikat = :no_sertifikat_endorse, no_sertifikat_sebelumnya = :no_sertifikat, status_penjaminan_id = 3, is_proses_approval = false, is_cancel = true, keterangan = 'Batal' where id_penjaminan = :id_penjaminan; update t_penjaminan set is_proses_approval = false, keterangan = 'Batal' where id_penjaminan = :id_penjaminan_asli;",
                      {
                        replacements: {
                          id_penjaminan: check_endorsement[0].id_penjaminan,
                          id_penjaminan_asli: req.query.id_penjaminan,
                          no_sertifikat_endorse:
                            get_no_sertifikat[0].no_sertifikat.substring(
                              0,
                              23
                            ) + "3",
                          no_sertifikat: get_no_sertifikat[0].no_sertifikat,
                        },
                        type: model.sequelize.QueryTypes.UPDATE,
                        quoteIdentifiers: true,
                      }
                    )
                    .then(async function (update_pembatalan_approve) {
                      var jatuh_tempo = dateFormat(new Date(), "dd");
                      if (jatuh_tempo >= 15) {
                        if (
                          padWithZeroes(+dateFormat(new Date(), "mm") + 1, 2) >
                          12
                        ) {
                          jatuh_tempo =
                            +dateFormat(new Date(), "yyyy") +
                            1 +
                            padWithZeroes(
                              +dateFormat(new Date(), "mm") + 1 - 12,
                              2
                            ) +
                            "15";
                        } else {
                          jatuh_tempo =
                            dateFormat(new Date(), "yyyy") +
                            padWithZeroes(
                              +dateFormat(new Date(), "mm") + 1,
                              2
                            ) +
                            "15";
                        }
                      } else {
                        jatuh_tempo = dateFormat(new Date(), "yyyymm") + "15";
                      }
                      get_ijp_endorse.forEach(async (data, i) => {
                        update_tgl_ijp = await model.sequelize
                          .query(
                            "SET TIMEZONE='Asia/Bangkok'; update t_penjaminan_ijp set tgl_premi = now() + interval '" +
                              (data.tahun_ke - 1) +
                              " year', jatuh_tempo = :jatuh_tempo::date + interval '" +
                              (data.tahun_ke - 1) +
                              " year' where penjaminan_ijp_id = :penjaminan_ijp_id;",
                            {
                              replacements: {
                                penjaminan_ijp_id: data.penjaminan_ijp_id,
                                jatuh_tempo: jatuh_tempo,
                              },
                              type: model.sequelize.QueryTypes.UPDATE,
                              quoteIdentifiers: true,
                            }
                          )
                          .then(async function (update_tgl_ijp) {
                            if (get_ijp_endorse.length - 1 == i) {
                              res.status(200).json({
                                error: false,
                                message:
                                  "Data Pembatalan Dengan Endorsement Berhasil diapprove!",
                              });
                            }
                          })
                          .catch(function () {
                            res.status(400).json({
                              error: true,
                              message: "Something wrong, try again later!",
                            });
                          });
                      });
                    })
                    .catch(function () {
                      res.status(400).json({
                        error: true,
                        message: "Something wrong, try again later!",
                      });
                    });
                });
            });
        } else {
          get_t_penjaminan = await model.sequelize
            .query(
              "select * from t_penjaminan where id_penjaminan = :id_penjaminan",
              {
                replacements: { id_penjaminan: req.query.id_penjaminan },
                type: model.sequelize.QueryTypes.SELECT,
                quoteIdentifiers: true,
              }
            )
            .then(async function (get_t_penjaminan) {
              get_t_penjaminan_ijp = await model.sequelize
                .query(
                  "select * from t_penjaminan_ijp where id_penjaminan = :id_penjaminan",
                  {
                    replacements: { id_penjaminan: req.query.id_penjaminan },
                    type: model.sequelize.QueryTypes.SELECT,
                    quoteIdentifiers: true,
                  }
                )
                .then(async function (get_t_penjaminan_ijp) {
                  var belum_laporan =
                    get_t_penjaminan[0].status_sikp != 3 ||
                    get_t_penjaminan_ijp[0].status_sikp == false;
                  var sudah_laporan =
                    get_t_penjaminan[0].status_sikp == 3 ||
                    get_t_penjaminan_ijp[0].status_sikp == true;
                  var sudah_dibayar = false;
                  if (
                    get_t_penjaminan_ijp.find(
                      (o) => o.id_jurnal_produksi_ijp !== null
                    )
                  ) {
                    sudah_dibayar = true;
                  } else {
                    sudah_dibayar = false;
                  }

                  if (sudah_dibayar) {
                    var no_sertifikat_endorse;

                    if (!get_t_penjaminan[0].no_sertifikat) {
                      no_sertifikat_endorse = null;
                    } else {
                      if (!get_t_penjaminan[0].transaction_id_bank) {
                        get_t_penjaminan[0].transaction_id_bank = null;
                      } else {
                        get_t_penjaminan[0].transaction_id_bank =
                          "'" + get_t_penjaminan[0].transaction_id_bank + "'";
                      }
                      if (!get_t_penjaminan[0].kode_bank) {
                        get_t_penjaminan[0].kode_bank = null;
                      } else {
                        get_t_penjaminan[0].kode_bank =
                          "'" + get_t_penjaminan[0].kode_bank + "'";
                      }
                      if (!get_t_penjaminan[0].kode_cabang_bank) {
                        get_t_penjaminan[0].kode_cabang_bank = null;
                      } else {
                        get_t_penjaminan[0].kode_cabang_bank =
                          "'" + get_t_penjaminan[0].kode_cabang_bank + "'";
                      }
                      if (!get_t_penjaminan[0].nama_cabang_bank) {
                        get_t_penjaminan[0].nama_cabang_bank = null;
                      } else {
                        get_t_penjaminan[0].nama_cabang_bank =
                          "'" + get_t_penjaminan[0].nama_cabang_bank + "'";
                      }
                      if (!get_t_penjaminan[0].no_rekening_pinjaman) {
                        get_t_penjaminan[0].no_rekening_pinjaman = null;
                      } else {
                        get_t_penjaminan[0].no_rekening_pinjaman =
                          "'" +
                          get_t_penjaminan[0].no_rekening_pinjaman.replace(
                            /[^0-9a-z]/gi,
                            ""
                          ) +
                          "'";
                      }
                      if (!get_t_penjaminan[0].no_rek_lama) {
                        get_t_penjaminan[0].no_rek_lama = null;
                      } else {
                        get_t_penjaminan[0].no_rek_lama =
                          "'" + get_t_penjaminan[0].no_rek_lama + "'";
                      }
                      if (!get_t_penjaminan[0].cif) {
                        get_t_penjaminan[0].cif = null;
                      } else {
                        get_t_penjaminan[0].cif =
                          "'" + get_t_penjaminan[0].cif + "'";
                      }
                      if (!get_t_penjaminan[0].no_perjanjian_kredit) {
                        get_t_penjaminan[0].no_perjanjian_kredit = null;
                      } else {
                        get_t_penjaminan[0].no_perjanjian_kredit =
                          "'" + get_t_penjaminan[0].no_perjanjian_kredit + "'";
                      }
                      if (!get_t_penjaminan[0].no_pk_lama) {
                        get_t_penjaminan[0].no_pk_lama = null;
                      } else {
                        get_t_penjaminan[0].no_pk_lama =
                          "'" + get_t_penjaminan[0].no_pk_lama + "'";
                      }
                      if (!get_t_penjaminan[0].tgl_pk) {
                        get_t_penjaminan[0].tgl_pk = null;
                      } else {
                        get_t_penjaminan[0].tgl_pk =
                          "'" + get_t_penjaminan[0].tgl_pk + "'";
                      }
                      if (!get_t_penjaminan[0].tgl_pk_lama) {
                        get_t_penjaminan[0].tgl_pk_lama = null;
                      } else {
                        get_t_penjaminan[0].tgl_pk_lama =
                          "'" + get_t_penjaminan[0].tgl_pk_lama + "'";
                      }
                      if (!get_t_penjaminan[0].tgl_awal_pertanggungan) {
                        get_t_penjaminan[0].tgl_awal_pertanggungan = null;
                      } else {
                        get_t_penjaminan[0].tgl_awal_pertanggungan =
                          "'" +
                          get_t_penjaminan[0].tgl_awal_pertanggungan +
                          "'";
                      }
                      if (!get_t_penjaminan[0].tgl_akhir_pertanggungan) {
                        get_t_penjaminan[0].tgl_akhir_pertanggungan = null;
                      } else {
                        get_t_penjaminan[0].tgl_akhir_pertanggungan =
                          "'" +
                          get_t_penjaminan[0].tgl_akhir_pertanggungan +
                          "'";
                      }
                      if (!get_t_penjaminan[0].jangka_waktu) {
                        get_t_penjaminan[0].jangka_waktu = null;
                      } else {
                        get_t_penjaminan[0].jangka_waktu =
                          get_t_penjaminan[0].jangka_waktu;
                      }
                      if (!get_t_penjaminan[0].nama_debitur) {
                        get_t_penjaminan[0].nama_debitur = null;
                      } else {
                        get_t_penjaminan[0].nama_debitur =
                          get_t_penjaminan[0].nama_debitur;
                      }
                      if (!get_t_penjaminan[0].alamat_debitur) {
                        get_t_penjaminan[0].alamat_debitur = null;
                      } else {
                        get_t_penjaminan[0].alamat_debitur =
                          get_t_penjaminan[0].alamat_debitur;
                      }
                      if (!get_t_penjaminan[0].kode_pos) {
                        get_t_penjaminan[0].kode_pos = null;
                      } else {
                        get_t_penjaminan[0].kode_pos =
                          "'" + get_t_penjaminan[0].kode_pos + "'";
                      }
                      if (!get_t_penjaminan[0].tempat_lahir) {
                        get_t_penjaminan[0].tempat_lahir = null;
                      } else {
                        get_t_penjaminan[0].tempat_lahir =
                          "'" + get_t_penjaminan[0].tempat_lahir + "'";
                      }
                      if (!get_t_penjaminan[0].tgl_lahir) {
                        get_t_penjaminan[0].tgl_lahir = null;
                      } else {
                        get_t_penjaminan[0].tgl_lahir =
                          "'" + get_t_penjaminan[0].tgl_lahir + "'";
                      }
                      if (!get_t_penjaminan[0].jenis_kelamin) {
                        get_t_penjaminan[0].jenis_kelamin = null;
                      } else {
                        get_t_penjaminan[0].jenis_kelamin =
                          get_t_penjaminan[0].jenis_kelamin;
                      }
                      if (!get_t_penjaminan[0].no_telepon) {
                        get_t_penjaminan[0].no_telepon = null;
                      } else {
                        get_t_penjaminan[0].no_telepon =
                          "'" + get_t_penjaminan[0].no_telepon + "'";
                      }
                      if (!get_t_penjaminan[0].no_hp_debitur) {
                        get_t_penjaminan[0].no_hp_debitur = null;
                      } else {
                        get_t_penjaminan[0].no_hp_debitur =
                          "'" + get_t_penjaminan[0].no_hp_debitur + "'";
                      }
                      if (!get_t_penjaminan[0].pendidikan) {
                        get_t_penjaminan[0].pendidikan = null;
                      } else {
                        get_t_penjaminan[0].pendidikan =
                          get_t_penjaminan[0].pendidikan;
                      }
                      if (!get_t_penjaminan[0].marital_status) {
                        get_t_penjaminan[0].marital_status = null;
                      } else {
                        get_t_penjaminan[0].marital_status =
                          get_t_penjaminan[0].marital_status;
                      }
                      if (!get_t_penjaminan[0].jenis_identitas) {
                        get_t_penjaminan[0].jenis_identitas = null;
                      } else {
                        get_t_penjaminan[0].jenis_identitas =
                          "'" + get_t_penjaminan[0].jenis_identitas + "'";
                      }
                      if (!get_t_penjaminan[0].no_id_debitur) {
                        get_t_penjaminan[0].no_id_debitur = null;
                      } else {
                        get_t_penjaminan[0].no_id_debitur =
                          "'" + get_t_penjaminan[0].no_id_debitur + "'";
                      }
                      if (!get_t_penjaminan[0].npwp) {
                        get_t_penjaminan[0].npwp = null;
                      } else {
                        get_t_penjaminan[0].npwp =
                          "'" + get_t_penjaminan[0].npwp + "'";
                      }
                      if (!get_t_penjaminan[0].no_ijin_usaha) {
                        get_t_penjaminan[0].no_ijin_usaha = null;
                      } else {
                        get_t_penjaminan[0].no_ijin_usaha =
                          "'" + get_t_penjaminan[0].no_ijin_usaha + "'";
                      }
                      if (!get_t_penjaminan[0].tgl_mulai_usaha) {
                        get_t_penjaminan[0].tgl_mulai_usaha = null;
                      } else {
                        get_t_penjaminan[0].tgl_mulai_usaha =
                          "'" + get_t_penjaminan[0].tgl_mulai_usaha + "'";
                      }
                      if (
                        !get_t_penjaminan[0].modal_usaha &&
                        get_t_penjaminan[0].modal_usaha !== 0
                      ) {
                        get_t_penjaminan[0].modal_usaha = null;
                      } else {
                        get_t_penjaminan[0].modal_usaha =
                          get_t_penjaminan[0].modal_usaha;
                      }
                      if (
                        !get_t_penjaminan[0].jumlah_tenaga_kerja &&
                        get_t_penjaminan[0].jumlah_tenaga_kerja !== 0
                      ) {
                        get_t_penjaminan[0].jumlah_tenaga_kerja = null;
                      } else {
                        get_t_penjaminan[0].jumlah_tenaga_kerja =
                          get_t_penjaminan[0].jumlah_tenaga_kerja;
                      }
                      if (
                        !get_t_penjaminan[0].omset_usaha &&
                        get_t_penjaminan[0].omset_usaha !== 0
                      ) {
                        get_t_penjaminan[0].omset_usaha = null;
                      } else {
                        get_t_penjaminan[0].omset_usaha =
                          get_t_penjaminan[0].omset_usaha;
                      }
                      if (
                        !get_t_penjaminan[0].kekayaan_bersih &&
                        get_t_penjaminan[0].kekayaan_bersih !== 0
                      ) {
                        get_t_penjaminan[0].kekayaan_bersih = null;
                      } else {
                        get_t_penjaminan[0].kekayaan_bersih =
                          get_t_penjaminan[0].kekayaan_bersih;
                      }
                      if (!get_t_penjaminan[0].jenis_pekerjaan) {
                        get_t_penjaminan[0].jenis_pekerjaan = null;
                      } else {
                        get_t_penjaminan[0].jenis_pekerjaan =
                          get_t_penjaminan[0].jenis_pekerjaan;
                      }
                      if (!get_t_penjaminan[0].status_kepegawaian) {
                        get_t_penjaminan[0].status_kepegawaian = null;
                      } else {
                        get_t_penjaminan[0].status_kepegawaian =
                          "'" + get_t_penjaminan[0].status_kepegawaian + "'";
                      }
                      if (!get_t_penjaminan[0].jenis_kredit) {
                        get_t_penjaminan[0].jenis_kredit = null;
                      } else {
                        get_t_penjaminan[0].jenis_kredit =
                          "'" + get_t_penjaminan[0].jenis_kredit + "'";
                      }
                      if (
                        !get_t_penjaminan[0].plafond_kredit &&
                        get_t_penjaminan[0].plafond_kredit !== 0
                      ) {
                        get_t_penjaminan[0].plafond_kredit = null;
                      } else {
                        get_t_penjaminan[0].plafond_kredit =
                          get_t_penjaminan[0].plafond_kredit;
                      }
                      if (
                        !get_t_penjaminan[0].bakidebet &&
                        get_t_penjaminan[0].bakidebet !== 0
                      ) {
                        get_t_penjaminan[0].bakidebet = null;
                      } else {
                        get_t_penjaminan[0].bakidebet =
                          get_t_penjaminan[0].bakidebet;
                      }
                      if (!get_t_penjaminan[0].type_tujuan_kredit) {
                        get_t_penjaminan[0].type_tujuan_kredit = null;
                      } else {
                        get_t_penjaminan[0].type_tujuan_kredit =
                          "'" + get_t_penjaminan[0].type_tujuan_kredit + "'";
                      }
                      if (!get_t_penjaminan[0].suku_bunga_kredit) {
                        get_t_penjaminan[0].suku_bunga_kredit = null;
                      } else {
                        get_t_penjaminan[0].suku_bunga_kredit =
                          "'" + get_t_penjaminan[0].suku_bunga_kredit + "'";
                      }
                      if (!get_t_penjaminan[0].sektor_ekonomi) {
                        get_t_penjaminan[0].sektor_ekonomi = null;
                      } else {
                        get_t_penjaminan[0].sektor_ekonomi =
                          "'" + get_t_penjaminan[0].sektor_ekonomi + "'";
                      }
                      if (!get_t_penjaminan[0].coverage) {
                        get_t_penjaminan[0].coverage = null;
                      } else {
                        get_t_penjaminan[0].coverage =
                          get_t_penjaminan[0].coverage;
                      }
                      if (!get_t_penjaminan[0].kolektibilitas_kredit) {
                        get_t_penjaminan[0].kolektibilitas_kredit = null;
                      } else {
                        get_t_penjaminan[0].kolektibilitas_kredit =
                          "'" + get_t_penjaminan[0].kolektibilitas_kredit + "'";
                      }
                      if (!get_t_penjaminan[0].loan_type) {
                        get_t_penjaminan[0].loan_type = null;
                      } else {
                        get_t_penjaminan[0].loan_type =
                          "'" + get_t_penjaminan[0].loan_type + "'";
                      }
                      if (!get_t_penjaminan[0].jenis_pengajuan) {
                        get_t_penjaminan[0].jenis_pengajuan = null;
                      } else {
                        get_t_penjaminan[0].jenis_pengajuan =
                          "'" + get_t_penjaminan[0].jenis_pengajuan + "'";
                      }
                      if (!get_t_penjaminan[0].no_sertifikat_sebelumnya) {
                        get_t_penjaminan[0].no_sertifikat_sebelumnya = null;
                      } else {
                        get_t_penjaminan[0].no_sertifikat_sebelumnya =
                          "'" +
                          get_t_penjaminan[0].no_sertifikat_sebelumnya +
                          "'";
                      }
                      if (!get_t_penjaminan[0].no_pks) {
                        get_t_penjaminan[0].no_pks = null;
                      } else {
                        get_t_penjaminan[0].no_pks =
                          "'" + get_t_penjaminan[0].no_pks + "'";
                      }

                      if (!get_t_penjaminan[0].created_by) {
                        get_t_penjaminan[0].created_by = "'H2H API Direct'";
                      } else {
                        get_t_penjaminan[0].created_by =
                          "'" + get_t_penjaminan[0].created_by + "'";
                      }
                      if (!get_t_penjaminan[0].created_date) {
                        get_t_penjaminan[0].created_date = "'H2H API Direct'";
                      } else {
                        get_t_penjaminan[0].created_date =
                          "'" +
                          dateFormat(
                            new Date(get_t_penjaminan[0].created_date),
                            "yyyy-mm-dd hh:mm:ss"
                          ) +
                          "'";
                      }

                      no_sertifikat_endorse =
                        get_t_penjaminan[0].no_sertifikat.substring(0, 23) +
                        "3";
                      insert = await model.sequelize
                        .query(
                          "SET TIMEZONE='Asia/Bangkok'; INSERT INTO public.t_penjaminan(kode_bank, transaction_id_bank, kode_cabang_bank, nama_cabang_bank, kode_cabang_askrindo, no_rekening_pinjaman, no_rek_lama, cif, no_perjanjian_kredit, no_pk_lama, tgl_pk, tgl_pk_lama, tgl_awal_pertanggungan, tgl_akhir_pertanggungan, jangka_waktu, nama_debitur, alamat_debitur, kode_pos, tempat_lahir, tgl_lahir, jenis_kelamin, no_telepon, no_hp_debitur, pendidikan, marital_status, jenis_identitas, no_id_debitur, npwp, no_ijin_usaha, tgl_mulai_usaha, modal_usaha, jumlah_tenaga_kerja, omset_usaha, kekayaan_bersih, jenis_pekerjaan, status_kepegawaian, jenis_kredit, plafond_kredit, bakidebet, nilai_pertanggungan, type_tujuan_kredit, suku_bunga_kredit, currency, sektor_ekonomi, coverage, kolektibilitas_kredit, loan_type, mekanisme_penyaluran, is_cac, sumber, no_sertifikat, tgl_sertifikat, tgl_rekam_sertifikat, rate, total_ijp, status_penjaminan_id, jenis_pengajuan, no_sertifikat_sebelumnya, no_pks, keterangan, version, created_by, created_date, modified_by, modified_date, ket_audit_trail, is_cancel, jangka_waktu_hari, id_penjaminan_prev, jenis_pembatalan, is_proses_approval, dokumen_pembatalan, tgl_surat_pembatalan, no_surat_pembatalan, jenis_pen)VALUES(" +
                            get_t_penjaminan[0].kode_bank +
                            ", " +
                            get_t_penjaminan[0].transaction_id_bank +
                            ", " +
                            get_t_penjaminan[0].kode_cabang_bank +
                            ", " +
                            get_t_penjaminan[0].nama_cabang_bank +
                            ", " +
                            get_t_penjaminan[0].kode_cabang_askrindo +
                            ", " +
                            get_t_penjaminan[0].no_rekening_pinjaman +
                            ", " +
                            get_t_penjaminan[0].no_rek_lama +
                            ", " +
                            get_t_penjaminan[0].cif +
                            ", " +
                            get_t_penjaminan[0].no_perjanjian_kredit +
                            ", " +
                            get_t_penjaminan[0].no_pk_lama +
                            ", " +
                            get_t_penjaminan[0].tgl_pk +
                            ", " +
                            get_t_penjaminan[0].tgl_pk_lama +
                            ", " +
                            get_t_penjaminan[0].tgl_awal_pertanggungan +
                            ", " +
                            get_t_penjaminan[0].tgl_akhir_pertanggungan +
                            ", " +
                            get_t_penjaminan[0].jangka_waktu +
                            ", :nama_debitur, :alamat_debitur, " +
                            get_t_penjaminan[0].kode_pos +
                            ", " +
                            get_t_penjaminan[0].tempat_lahir +
                            ", " +
                            get_t_penjaminan[0].tgl_lahir +
                            ", " +
                            get_t_penjaminan[0].jenis_kelamin +
                            ", " +
                            get_t_penjaminan[0].no_telepon +
                            ", " +
                            get_t_penjaminan[0].no_hp_debitur +
                            ", " +
                            get_t_penjaminan[0].pendidikan +
                            ", " +
                            get_t_penjaminan[0].marital_status +
                            ", " +
                            get_t_penjaminan[0].jenis_identitas +
                            ", " +
                            get_t_penjaminan[0].no_id_debitur +
                            ", " +
                            get_t_penjaminan[0].npwp +
                            ", " +
                            get_t_penjaminan[0].no_ijin_usaha +
                            ", " +
                            get_t_penjaminan[0].tgl_mulai_usaha +
                            ", " +
                            get_t_penjaminan[0].modal_usaha +
                            ", " +
                            get_t_penjaminan[0].jumlah_tenaga_kerja +
                            ", " +
                            get_t_penjaminan[0].omset_usaha +
                            ", " +
                            get_t_penjaminan[0].kekayaan_bersih +
                            ", " +
                            get_t_penjaminan[0].jenis_pekerjaan +
                            ", " +
                            get_t_penjaminan[0].status_kepegawaian +
                            ", " +
                            get_t_penjaminan[0].jenis_kredit +
                            ", " +
                            -1 * get_t_penjaminan[0].plafond_kredit +
                            ", " +
                            get_t_penjaminan[0].bakidebet +
                            ", " +
                            -1 * get_t_penjaminan[0].nilai_pertanggungan +
                            ", " +
                            get_t_penjaminan[0].type_tujuan_kredit +
                            ", " +
                            get_t_penjaminan[0].suku_bunga_kredit +
                            ", 'IDR', " +
                            get_t_penjaminan[0].sektor_ekonomi +
                            ", " +
                            get_t_penjaminan[0].coverage +
                            ", " +
                            get_t_penjaminan[0].kolektibilitas_kredit +
                            ", " +
                            get_t_penjaminan[0].loan_type +
                            ", '1', " +
                            get_t_penjaminan[0].is_cac +
                            ", :sumber, '" +
                            no_sertifikat_endorse +
                            "', now(), now(), 0, " +
                            -1 * get_t_penjaminan[0].total_ijp +
                            ", :status_penjaminan_id, " +
                            get_t_penjaminan[0].jenis_pengajuan +
                            ", '" +
                            get_t_penjaminan[0].no_sertifikat +
                            "', " +
                            get_t_penjaminan[0].no_pks +
                            ", 'Batal', " +
                            get_t_penjaminan[0].version +
                            ", " +
                            get_t_penjaminan[0].created_by +
                            ", " +
                            get_t_penjaminan[0].created_date +
                            ", NULL, NULL, :alasan_pembatalan, true, " +
                            get_t_penjaminan[0].jangka_waktu_hari +
                            ", " +
                            get_t_penjaminan[0].id_penjaminan +
                            ", 3, false, :file, :tgl_surat_pembatalan, :no_surat_pembatalan, 'GEN2' ); SET TIMEZONE='Asia/Bangkok'; update t_penjaminan set jenis_pembatalan = 3, keterangan = 'Batal', is_proses_approval = false, dokumen_pembatalan = null, tgl_surat_pembatalan = null, no_surat_pembatalan = null where id_penjaminan = " +
                            get_t_penjaminan[0].id_penjaminan +
                            ";",
                          {
                            replacements: {
                              status_penjaminan_id: 3,
                              sumber: 3,
                              nama_debitur: get_t_penjaminan[0].nama_debitur,
                              alamat_debitur:
                                get_t_penjaminan[0].alamat_debitur,
                              alasan_pembatalan:
                                get_t_penjaminan[0].ket_audit_trail,
                              file: get_t_penjaminan[0].dokumen_pembatalan,
                              no_surat_pembatalan:
                                get_t_penjaminan[0].no_surat_pembatalan,
                              tgl_surat_pembatalan:
                                get_t_penjaminan[0].tgl_surat_pembatalan,
                            },
                            type: model.sequelize.QueryTypes.INSERT,
                            quoteIdentifiers: true,
                          }
                        )
                        .then(async function () {
                          var jatuh_tempo = dateFormat(new Date(), "dd");
                          if (jatuh_tempo >= 15) {
                            if (
                              padWithZeroes(
                                +dateFormat(new Date(), "mm") + 1,
                                2
                              ) > 12
                            ) {
                              jatuh_tempo =
                                +dateFormat(new Date(), "yyyy") +
                                1 +
                                padWithZeroes(
                                  +dateFormat(new Date(), "mm") + 1 - 12,
                                  2
                                ) +
                                "15";
                            } else {
                              jatuh_tempo =
                                dateFormat(new Date(), "yyyy") +
                                padWithZeroes(
                                  +dateFormat(new Date(), "mm") + 1,
                                  2
                                ) +
                                "15";
                            }
                          } else {
                            jatuh_tempo =
                              dateFormat(new Date(), "yyyymm") + "15";
                          }

                          get_id_baru = await model.sequelize
                            .query(
                              "SET TIMEZONE='Asia/Bangkok'; SELECT id_penjaminan, kode_bank, transaction_id_bank, kode_cabang_bank, nama_cabang_bank, kode_cabang_askrindo, no_rekening_pinjaman, no_rek_lama, cif, no_perjanjian_kredit, no_pk_lama, tgl_pk, tgl_pk_lama, tgl_awal_pertanggungan, tgl_akhir_pertanggungan, jangka_waktu, nama_debitur, alamat_debitur, kode_pos, tempat_lahir, tgl_lahir, jenis_kelamin, no_telepon, no_hp_debitur, pendidikan, marital_status, jenis_identitas, no_id_debitur, npwp, no_ijin_usaha, tgl_mulai_usaha, modal_usaha, jumlah_tenaga_kerja, omset_usaha, kekayaan_bersih, jenis_pekerjaan, status_kepegawaian, jenis_kredit, plafond_kredit, bakidebet, nilai_pertanggungan, type_tujuan_kredit, suku_bunga_kredit, currency, sektor_ekonomi, coverage, kolektibilitas_kredit, loan_type, mekanisme_penyaluran, is_cac, sumber, no_sertifikat, tgl_sertifikat, tgl_rekam_sertifikat, rate, total_ijp, status_penjaminan_id, jenis_pengajuan, no_sertifikat_sebelumnya, no_pks, keterangan, version, created_by, created_date, modified_by, modified_date, plafon_disetujui, alasan_penolakan, no_reg_air, ket_audit_trail, exception_flag, status_sikp, is_cancel, status_update_sikp, jangka_waktu_hari, status_cetak, id_penjaminan_prev, is_penagihan, persetujuan_bank, is_proses_approval, tgl_endorse, tgl_surat_pembatalan, no_surat_pembatalan, jenis_pembatalan from t_penjaminan where id_penjaminan_prev = :id_penjaminan;",
                              {
                                replacements: {
                                  id_penjaminan:
                                    get_t_penjaminan[0].id_penjaminan,
                                },
                                type: model.sequelize.QueryTypes.INSERT,
                                quoteIdentifiers: true,
                              }
                            )
                            .then(function (get_id_baru) {
                              get_t_penjaminan_ijp.forEach((val, i) => {
                                setTimeout(async function (id_prev) {
                                  ijp = await model.sequelize
                                    .query(
                                      "SET TIMEZONE='Asia/Bangkok'; INSERT INTO public.t_penjaminan_ijp(id_penjaminan, tahun_ke, tgl_premi, premi, jatuh_tempo, premi_dibayar, status_bayar, no_bukti_bayar, tgl_bayar, version, created_by, created_date, modified_by, modified_date, cadangan)VALUES(:id_penjaminan, :tahun_ke, now(), :premi, :jatuh_tempo::date + interval '" +
                                        (val.tahun_ke - 1) +
                                        " year', 0, false, NULL, NULL, 1, " +
                                        get_t_penjaminan[0].created_by +
                                        ", now(), NULL, NULL, :cadangan);",
                                      {
                                        replacements: {
                                          id_penjaminan:
                                            get_id_baru[0][0].id_penjaminan,
                                          tahun_ke: val.tahun_ke,
                                          premi: val.premi * -1,
                                          cadangan: val.cadangan * -1,
                                          jatuh_tempo: jatuh_tempo,
                                        },
                                        type: model.sequelize.QueryTypes.INSERT,
                                        quoteIdentifiers: true,
                                      }
                                    )
                                    .then(async function () {
                                      if (
                                        i ==
                                        get_t_penjaminan_ijp.length - 1
                                      ) {
                                        res.status(200).json({
                                          error: false,
                                          message:
                                            "Data Pembatalan Berhasil diapprove!",
                                        });
                                      }
                                    })
                                    .catch(function () {
                                      res.status(400).json({
                                        error: true,
                                        message:
                                          "Something wrong, try again later!",
                                      });
                                    });
                                }, i * 2000);
                              });
                            });
                        });
                    }
                  } else {
                    update_pembatalan_approve = await model.sequelize
                      .query(
                        "SET TIMEZONE='Asia/Bangkok'; update t_penjaminan set status_penjaminan_id = 4, is_proses_approval = false, keterangan = 'Batal', tgl_sertifikat = null, modified_date = now(), is_cancel = true where id_penjaminan = :id_penjaminan",
                        {
                          replacements: {
                            id_penjaminan: req.query.id_penjaminan,
                          },
                          type: model.sequelize.QueryTypes.UPDATE,
                          quoteIdentifiers: true,
                        }
                      )
                      .then(function (update_pembatalan_approve) {
                        res.status(200).json({
                          error: false,
                          message: "Data Pembatalan Berhasil diapprove!",
                        });
                      })
                      .catch(function () {
                        res.status(400).json({
                          error: true,
                          message: "Something wrong, try again later!",
                        });
                      });
                  }
                });
            });
        }
      });
  } else {
    res.status(400).json({
      error: true,
      message: "Something wrong, check your parameter!",
    });
  }
};

exports.postSIKPScheduler = async function (tgl_awal, tgl_akhir, status_sikp) {
  var agent;
  agentOptions = {
    host: "202.61.126.162",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };
  agent = new https.Agent(agentOptions);
  return new Promise((resolve) => {
    request(
      {
        url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
        // agent: agent,
        json: {
          username: "askrindo",
          password: "bzMjN9Wc8DeATBKh",
          // "password" :"development"
        },
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      },
      function (error, response, body) {
        if (error) {
          console.log(error);
        } else {
          console.log(body);
          if (body.data && body.data != "") {
            getPenjaminanByTanggalIJP(tgl_awal, tgl_akhir, status_sikp).then(
              function (params) {
                if (params) {
                  var sukses = 0;

                  var gagal = 0;
                  params.forEach((val, i) => {
                    setTimeout(function () {
                      if (status_sikp == 0) {
                        var substring_ktp;
                        var pendidikan;
                        getKodeKotaSIKP(val.kode_pos).then(
                          function (kode_sikp_get) {
                            if (kode_sikp_get.length == 0) {
                              substring_ktp = val.no_id_debitur.substring(0, 4);
                            } else {
                              substring_ktp = kode_sikp_get[0].kode_kabkota;
                            }
                            request(
                              {
                                url:
                                  "http://10.238.136.117/pen-umkm-dev/api/v1/Referensi/KabKota/" +
                                  substring_ktp,
                                // agent: agent,
                                method: "GET",
                                json: {},
                                headers: {
                                  "Content-Type": "application/json",
                                  Authorization: "Bearer " + body.data,
                                },
                              },
                              function (error2, response2, body2) {
                                if (error2) {
                                  console.log(error2);
                                } else {
                                  if (response2.statusCode != 200) {
                                    request(
                                      {
                                        url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                        // agent: agent,
                                        json: {
                                          username: "askrindo",
                                          password: "bzMjN9Wc8DeATBKh",
                                          // "password" :"development"
                                        },
                                        method: "POST",
                                        headers: {
                                          "Content-Type": "application/json",
                                        },
                                      },
                                      function (
                                        errorfix,
                                        responsefix,
                                        bodyfix
                                      ) {
                                        if (errorfix) {
                                          console.log(errorfix);
                                        } else {
                                          body.data = bodyfix.data;
                                          console.log("REFRESH TOKEN");
                                        }
                                      }
                                    );
                                  } else if (body2.code === "51") {
                                    console.log(body2);
                                    getAgunan(val.id_penjaminan).then(function (
                                      agunan
                                    ) {
                                      var uraian_agunan = "";
                                      if (agunan.length === 0) {
                                        uraian_agunan = null;
                                      } else {
                                        uraian_agunan = agunan[0].label;
                                      }
                                      console.log({
                                        nik: val.no_id_debitur,
                                        nama: val.nama_debitur,
                                        tgl_lahir: new Date(val.tgl_lahir),
                                        jns_kelamin: val.jenis_kelamin,
                                        maritas_sts: val.marital_status,
                                        pendidikan: val.pendidikan,
                                        pekerjaan: val.jenis_pekerjaan,
                                        jns_debitur: "R",
                                        alamat: val.alamat_debitur,
                                        kode_kabkota: body2.data.kode,
                                        kode_pos: val.kode_pos,
                                        npwp: val.npwp.replace(
                                          /[^0-9a-z]/gi,
                                          ""
                                        ),
                                        mulai_usaha: new Date(
                                          val.tgl_mulai_usaha
                                        ),
                                        alamat_usaha: val.alamat_debitur,
                                        ijin_usaha: val.no_ijin_usaha,
                                        modal_usaha: val.modal_usaha,
                                        jml_pekerja: 1,
                                        jml_kredit: val.plafond_kredit,
                                        no_hp: val.no_hp_debitur,
                                        uraian_agunan: uraian_agunan,
                                      });
                                      var tgl_lahir;
                                      if (val.jenis_kelamin == "9") {
                                        tgl_lahir = null;
                                      } else {
                                        tgl_lahir = new Date(val.tgl_lahir);
                                      }
                                      if (val.npwp) {
                                        val.npwp = val.npwp.replace(
                                          /[^0-9a-z]/gi,
                                          ""
                                        );
                                      } else {
                                        val.npwp = null;
                                      }
                                      request(
                                        {
                                          url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon",
                                          // agent: agent,
                                          json: {
                                            nik: val.no_id_debitur,
                                            nama: val.nama_debitur,
                                            tgl_lahir: tgl_lahir,
                                            jns_kelamin: val.jenis_kelamin,
                                            maritas_sts: val.marital_status,
                                            pendidikan: val.pendidikan,
                                            pekerjaan: val.jenis_pekerjaan,
                                            jns_debitur: "R",
                                            alamat: val.alamat_debitur,
                                            kode_kabkota: body2.data.kode,
                                            kode_pos: val.kode_pos,
                                            npwp: val.npwp,
                                            mulai_usaha: new Date(
                                              val.tgl_mulai_usaha
                                            ),
                                            alamat_usaha: val.alamat_debitur,
                                            ijin_usaha: val.no_ijin_usaha,
                                            modal_usaha: val.modal_usaha,
                                            jml_pekerja: 1,
                                            jml_kredit: val.plafond_kredit,
                                            no_hp: val.no_hp_debitur,
                                            uraian_agunan: uraian_agunan,
                                          },
                                          method: "POST",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (error3, response3, body3) {
                                          if (error3) {
                                            console.log(error3);
                                          } else {
                                            console.log(body3);
                                            if (response3.statusCode != 200) {
                                              request(
                                                {
                                                  url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                                  // agent: agent,
                                                  json: {
                                                    username: "askrindo",
                                                    password:
                                                      "bzMjN9Wc8DeATBKh",
                                                    // "password" :"development"
                                                  },
                                                  method: "POST",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                  },
                                                },
                                                function (
                                                  errorfix,
                                                  responsefix,
                                                  bodyfix
                                                ) {
                                                  if (errorfix) {
                                                    console.log(errorfix);
                                                  } else {
                                                    body.data = bodyfix.data;
                                                    console.log(
                                                      "REFRESH TOKEN"
                                                    );
                                                    request(
                                                      {
                                                        url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon",
                                                        // agent: agent,
                                                        json: {
                                                          nik: val.no_id_debitur,
                                                          nama: val.nama_debitur,
                                                          tgl_lahir: tgl_lahir,
                                                          jns_kelamin:
                                                            val.jenis_kelamin,
                                                          maritas_sts:
                                                            val.marital_status,
                                                          pendidikan:
                                                            val.pendidikan,
                                                          pekerjaan:
                                                            val.jenis_pekerjaan,
                                                          jns_debitur: "R",
                                                          alamat:
                                                            val.alamat_debitur,
                                                          kode_kabkota:
                                                            body2.data.kode,
                                                          kode_pos:
                                                            val.kode_pos,
                                                          npwp: val.npwp,
                                                          mulai_usaha: new Date(
                                                            val.tgl_mulai_usaha
                                                          ),
                                                          alamat_usaha:
                                                            val.alamat_debitur,
                                                          ijin_usaha:
                                                            val.no_ijin_usaha,
                                                          modal_usaha:
                                                            val.modal_usaha,
                                                          jml_pekerja: 1,
                                                          jml_kredit:
                                                            val.plafond_kredit,
                                                          no_hp:
                                                            val.no_hp_debitur,
                                                          uraian_agunan:
                                                            uraian_agunan,
                                                        },
                                                        method: "POST",
                                                        headers: {
                                                          "Content-Type":
                                                            "application/json",
                                                          Authorization:
                                                            "Bearer " +
                                                            body.data,
                                                        },
                                                      },
                                                      function (
                                                        error3re,
                                                        response3re,
                                                        body3re
                                                      ) {
                                                        if (error3) {
                                                          console.log(error3re);
                                                        } else {
                                                          console.log(body3re);

                                                          if (
                                                            body3re.code ===
                                                            "00"
                                                          ) {
                                                            if (
                                                              i ==
                                                              params.length - 1
                                                            ) {
                                                              sukses++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              updateStatusSIKPPenjaminan(
                                                                val.id_penjaminan,
                                                                1,
                                                                val.no_id_debitur
                                                              ).then(
                                                                function () {
                                                                  if (
                                                                    params.length -
                                                                      1 ==
                                                                    i
                                                                  ) {
                                                                    resolve(
                                                                      "POST SIKP CALON SUKSES!"
                                                                    );
                                                                  }
                                                                }
                                                              );
                                                            } else {
                                                              sukses++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              updateStatusSIKPPenjaminan(
                                                                val.id_penjaminan,
                                                                1,
                                                                val.no_id_debitur
                                                              ).then(
                                                                function () {
                                                                  if (
                                                                    params.length -
                                                                      1 ==
                                                                    i
                                                                  ) {
                                                                    resolve(
                                                                      "POST SIKP CALON SUKSES!"
                                                                    );
                                                                  }
                                                                }
                                                              );
                                                            }
                                                          } else {
                                                            if (
                                                              i ==
                                                              params.length - 1
                                                            ) {
                                                              gagal++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              //insert calon gagal
                                                              insertLogSIKP(
                                                                val.id_penjaminan,
                                                                val.no_rekening_pinjaman,
                                                                val.transaction_id_bank,
                                                                val.tgl_premi,
                                                                val.no_sertifikat,
                                                                val.no_id_debitur,
                                                                0,
                                                                body3re.message
                                                              ).then(
                                                                function () {
                                                                  if (
                                                                    params.length -
                                                                      1 ==
                                                                    i
                                                                  ) {
                                                                    resolve(
                                                                      "POST SIKP CALON GAGAL!"
                                                                    );
                                                                  }
                                                                }
                                                              );
                                                            } else {
                                                              gagal++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              //insert calon gagal
                                                              insertLogSIKP(
                                                                val.id_penjaminan,
                                                                val.no_rekening_pinjaman,
                                                                val.transaction_id_bank,
                                                                val.tgl_premi,
                                                                val.no_sertifikat,
                                                                val.no_id_debitur,
                                                                0,
                                                                body3re.message
                                                              ).then(
                                                                function () {
                                                                  if (
                                                                    params.length -
                                                                      1 ==
                                                                    i
                                                                  ) {
                                                                    resolve(
                                                                      "POST SIKP CALON GAGAL!"
                                                                    );
                                                                  }
                                                                }
                                                              );
                                                            }
                                                          }
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            } else if (body3.code === "00") {
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPPenjaminan(
                                                  val.id_penjaminan,
                                                  1,
                                                  val.no_id_debitur
                                                ).then(function () {
                                                  if (params.length - 1 == i) {
                                                    resolve(
                                                      "POST SIKP CALON SUKSES!"
                                                    );
                                                  }
                                                });
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPPenjaminan(
                                                  val.id_penjaminan,
                                                  1,
                                                  val.no_id_debitur
                                                ).then(function () {
                                                  if (params.length - 1 == i) {
                                                    resolve(
                                                      "POST SIKP CALON SUKSES!"
                                                    );
                                                  }
                                                });
                                              }
                                            } else {
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  0,
                                                  body3.message
                                                ).then(function () {
                                                  if (params.length - 1 == i) {
                                                    resolve(
                                                      "POST SIKP CALON GAGAL!"
                                                    );
                                                  }
                                                });
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  0,
                                                  body3.message
                                                ).then(function () {
                                                  if (params.length - 1 == i) {
                                                    resolve(
                                                      "POST SIKP CALON GAGAL!"
                                                    );
                                                  }
                                                });
                                              }
                                            }
                                          }
                                        }
                                      );
                                    });
                                  } else {
                                    gagal++;
                                    console.log(
                                      "Calon sukses = " +
                                        sukses +
                                        " & gagal = " +
                                        gagal
                                    );
                                    insertLogSIKP(
                                      val.id_penjaminan,
                                      val.no_rekening_pinjaman,
                                      val.transaction_id_bank,
                                      val.tgl_premi,
                                      val.no_sertifikat,
                                      val.no_id_debitur,
                                      0,
                                      body2.message + " (Get No Kota/Kab)"
                                    ).then(function () {
                                      if (params.length - 1 == i) {
                                        resolve("POST SIKP CALON GAGAL!");
                                      }
                                    });
                                  }
                                }
                              }
                            );
                          }
                        );
                      } else if (status_sikp == 1) {
                        if (val.no_rek_lama) {
                          val.no_rek_lama = val.no_rek_lama.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          );
                        }
                        console.log({
                          rekening_baru: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          nik: val.no_id_debitur,
                          rekening_lama: val.no_rek_lama,
                          status_akad: "B",
                          status_rekening: 1,
                          nomor_akad: val.no_perjanjian_kredit,
                          tgl_akad: new Date(val.tgl_pk),
                          tgl_penarikan: new Date(val.tgl_awal_pertanggungan),
                          tgl_jatuh_tempo: new Date(
                            val.tgl_akhir_pertanggungan
                          ),
                          nilai_akad: val.plafond_kredit,
                          tgl_penjaminan: val.tgl_sertifikat,
                          nomor_penjaminan: val.no_sertifikat,
                          nilai_dijamin: val.nilai_pertanggungan,
                          sektor: val.sektor_ekonomi,
                        });
                        request(
                          {
                            url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad",
                            // agent: agent,
                            json: {
                              rekening_baru: val.no_rekening_pinjaman.replace(
                                /[^0-9a-z_]/gi,
                                ""
                              ),
                              kode_bank: val.kode_bank,
                              nik: val.no_id_debitur,
                              rekening_lama: val.no_rek_lama,
                              status_akad: "B",
                              status_rekening: 1,
                              nomor_akad: val.no_perjanjian_kredit,
                              tgl_akad: new Date(val.tgl_pk),
                              tgl_penarikan: new Date(
                                val.tgl_awal_pertanggungan
                              ),
                              tgl_jatuh_tempo: new Date(
                                val.tgl_akhir_pertanggungan
                              ),
                              nilai_akad: val.plafond_kredit,
                              tgl_penjaminan: val.tgl_sertifikat,
                              nomor_penjaminan: val.no_sertifikat,
                              nilai_dijamin: val.nilai_pertanggungan,
                              sektor: val.sektor_ekonomi,
                            },
                            method: "POST",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error4, response4, body4) {
                            if (error4) {
                              console.log(error4);
                            } else {
                              console.log(body4);
                              if (response4.statusCode != 200) {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                    // agent: agent,
                                    json: {
                                      username: "askrindo",
                                      password: "bzMjN9Wc8DeATBKh",
                                      // "password" :"development"
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                    },
                                  },
                                  function (errorfix, responsefix, bodyfix) {
                                    if (errorfix) {
                                      console.log(errorfix);
                                    } else {
                                      body.data = bodyfix.data;
                                      console.log("REFRESH TOKEN");
                                      request(
                                        {
                                          url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad",
                                          // agent: agent,
                                          json: {
                                            rekening_baru:
                                              val.no_rekening_pinjaman.replace(
                                                /[^0-9a-z_]/gi,
                                                ""
                                              ),
                                            kode_bank: val.kode_bank,
                                            nik: val.no_id_debitur,
                                            rekening_lama: val.no_rek_lama,
                                            status_akad: "B",
                                            status_rekening: 1,
                                            nomor_akad:
                                              val.no_perjanjian_kredit,
                                            tgl_akad: new Date(val.tgl_pk),
                                            tgl_penarikan: new Date(
                                              val.tgl_awal_pertanggungan
                                            ),
                                            tgl_jatuh_tempo: new Date(
                                              val.tgl_akhir_pertanggungan
                                            ),
                                            nilai_akad: val.plafond_kredit,
                                            tgl_penjaminan: val.tgl_sertifikat,
                                            nomor_penjaminan: val.no_sertifikat,
                                            nilai_dijamin:
                                              val.nilai_pertanggungan,
                                            sektor: val.sektor_ekonomi,
                                          },
                                          method: "POST",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (
                                          error4re,
                                          response4re,
                                          body4re
                                        ) {
                                          if (error4re) {
                                            console.log(error4re);
                                          } else {
                                            if (body4re.code === "00") {
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPPenjaminan(
                                                  val.id_penjaminan,
                                                  2,
                                                  val.no_id_debitur
                                                ).then(function () {
                                                  if (params.length - 1 == i) {
                                                    resolve(
                                                      "POST SIKP AKAD SUKSES!"
                                                    );
                                                  }
                                                });
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPPenjaminan(
                                                  val.id_penjaminan,
                                                  2,
                                                  val.no_id_debitur
                                                ).then(function () {
                                                  if (params.length - 1 == i) {
                                                    resolve(
                                                      "POST SIKP AKAD SUKSES!"
                                                    );
                                                  }
                                                });
                                              }
                                            } else {
                                              // insert akad gagal
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  1,
                                                  body4re.message
                                                ).then(function () {
                                                  if (params.length - 1 == i) {
                                                    resolve(
                                                      "POST SIKP AKAD GAGAL!"
                                                    );
                                                  }
                                                });
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  1,
                                                  body4re.message
                                                ).then(function () {
                                                  if (params.length - 1 == i) {
                                                    resolve(
                                                      "POST SIKP AKAD GAGAL!"
                                                    );
                                                  }
                                                });
                                              }
                                            }
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              } else if (body4.code === "00") {
                                if (i == params.length - 1) {
                                  sukses++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  updateStatusSIKPPenjaminan(
                                    val.id_penjaminan,
                                    2,
                                    val.no_id_debitur
                                  ).then(function () {
                                    if (params.length - 1 == i) {
                                      resolve("POST SIKP AKAD SUKSES!");
                                    }
                                  });
                                } else {
                                  sukses++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  updateStatusSIKPPenjaminan(
                                    val.id_penjaminan,
                                    2,
                                    val.no_id_debitur
                                  ).then(function () {
                                    if (params.length - 1 == i) {
                                      resolve("POST SIKP AKAD SUKSES!");
                                    }
                                  });
                                }
                              } else {
                                // insert akad gagal
                                if (i == params.length - 1) {
                                  gagal++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  insertLogSIKP(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.transaction_id_bank,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    1,
                                    body4.message
                                  ).then(function () {
                                    if (params.length - 1 == i) {
                                      resolve("POST SIKP AKAD GAGAL!");
                                    }
                                  });
                                } else {
                                  gagal++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  insertLogSIKP(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.transaction_id_bank,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    1,
                                    body4.message
                                  ).then(function () {
                                    if (params.length - 1 == i) {
                                      resolve("POST SIKP AKAD GAGAL!");
                                    }
                                  });
                                }
                              }
                            }
                          }
                        );
                      } else if (status_sikp == 2) {
                        console.log({
                          nomor_tagihan: val.tgl_sertifikat.substring(0, 7) + "GEN2",
                          nomor_rekening: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          outstanding: val.plafond_kredit,
                          tahun: dateFormat(new Date(), "yyyy"),
                          nilai_ijp: val.premi,
                          periode: dateFormat(new Date(val.tgl_premi), "yyyy"),
                        });
                        request(
                          {
                            url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                            // agent: agent,
                            json: {
                              nomor_tagihan: val.tgl_sertifikat.substring(0, 7) + "GEN2",
                              nomor_rekening: val.no_rekening_pinjaman.replace(
                                /[^0-9a-z_]/gi,
                                ""
                              ),
                              kode_bank: val.kode_bank,
                              outstanding: val.plafond_kredit,
                              tahun: dateFormat(new Date(), "yyyy"),
                              nilai_ijp: val.premi,
                              periode: val.tahun_ke,
                            },
                            method: "POST",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error5, response5, body5) {
                            if (error5) {
                              console.log(error5);
                            } else {
                              console.log(body5);
                              if (response5.statusCode != 200) {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                    // agent: agent,
                                    json: {
                                      username: "askrindo",
                                      password: "bzMjN9Wc8DeATBKh",
                                      // "password" :"development"
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                    },
                                  },
                                  function (errorfix, responsefix, bodyfix) {
                                    if (errorfix) {
                                      console.log(errorfix);
                                    } else {
                                      body.data = bodyfix.data;
                                      console.log("REFRESH TOKEN");
                                      request(
                                        {
                                          url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                                          // agent: agent,
                                          json: {
                                            nomor_tagihan:
                                              val.tgl_sertifikat.substring(
                                                0,
                                                7
                                              ) + "GEN2",
                                            nomor_rekening:
                                              val.no_rekening_pinjaman.replace(
                                                /[^0-9a-z_]/gi,
                                                ""
                                              ),
                                            kode_bank: val.kode_bank,
                                            outstanding: val.plafond_kredit,
                                            tahun: dateFormat(
                                              new Date(),
                                              "yyyy"
                                            ),
                                            nilai_ijp: val.premi,
                                            periode: val.tahun_ke,
                                          },
                                          method: "POST",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (
                                          error5re,
                                          response5re,
                                          body5re
                                        ) {
                                          if (error5re) {
                                            console.log(error5re);
                                          } else {
                                            console.log(body5re);
                                            console.log("REFRESH TOKEN");
                                            if (body5re.code === "00") {
                                              console.log(
                                                "tagihan sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal
                                              );
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "tagihan sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPIJP(
                                                  val.penjaminan_ijp_id,
                                                  true,
                                                  req.body.nomor_tagihan
                                                ).then(function (params) {
                                                  updateStatusSIKPPenjaminan(
                                                    val.id_penjaminan,
                                                    3,
                                                    val.no_id_debitur
                                                  ).then(function () {
                                                    if (
                                                      params.length - 1 ==
                                                      i
                                                    ) {
                                                      resolve(
                                                        "POST SIKP TAGIHAN SUKSES!"
                                                      );
                                                    }
                                                  });
                                                });
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "tagihan sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPIJP(
                                                  val.penjaminan_ijp_id,
                                                  true,
                                                  req.body.nomor_tagihan
                                                ).then(function (params) {
                                                  if (params.length - 1 == i) {
                                                    resolve(
                                                      "POST SIKP TAGIHAN SUKSES!"
                                                    );
                                                  }
                                                });
                                              }
                                            } else {
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "tagihan sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  2,
                                                  body5re.message
                                                ).then(function () {
                                                  if (params.length - 1 == i) {
                                                    resolve(
                                                      "POST SIKP TAGIHAN GAGAL!"
                                                    );
                                                  }
                                                });
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "tagihan sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                insertLogSIKP(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  2,
                                                  body5re.message
                                                ).then(function () {
                                                  if (params.length - 1 == i) {
                                                    resolve(
                                                      "POST SIKP TAGIHAN GAGAL!"
                                                    );
                                                  }
                                                });
                                              }
                                              //insert tagihan gagal
                                            }
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              } else if (body5.code === "00") {
                                sukses++;
                                if (i == params.length - 1) {
                                  console.log(
                                    "tagihan sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  updateStatusSIKPIJP(
                                    val.penjaminan_ijp_id,
                                    true,
                                    val.tgl_sertifikat.substring(0, 7)
                                  ).then(function (params) {
                                    updateStatusSIKPPenjaminan(
                                      val.id_penjaminan,
                                      3,
                                      val.no_id_debitur
                                    ).then(function (params) {
                                      if (params.length - 1 == i) {
                                        resolve("POST SIKP TAGIHAN SUKSES!");
                                      }
                                    });
                                  });
                                } else {
                                  console.log(
                                    "tagihan sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  updateStatusSIKPIJP(
                                    val.penjaminan_ijp_id,
                                    true,
                                    val.tgl_sertifikat.substring(0, 7)
                                  ).then(function (params) {
                                    updateStatusSIKPPenjaminan(
                                      val.id_penjaminan,
                                      3,
                                      val.no_id_debitur
                                    ).then(function (params) {
                                      if (params.length - 1 == i) {
                                        resolve("POST SIKP TAGIHAN SUKSES!");
                                      }
                                    });
                                  });
                                }
                              } else {
                                if (i == params.length - 1) {
                                  gagal++;
                                  console.log(
                                    "tagihan sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  insertLogSIKP(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.transaction_id_bank,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    2,
                                    body5.message
                                  ).then(function (params) {
                                    if (params.length - 1 == i) {
                                      resolve("POST SIKP TAGIHAN GAGAL!");
                                    }
                                  });
                                } else {
                                  gagal++;
                                  console.log(
                                    "tagihan sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  insertLogSIKP(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.transaction_id_bank,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    2,
                                    body5.message
                                  ).then(function (params) {
                                    if (params.length - 1 == i) {
                                      resolve("POST SIKP TAGIHAN GAGAL!");
                                    }
                                  });
                                }
                                //insert tagihan gagal
                              }
                            }
                          }
                        );
                      } else {
                        resolve("GAGAL, INVALID COMMAND!");
                      }
                    }, i * 2000);
                  });
                } else {
                  resolve("GAGAL, DATA TIDAK DITEMUKAN!");
                }
              }
            );
          }
        }
      }
    );
  });
};

exports.putSIKPJPASBatch = async function (req, res) {
  var agent;
  agentOptions = {
    host: "202.61.126.162",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };
  agent = new https.Agent(agentOptions);
  var put_sikp_validation;
  var Validator = require("jsonschema").Validator;
  var v = new Validator();
  console.log(req.body);
  if (req.body.status_sikp == "calon") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        data_batch: { type: "string", minLength: 1 },
        status_sikp: { type: "string", minLength: 1 },
        nik_lama: { type: "string", minLength: 1, maxLength: 16 },
        nama: { type: "string", minLength: 1 },
        tgl_lahir: { type: "string" },
        jns_kelamin: { type: "number", minimum: 1 },
        maritas_sts: { type: "number", minimum: 1 },
        pendidikan: { type: "number", minimum: 1 },
        pekerjaan: { type: "number", minimum: 1 },
        jns_debitur: { type: "string", minLength: 1 },
        alamat: { type: "string", minLength: 1 },
        kode_kabkota: { type: "string", minLength: 1 },
        kode_pos: { type: "string" },
        npwp: { type: "string" },
        mulai_usaha: { type: "string" },
        alamat_usaha: { type: "string", minLength: 1 },
        ijin_usaha: { type: "string" },
        modal_usaha: { type: "number" },
        jml_pekerja: { type: "number", minimum: 1 },
        no_hp: { type: "string" },
        uraian_agunan: { type: "string" },
      },
      additionalProperties: false,
    };
  } else if (req.body.status_sikp == "akad") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        data_batch: { type: "string", minLength: 1 },
        status_sikp: { type: "string", maxLength: 30 },
        rekening_baru: { type: "string", minLength: 1 },
        kode_bank: { type: "string", minLength: 1 },
        nik_lama: { type: "string", minLength: 1 },
        rekening_lama: { type: "string" },
        status_akad: { type: "string", minLength: 1 },
        status_rekening: { type: "number", minimum: 1 },
        nomor_akad: { type: "string", minLength: 1 },
        tgl_akad: { type: "string", minLength: 8 },
        tgl_penarikan: { type: "string", minLength: 8 },
        tgl_jatuh_tempo: { type: "string", minLength: 8 },
        nilai_akad: { type: "number", minimum: 1 },
        tgl_penjaminan: { type: "string", minLength: 1 },
        nomor_penjaminan: { type: "string", minLength: 1 },
        nilai_dijamin: { type: "number", minimum: 1 },
        sektor: { type: "string", minLength: 1 },
      },
      additionalProperties: false,
    };
  } else if (req.body.status_sikp == "tagihan") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        data_batch: { type: "string", minLength: 1 },
        status_sikp: { type: "string", minLength: 1 },
        nomor_tagihan: { type: "string", minLength: 1 },
        nomor_rekening: { type: "string", minLength: 1 },
        kode_bank: { type: "string", minLength: 1 },
        outstanding: { type: "number", minimum: 1 },
        tahun: { type: "number", minimum: 2020 },
        nilai_ijp: { type: "number", minimum: 1 },
        periode: { type: "number", minimum: 1 },
      },
      additionalProperties: false,
    };
  } else if (req.body.status_sikp == "debitur") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        data_batch: { type: "string", minLength: 1 },
        status_sikp: { type: "string", minLength: 1 },
        nik_lama: { type: "string", minLength: 1, maxLength: 16 },
        nama: { type: "string", minLength: 1 },
        tgl_lahir: { type: "string" },
        jns_kelamin: { type: "number", minimum: 1 },
        maritas_sts: { type: "number", minimum: 1 },
        pendidikan: { type: "number", minimum: 1 },
        pekerjaan: { type: "number", minimum: 1 },
        jns_debitur: { type: "string", minLength: 1 },
        alamat: { type: "string", minLength: 1 },
        kode_kabkota: { type: "string", minLength: 1 },
        kode_pos: { type: "string" },
        npwp: { type: "string" },
        mulai_usaha: { type: "string" },
        alamat_usaha: { type: "string", minLength: 1 },
        ijin_usaha: { type: "string" },
        modal_usaha: { type: "number" },
        jml_pekerja: { type: "number", minimum: 1 },
        no_hp: { type: "string" },
        uraian_agunan: { type: "string" },
      },
      additionalProperties: false,
    };
  } else {
    res.status(400).json({
      errorMessage:
        'Status SIKP Salah, isi dengan "calon", "akad", atau "debitur"!',
    });
  }

  var results = v.validate(req.body, put_sikp_validation);
  if (results.errors.length > 0) {
    var json_ori = JSON.stringify(req.body).replace(/""|" "/g, "null");
    var json_fix = JSON.parse(json_ori);
    console.log(json_fix);
    var messages = [];
    for (i = 0; i < results.errors.length; i++) {
      if (results.errors[i].name === "additionalProperties") {
        messages.push({
          status: false,
          errorCode: "0102",
          errorType: "JSON Structure Error",
          errorMessage:
            "Field JSON " + results.errors[i].argument + " Not Allowed",
          trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
        });
      } else if (results.errors[i].name !== "additionalProperties") {
        if (results.errors[i].name === "type") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "Datatype of " +
              results.errors[i].property.split("instance.").join("") +
              " must be " +
              results.errors[i].argument[0],
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "required") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].argument.split("instance.").join("") +
              " is Required",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "minLength") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].property.split("instance.").join("") +
              " cannot be empty/below minimum length",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "maxLength") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].property.split("instance.").join("") +
              " violates maximal length of string",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "minimum") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].property.split("instance.").join("") +
              " violates minimum amount of number",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else {
          messages.push({
            status: false,
            errorCode: "",
            errorType: "Internal Server Error",
            errorMessage: "",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        }
      }
    }
    res.status(400).json(messages);
  } else {
    var json_ori = JSON.stringify(req.body).replace(/""|" "/g, "null");
    var json_fix = JSON.parse(json_ori);
    return new Promise((resolve) => {
      request(
        {
          url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
          // agent: agent,
          json: {
            username: "askrindo",
            password: "bzMjN9Wc8DeATBKh",
            // "password" :"development"
          },
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        },
        function (error, response, body) {
          if (error) {
            console.log(error);
          } else {
            console.log(body);
            if (body.data && body.data != "") {
              getPenjaminanJPASBatch(json_fix.data_batch).then(function (
                params
              ) {
                if (params) {
                  var sukses = 0;
                  var gagal = 0;
                  params.forEach((val, i) => {
                    setTimeout(function () {
                      if (json_fix.status_sikp == "calon") {
                        var substring_ktp;
                        var nik_lama;
                        var alamat_usaha;
                        if (json_fix.nik_lama) {
                          nik_lama = json_fix.nik_lama;
                        } else {
                          nik_lama = val.no_id_debitur;
                        }
                        getKodeKotaSIKP(val.kode_pos).then(
                          function (kode_sikp_get) {
                            if (kode_sikp_get.length == 0) {
                              substring_ktp = val.no_id_debitur.substring(0, 4);
                            } else {
                              substring_ktp = kode_sikp_get[0].kode_kabkota;
                            }
                            request(
                              {
                                url:
                                  "http://10.238.136.117/pen-umkm-dev/api/v1/Referensi/KabKota/" +
                                  substring_ktp,
                                // agent: agent,
                                method: "GET",
                                json: {},
                                headers: {
                                  "Content-Type": "application/json",
                                  Authorization: "Bearer " + body.data,
                                },
                              },
                              function (error2, response2, body2) {
                                if (error2) {
                                  console.log(error2);
                                } else {
                                  if (response2.statusCode != 200) {
                                    request(
                                      {
                                        url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                        // agent: agent,
                                        json: {
                                          username: "askrindo",
                                          password: "bzMjN9Wc8DeATBKh",
                                          // "password" :"development"
                                        },
                                        method: "POST",
                                        headers: {
                                          "Content-Type": "application/json",
                                        },
                                      },
                                      function (
                                        errorfix,
                                        responsefix,
                                        bodyfix
                                      ) {
                                        if (errorfix) {
                                          console.log(errorfix);
                                        } else {
                                          body.data = bodyfix.data;
                                          console.log("REFRESH TOKEN");
                                        }
                                      }
                                    );
                                  } else if (body2.code === "51") {
                                    console.log(body2);
                                    getAgunan(val.id_penjaminan).then(function (
                                      agunan
                                    ) {
                                      var uraian_agunan = "";
                                      if (agunan.length === 0) {
                                        uraian_agunan = null;
                                      } else {
                                        uraian_agunan = agunan[0].label;
                                      }

                                      if (json_fix.nama) {
                                        val.nama_debitur = json_fix.nama;
                                      }
                                      if (json_fix.tgl_lahir) {
                                        val.tgl_lahir = json_fix.tgl_lahir;
                                      }
                                      if (json_fix.jns_kelamin) {
                                        val.jenis_kelamin =
                                          json_fix.jns_kelamin;
                                      }
                                      if (json_fix.maritas_sts) {
                                        val.maritas_status =
                                          json_fix.maritas_sts;
                                      }
                                      if (json_fix.pendidikan) {
                                        val.pendidikan = json_fix.pendidikan;
                                      }
                                      if (json_fix.pekerjaan) {
                                        val.jenis_pekerjaan =
                                          json_fix.pekerjaan;
                                      }
                                      if (json_fix.alamat) {
                                        val.alamat_debitur = json_fix.alamat;
                                      }
                                      if (json_fix.kode_pos) {
                                        val.kode_pos = json_fix.kode_pos;
                                      }
                                      if (json_fix.npwp) {
                                        val.npwp = json_fix.npwp;
                                      }
                                      if (json_fix.mulai_usaha) {
                                        val.tgl_mulai_usaha =
                                          json_fix.mulai_usaha;
                                      }
                                      if (json_fix.alamat_usaha) {
                                        alamat_usaha = json_fix.alamat_usaha;
                                      } else {
                                        alamat_usaha = val.alamat_debitur;
                                      }
                                      if (json_fix.ijin_usaha) {
                                        val.no_ijin_usaha = json_fix.ijin_usaha;
                                      }
                                      if (json_fix.modal_usaha) {
                                        val.modal_usaha = json_fix.modal_usaha;
                                      }
                                      if (json_fix.no_hp) {
                                        val.no_hp_debitur = json_fix.no_hp;
                                      }
                                      if (json_fix.uraian_agunan) {
                                        uraian_agunan = json_fix.uraian_agunan;
                                      }
                                      if (val.npwp) {
                                        val.npwp.replace(/[^0-9a-z]/gi, "");
                                      } else {
                                        val.npwp = null;
                                      }
                                      console.log({
                                        nik: val.no_id_debitur,
                                        nama: val.nama_debitur,
                                        tgl_lahir: val.tgl_lahir,
                                        jns_kelamin: val.jenis_kelamin,
                                        maritas_sts: val.marital_status,
                                        pendidikan: val.pendidikan,
                                        pekerjaan: val.jenis_pekerjaan,
                                        jns_debitur: "R",
                                        alamat: val.alamat_debitur,
                                        kode_kabkota: body2.data.kode,
                                        kode_pos: val.kode_pos,
                                        npwp: val.npwp,
                                        mulai_usaha: val.tgl_mulai_usaha,
                                        alamat_usaha: alamat_usaha,
                                        ijin_usaha: val.no_ijin_usaha,
                                        modal_usaha: val.modal_usaha,
                                        jml_pekerja: 1,
                                        jml_kredit: val.plafond_kredit,
                                        no_hp: val.no_hp_debitur,
                                        uraian_agunan: uraian_agunan,
                                      });
                                      var tgl_lahir;
                                      if (val.jenis_kelamin == "9") {
                                        tgl_lahir = null;
                                      } else {
                                        tgl_lahir = new Date(val.tgl_lahir);
                                      }
                                      if (!val.tgl_mulai_usaha) {
                                        val.tgl_mulai_usaha =
                                          val.tgl_mulai_usaha;
                                      } else {
                                        new Date(val.tgl_mulai_usaha);
                                      }
                                      request(
                                        {
                                          url:
                                            "http://10.238.136.117/pen-umkm-dev/api/v1/Calon/" +
                                            nik_lama,
                                          // agent: agent,
                                          json: {
                                            nik: val.no_id_debitur,
                                            nama: val.nama_debitur,
                                            tgl_lahir: tgl_lahir,
                                            jns_kelamin: val.jenis_kelamin,
                                            maritas_sts: val.marital_status,
                                            pendidikan: val.pendidikan,
                                            pekerjaan: val.jenis_pekerjaan,
                                            jns_debitur: "R",
                                            alamat: val.alamat_debitur,
                                            kode_kabkota: body2.data.kode,
                                            kode_pos: val.kode_pos,
                                            npwp: val.npwp,
                                            mulai_usaha: val.tgl_mulai_usaha,
                                            alamat_usaha: alamat_usaha,
                                            ijin_usaha: val.no_ijin_usaha,
                                            modal_usaha: val.modal_usaha,
                                            jml_pekerja: 1,
                                            jml_kredit: val.plafond_kredit,
                                            no_hp: val.no_hp_debitur,
                                            uraian_agunan: uraian_agunan,
                                          },
                                          method: "PUT",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (error3, response3, body3) {
                                          if (error3) {
                                            console.log(error3);
                                          } else {
                                            console.log(body3);
                                            if (response3.statusCode != 200) {
                                              request(
                                                {
                                                  url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                                  // agent: agent,
                                                  json: {
                                                    username: "askrindo",
                                                    password:
                                                      "bzMjN9Wc8DeATBKh",
                                                    // "password" :"development"
                                                  },
                                                  method: "POST",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                  },
                                                },
                                                function (
                                                  errorfix,
                                                  responsefix,
                                                  bodyfix
                                                ) {
                                                  if (errorfix) {
                                                    console.log(errorfix);
                                                  } else {
                                                    body.data = bodyfix.data;
                                                    console.log(
                                                      "REFRESH TOKEN"
                                                    );
                                                    request(
                                                      {
                                                        url:
                                                          "http://10.238.136.117/pen-umkm-dev/api/v1/Calon/" +
                                                          nik_lama,
                                                        // agent: agent,
                                                        json: {
                                                          nik: val.no_id_debitur,
                                                          nama: val.nama_debitur,
                                                          tgl_lahir: tgl_lahir,
                                                          jns_kelamin:
                                                            val.jenis_kelamin,
                                                          maritas_sts:
                                                            val.marital_status,
                                                          pendidikan:
                                                            val.pendidikan,
                                                          pekerjaan:
                                                            val.jenis_pekerjaan,
                                                          jns_debitur: "R",
                                                          alamat:
                                                            val.alamat_debitur,
                                                          kode_kabkota:
                                                            body2.data.kode,
                                                          kode_pos:
                                                            val.kode_pos,
                                                          npwp: val.npwp,
                                                          mulai_usaha:
                                                            val.tgl_mulai_usaha,
                                                          alamat_usaha:
                                                            alamat_usaha,
                                                          ijin_usaha:
                                                            val.no_ijin_usaha,
                                                          modal_usaha:
                                                            val.modal_usaha,
                                                          jml_pekerja: 1,
                                                          jml_kredit:
                                                            val.plafond_kredit,
                                                          no_hp:
                                                            val.no_hp_debitur,
                                                          uraian_agunan:
                                                            uraian_agunan,
                                                        },
                                                        method: "PUT",
                                                        headers: {
                                                          "Content-Type":
                                                            "application/json",
                                                          Authorization:
                                                            "Bearer " +
                                                            body.data,
                                                        },
                                                      },
                                                      function (
                                                        error3re,
                                                        response3re,
                                                        body3re
                                                      ) {
                                                        if (error3) {
                                                          console.log(error3re);
                                                        } else {
                                                          console.log(body3re);

                                                          if (
                                                            body3re.code ===
                                                            "45"
                                                          ) {
                                                            if (
                                                              i ==
                                                              params.length - 1
                                                            ) {
                                                              sukses++;
                                                              console.log(
                                                                "put calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              res
                                                                .status(200)
                                                                .json({
                                                                  error: false,
                                                                  id_penjaminan:
                                                                    json_fix.data_batch,
                                                                  message:
                                                                    "put calon sukses!",
                                                                });
                                                              resolve(
                                                                "PUT SIKP CALON SUKSES!"
                                                              );
                                                            } else {
                                                              sukses++;
                                                              console.log(
                                                                "put calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              res
                                                                .status(200)
                                                                .json({
                                                                  error: false,
                                                                  id_penjaminan:
                                                                    json_fix.data_batch,
                                                                  message:
                                                                    "put calon sukses!",
                                                                });
                                                              resolve(
                                                                "PUT SIKP CALON SUKSES!"
                                                              );
                                                            }
                                                          } else if (
                                                            body3re.code ===
                                                            "07"
                                                          ) {
                                                            request(
                                                              {
                                                                url:
                                                                  "http://10.238.136.117/pen-umkm-dev/api/v1/Debitur/" +
                                                                  nik_lama,
                                                                // agent: agent,
                                                                json: {
                                                                  nik: val.no_id_debitur,
                                                                  nama: val.nama_debitur,
                                                                  tgl_lahir:
                                                                    tgl_lahir,
                                                                  jns_kelamin:
                                                                    val.jenis_kelamin,
                                                                  maritas_sts:
                                                                    val.marital_status,
                                                                  pendidikan:
                                                                    val.pendidikan,
                                                                  pekerjaan:
                                                                    val.jenis_pekerjaan,
                                                                  jns_debitur:
                                                                    "R",
                                                                  alamat:
                                                                    val.alamat_debitur,
                                                                  kode_kabkota:
                                                                    body2.data
                                                                      .kode,
                                                                  kode_pos:
                                                                    val.kode_pos,
                                                                  npwp: val.npwp,
                                                                  mulai_usaha:
                                                                    val.tgl_mulai_usaha,
                                                                  alamat_usaha:
                                                                    alamat_usaha,
                                                                  ijin_usaha:
                                                                    val.no_ijin_usaha,
                                                                  modal_usaha:
                                                                    val.modal_usaha,
                                                                  jml_pekerja: 1,
                                                                  jml_kredit:
                                                                    val.plafond_kredit,
                                                                  no_hp:
                                                                    val.no_hp_debitur,
                                                                  uraian_agunan:
                                                                    uraian_agunan,
                                                                },
                                                                method: "PUT",
                                                                headers: {
                                                                  "Content-Type":
                                                                    "application/json",
                                                                  Authorization:
                                                                    "Bearer " +
                                                                    body.data,
                                                                },
                                                              },
                                                              function (
                                                                error7,
                                                                response7,
                                                                body7
                                                              ) {
                                                                if (error7) {
                                                                  console.log(
                                                                    error7
                                                                  );
                                                                } else {
                                                                  console.log(
                                                                    body7
                                                                  );

                                                                  if (
                                                                    body7.code ===
                                                                    "45"
                                                                  ) {
                                                                    if (
                                                                      i ==
                                                                      params.length -
                                                                        1
                                                                    ) {
                                                                      sukses++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );
                                                                      res
                                                                        .status(
                                                                          200
                                                                        )
                                                                        .json({
                                                                          error: false,
                                                                          id_penjaminan:
                                                                            json_fix.data_batch,
                                                                          message:
                                                                            "put debitur sukses!",
                                                                        });
                                                                      resolve(
                                                                        "PUT SIKP DEBITUR SUKSES!"
                                                                      );
                                                                    } else {
                                                                      sukses++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );

                                                                      resolve(
                                                                        "PUT SIKP DEBITUR SUKSES!"
                                                                      );
                                                                    }
                                                                  } else {
                                                                    if (
                                                                      i ==
                                                                      params.length -
                                                                        1
                                                                    ) {
                                                                      gagal++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );
                                                                      //insert debitur gagal
                                                                      res
                                                                        .status(
                                                                          400
                                                                        )
                                                                        .json({
                                                                          error: true,
                                                                          id_penjaminan:
                                                                            json_fix.data_batch,
                                                                          message:
                                                                            body7.message,
                                                                        });
                                                                      resolve(
                                                                        "PUT SIKP DEBITUR GAGAL!, " +
                                                                          body7.message
                                                                      );
                                                                    } else {
                                                                      gagal++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );
                                                                      //insert debitur gagal

                                                                      resolve(
                                                                        "PUT SIKP DEBITUR GAGAL!, " +
                                                                          body7.message
                                                                      );
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            );
                                                          } else {
                                                            if (
                                                              i ==
                                                              params.length - 1
                                                            ) {
                                                              gagal++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              //insert calon gagal
                                                              res
                                                                .status(400)
                                                                .json({
                                                                  error: true,
                                                                  id_penjaminan:
                                                                    json_fix.data_batch,
                                                                  message:
                                                                    body3re.message,
                                                                });
                                                              resolve(
                                                                "PUT SIKP CALON GAGAL!, " +
                                                                  body3re.message
                                                              );
                                                            } else {
                                                              gagal++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              //insert calon gagal

                                                              resolve(
                                                                "PUT SIKP DEBITUR GAGAL!, " +
                                                                  body3re.message
                                                              );
                                                            }
                                                          }
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            } else if (body3.code === "45") {
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(200).json({
                                                  error: false,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: "put calon sukses!",
                                                });
                                                resolve(
                                                  "PUT SIKP CALON SUKSES!"
                                                );
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );

                                                resolve(
                                                  "PUT SIKP CALON SUKSES!"
                                                );
                                              }
                                            } else if (body3.code === "07") {
                                              request(
                                                {
                                                  url:
                                                    "http://10.238.136.117/pen-umkm-dev/api/v1/Debitur/" +
                                                    nik_lama,
                                                  // agent: agent,
                                                  json: {
                                                    nik: val.no_id_debitur,
                                                    nama: val.nama_debitur,
                                                    tgl_lahir: tgl_lahir,
                                                    jns_kelamin:
                                                      val.jenis_kelamin,
                                                    maritas_sts:
                                                      val.marital_status,
                                                    pendidikan: val.pendidikan,
                                                    pekerjaan:
                                                      val.jenis_pekerjaan,
                                                    jns_debitur: "R",
                                                    alamat: val.alamat_debitur,
                                                    kode_kabkota:
                                                      body2.data.kode,
                                                    kode_pos: val.kode_pos,
                                                    npwp: val.npwp,
                                                    mulai_usaha:
                                                      val.tgl_mulai_usaha,
                                                    alamat_usaha: alamat_usaha,
                                                    ijin_usaha:
                                                      val.no_ijin_usaha,
                                                    modal_usaha:
                                                      val.modal_usaha,
                                                    jml_pekerja: 1,
                                                    jml_kredit:
                                                      val.plafond_kredit,
                                                    no_hp: val.no_hp_debitur,
                                                    uraian_agunan:
                                                      uraian_agunan,
                                                  },
                                                  method: "PUT",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                    Authorization:
                                                      "Bearer " + body.data,
                                                  },
                                                },
                                                function (
                                                  error7,
                                                  response7,
                                                  body7
                                                ) {
                                                  if (error7) {
                                                    console.log(error7);
                                                  } else {
                                                    console.log(body7);

                                                    if (body7.code === "45") {
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        sukses++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(200).json({
                                                          error: false,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            "put debitur sukses!",
                                                        });
                                                        resolve(
                                                          "PUT SIKP DEBITUR SUKSES!"
                                                        );
                                                      } else {
                                                        sukses++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );

                                                        resolve(
                                                          "PUT SIKP DEBITUR SUKSES!"
                                                        );
                                                      }
                                                    } else {
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        gagal++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        //insert debitur gagal
                                                        res.status(400).json({
                                                          error: true,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            body7.message,
                                                        });
                                                        resolve(
                                                          "PUT SIKP DEBITUR GAGAL!, " +
                                                            body7.message
                                                        );
                                                      } else {
                                                        gagal++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        //insert debitur gagal

                                                        resolve(
                                                          "PUT SIKP DEBITUR GAGAL!, " +
                                                            body7.message
                                                        );
                                                      }
                                                    }
                                                  }
                                                }
                                              );
                                            } else {
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal
                                                res.status(400).json({
                                                  error: true,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: body3.message,
                                                });
                                                resolve(
                                                  "PUT SIKP CALON GAGAL!, " +
                                                    body3.message
                                                );
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal

                                                resolve(
                                                  "PUT SIKP CALON GAGAL!, " +
                                                    body3.message
                                                );
                                              }
                                            }
                                          }
                                        }
                                      );
                                    });
                                  } else {
                                    gagal++;
                                    console.log(
                                      "Calon sukses = " +
                                        sukses +
                                        " & gagal = " +
                                        gagal
                                    );
                                    res.status(400).json({
                                      error: true,
                                      id_penjaminan: json_fix.data_batch,
                                      message: body2.message,
                                    });
                                    resolve(
                                      "PUT SIKP CALON GAGAL!, " + body2.message
                                    );
                                  }
                                }
                              }
                            );
                          }
                        );
                      } else if (json_fix.status_sikp == "akad") {
                        var rekening_lama_sikp;
                        var kode_bank_lama_sikp;
                        if (val.no_rek_lama) {
                          if (json_fix.rekening_lama) {
                            val.no_rek_lama = json_fix.rekening_lama;
                          }
                          val.no_rek_lama = val.no_rek_lama.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          );
                        }
                        if (json_fix.rekening_baru) {
                          rekening_lama_sikp = json_fix.rekening_baru;
                          val.no_rekening_pinjaman =
                            val.no_rekening_pinjaman.replace(
                              /[^0-9a-z_]/gi,
                              ""
                            );
                        } else {
                          rekening_lama_sikp = val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          );
                        }
                        if (json_fix.kode_bank) {
                          kode_bank_lama_sikp = json_fix.kode_bank;
                        } else {
                          kode_bank_lama_sikp = val.kode_bank;
                        }
                        if (json_fix.nik_lama) {
                          val.no_id_debitur = json_fix.nik_lama;
                        }
                        if (json_fix.nomor_akad) {
                          val.no_perjanjian_kredit = json_fix.nomor_akad;
                        }
                        if (json_fix.tgl_akad) {
                          val.tgl_pk = json_fix.tgl_akad;
                        }
                        if (json_fix.tgl_penarikan) {
                          val.tgl_awal_pertanggungan = json_fix.tgl_penarikan;
                        }
                        if (json_fix.tgl_jatuh_tempo) {
                          val.tgl_akhir_pertanggungan =
                            json_fix.tgl_jatuh_tempo;
                        }
                        if (json_fix.nilai_akad) {
                          val.plafond_kredit = json_fix.nilai_akad;
                        }
                        if (json_fix.tgl_penjaminan) {
                          val.tgl_sertifikat = json_fix.tgl_penjaminan;
                        }
                        if (json_fix.nomor_penjaminan) {
                          val.no_sertifikat = json_fix.nomor_penjaminan;
                        }
                        if (json_fix.nilai_dijamin) {
                          val.nilai_pertanggungan = json_fix.nilai_dijamin;
                        }
                        if (json_fix.sektor) {
                          val.sektor_ekonomi = json_fix.sektor;
                        }

                        console.log({
                          rekening_baru: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          nik: val.no_id_debitur,
                          rekening_lama: val.no_rek_lama,
                          status_akad: "B",
                          status_rekening: 1,
                          nomor_akad: val.no_perjanjian_kredit,
                          tgl_akad: new Date(val.tgl_pk),
                          tgl_penarikan: new Date(val.tgl_awal_pertanggungan),
                          tgl_jatuh_tempo: new Date(
                            val.tgl_akhir_pertanggungan
                          ),
                          nilai_akad: val.plafond_kredit,
                          tgl_penjaminan: val.tgl_sertifikat,
                          nomor_penjaminan: val.no_sertifikat,
                          nilai_dijamin: val.nilai_pertanggungan,
                          sektor: val.sektor_ekonomi,
                        });
                        console.log(
                          "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/" +
                            kode_bank_lama_sikp +
                            "/" +
                            rekening_lama_sikp
                        );
                        request(
                          {
                            url:
                              "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/" +
                              kode_bank_lama_sikp +
                              "/" +
                              rekening_lama_sikp,
                            // agent: agent,
                            json: {
                              rekening_baru: val.no_rekening_pinjaman.replace(
                                /[^0-9a-z_]/gi,
                                ""
                              ),
                              kode_bank: val.kode_bank,
                              nik: val.no_id_debitur,
                              rekening_lama: val.no_rek_lama,
                              status_akad: "B",
                              status_rekening: 1,
                              nomor_akad: val.no_perjanjian_kredit,
                              tgl_akad: new Date(val.tgl_pk),
                              tgl_penarikan: new Date(
                                val.tgl_awal_pertanggungan
                              ),
                              tgl_jatuh_tempo: new Date(
                                val.tgl_akhir_pertanggungan
                              ),
                              nilai_akad: val.plafond_kredit,
                              tgl_penjaminan: val.tgl_sertifikat,
                              nomor_penjaminan: val.no_sertifikat,
                              nilai_dijamin: val.nilai_pertanggungan,
                              sektor: val.sektor_ekonomi,
                            },
                            method: "PUT",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error4, response4, body4) {
                            if (error4) {
                              console.log(error4);
                            } else {
                              console.log(body4);
                              if (response4.statusCode != 200) {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                    // agent: agent,
                                    json: {
                                      username: "askrindo",
                                      password: "bzMjN9Wc8DeATBKh",
                                      // "password" :"development"
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                    },
                                  },
                                  function (errorfix, responsefix, bodyfix) {
                                    if (errorfix) {
                                      console.log(errorfix);
                                    } else {
                                      body.data = bodyfix.data;
                                      console.log("REFRESH TOKEN");
                                      request(
                                        {
                                          url:
                                            "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/" +
                                            kode_bank_lama_sikp +
                                            "/" +
                                            rekening_lama_sikp,
                                          // agent: agent,
                                          json: {
                                            rekening_baru:
                                              val.no_rekening_pinjaman.replace(
                                                /[^0-9a-z_]/gi,
                                                ""
                                              ),
                                            kode_bank: val.kode_bank,
                                            nik: val.no_id_debitur,
                                            rekening_lama: val.no_rek_lama,
                                            status_akad: "B",
                                            status_rekening: 1,
                                            nomor_akad:
                                              val.no_perjanjian_kredit,
                                            tgl_akad: new Date(val.tgl_pk),
                                            tgl_penarikan: new Date(
                                              val.tgl_awal_pertanggungan
                                            ),
                                            tgl_jatuh_tempo: new Date(
                                              val.tgl_akhir_pertanggungan
                                            ),
                                            nilai_akad: val.plafond_kredit,
                                            tgl_penjaminan: val.tgl_sertifikat,
                                            nomor_penjaminan: val.no_sertifikat,
                                            nilai_dijamin:
                                              val.nilai_pertanggungan,
                                            sektor: val.sektor_ekonomi,
                                          },
                                          method: "POST",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (
                                          error4re,
                                          response4re,
                                          body4re
                                        ) {
                                          if (error4re) {
                                            console.log(error4re);
                                          } else {
                                            if (body4re.code === "45") {
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(200).json({
                                                  error: false,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: "put akad sukses!",
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD SUKSES!"
                                                );
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(200).json({
                                                  error: false,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: "put akad sukses!",
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD SUKSES!"
                                                );
                                              }
                                            } else {
                                              // insert akad gagal
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(400).json({
                                                  error: true,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: body4re.message,
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD GAGAL!, " +
                                                    body4re.message
                                                );
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(400).json({
                                                  error: true,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: body4re.message,
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD GAGAL!, " +
                                                    body4re.message
                                                );
                                              }
                                            }
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              } else if (body4.code === "45") {
                                if (i == params.length - 1) {
                                  sukses++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(200).json({
                                    error: false,
                                    id_penjaminan: json_fix.data_batch,
                                    message: "put akad sukses!",
                                  });
                                  resolve("PUT SIKP AKAD SUKSES!");
                                } else {
                                  sukses++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(200).json({
                                    error: false,
                                    id_penjaminan: json_fix.data_batch,
                                    message: "put akad sukses!",
                                  });
                                  resolve("PUT SIKP AKAD SUKSES!");
                                }
                              } else {
                                // insert akad gagal
                                if (i == params.length - 1) {
                                  gagal++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(400).json({
                                    error: true,
                                    id_penjaminan: json_fix.data_batch,
                                    message: body4.message,
                                  });
                                  resolve(
                                    "PUT SIKP AKAD GAGAL!, " + body4.message
                                  );
                                } else {
                                  gagal++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(400).json({
                                    error: true,
                                    id_penjaminan: json_fix.data_batch,
                                    message: body4.message,
                                  });
                                  resolve(
                                    "PUT SIKP AKAD GAGAL!, " + body4.message
                                  );
                                }
                              }
                            }
                          }
                        );
                      } else if (json_fix.status_sikp == "tagihan") {
                        request(
                          {
                            url:
                              "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan?kode_bank=" +
                              val.kode_bank +
                              "&nomor_rekening=" +
                              val.no_rekening_pinjaman,
                            // agent: agent,
                            method: "GET",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error6, response6, body6) {
                            if (error6) {
                              console.log(error6);
                            } else {
                              body6 = JSON.parse(body6);
                              if (body6.code === "56") {
                                var nomor_tagihan_new;

                                if (json_fix.nomor_tagihan) {
                                  nomor_tagihan_new = json_fix.nomor_tagihan;
                                } else {
                                  nomor_tagihan_new =
                                    body6.data[val.tahun_ke - 1].nomor_tagihan;
                                }
                                if (json_fix.nomor_rekening) {
                                  val.no_rekening_pinjaman =
                                    json_fix.nomor_rekening;
                                }
                                if (json_fix.kode_bank) {
                                  val.kode_bank = json_fix.kode_bank;
                                }
                                if (json_fix.outstanding) {
                                  val.plafond_kredit = json_fix.outstanding;
                                }
                                if (json_fix.nilai_ijp) {
                                  val.premi = json_fix.nilai_ijp;
                                }
                                if (json_fix.periode) {
                                  val.tahun_ke = json_fix.periode;
                                }

                                console.log({
                                  nomor_tagihan: nomor_tagihan_new,
                                  nomor_rekening: val.no_rekening_pinjaman,
                                  kode_bank: val.kode_bank,
                                  outstanding: val.plafond_kredit,
                                  tahun: dateFormat(new Date(), "yyyy"),
                                  nilai_ijp: val.premi,
                                  periode: val.tahun_ke,
                                });
                                request(
                                  {
                                    url:
                                      "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan/" +
                                      body6.data[val.tahun_ke - 1].id_tagihan,
                                    // agent: agent,
                                    json: {
                                      nomor_tagihan: nomor_tagihan_new,
                                      nomor_rekening: val.no_rekening_pinjaman,
                                      kode_bank: val.kode_bank,
                                      outstanding: val.plafond_kredit,
                                      tahun: dateFormat(new Date(), "yyyy"),
                                      nilai_ijp: val.premi,
                                      periode: val.tahun_ke,
                                    },
                                    method: "PUT",
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization: "Bearer " + body.data,
                                    },
                                  },
                                  function (error5, response5, body5) {
                                    if (error5) {
                                      console.log(error5);
                                    } else {
                                      console.log(body5);
                                      if (response5.statusCode != 200) {
                                        request(
                                          {
                                            url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                            // agent: agent,
                                            json: {
                                              username: "askrindo",
                                              password: "bzMjN9Wc8DeATBKh",
                                              // "password" :"development"
                                            },
                                            method: "POST",
                                            headers: {
                                              "Content-Type":
                                                "application/json",
                                            },
                                          },
                                          function (
                                            errorfix,
                                            responsefix,
                                            bodyfix
                                          ) {
                                            if (errorfix) {
                                              console.log(errorfix);
                                            } else {
                                              body.data = bodyfix.data;
                                              console.log("REFRESH TOKEN");
                                              request(
                                                {
                                                  url:
                                                    "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan/" +
                                                    body6.data[val.tahun_ke - 1]
                                                      .id_tagihan,
                                                  // agent: agent,
                                                  json: {
                                                    nomor_tagihan:
                                                      nomor_tagihan_new,
                                                    nomor_rekening:
                                                      val.no_rekening_pinjaman,
                                                    kode_bank: val.kode_bank,
                                                    outstanding:
                                                      val.plafond_kredit,
                                                    tahun: dateFormat(
                                                      new Date(),
                                                      "yyyy"
                                                    ),
                                                    nilai_ijp: val.premi,
                                                    periode: val.tahun_ke,
                                                  },
                                                  method: "PUT",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                    Authorization:
                                                      "Bearer " + body.data,
                                                  },
                                                },
                                                function (
                                                  error5re,
                                                  response5re,
                                                  body5re
                                                ) {
                                                  if (error5re) {
                                                    console.log(error5re);
                                                  } else {
                                                    console.log(body5re);
                                                    console.log(
                                                      "REFRESH TOKEN"
                                                    );
                                                    if (body5re.code === "45") {
                                                      console.log(
                                                        "tagihan sukses = " +
                                                          sukses +
                                                          " & gagal = " +
                                                          gagal
                                                      );
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        sukses++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(200).json({
                                                          error: false,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            "put tagihan sukses!",
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN SUKSES!"
                                                        );
                                                      } else {
                                                        sukses++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(200).json({
                                                          error: false,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            "put tagihan sukses!",
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN SUKSES!"
                                                        );
                                                      }
                                                    } else {
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        gagal++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(400).json({
                                                          error: true,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            body5re.message,
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN GAGAL! " +
                                                            body5re.message
                                                        );
                                                      } else {
                                                        gagal++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(400).json({
                                                          error: true,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            body5re.message,
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN GAGAL! " +
                                                            body5re.message
                                                        );
                                                      }
                                                      //insert tagihan gagal
                                                    }
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      } else if (body5.code === "45") {
                                        sukses++;
                                        if (i == params.length - 1) {
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(200).json({
                                            error: false,
                                            id_penjaminan: json_fix.data_batch,
                                            message: "put tagihan sukses!",
                                          });
                                          resolve("PUT SIKP TAGIHAN SUKSES!");
                                        } else {
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(200).json({
                                            error: false,
                                            id_penjaminan: json_fix.data_batch,
                                            message: "put tagihan sukses!",
                                          });
                                          resolve("PUT SIKP TAGIHAN SUKSES!");
                                        }
                                      } else {
                                        if (i == params.length - 1) {
                                          gagal++;
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(400).json({
                                            error: true,
                                            id_penjaminan: json_fix.data_batch,
                                            message: body5.message,
                                          });
                                          resolve(
                                            "PUT SIKP TAGIHAN GAGAL! " +
                                              body5.message
                                          );
                                        } else {
                                          gagal++;
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(400).json({
                                            error: true,
                                            id_penjaminan: json_fix.data_batch,
                                            message: body5.message,
                                          });
                                          resolve(
                                            "PUT SIKP TAGIHAN GAGAL! " +
                                              body5.message
                                          );
                                        }
                                        //insert tagihan gagal
                                      }
                                    }
                                  }
                                );
                              } else {
                                resolve("GAGAL, DATA SIKP TIDAK DITEMUKAN!");
                              }
                            }
                          }
                        );
                      } else {
                        resolve("GAGAL, INVALID COMMAND!");
                      }
                    }, i * 2000);
                  });
                } else {
                  resolve("GAGAL, DATA TIDAK DITEMUKAN!");
                }
              });
            }
          }
        }
      );
    });
  }
};

exports.putSIKPBatch = async function (req, res) {
  var agent;
  agentOptions = {
    host: "202.61.126.162",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };
  agent = new https.Agent(agentOptions);
  var put_sikp_validation;
  var Validator = require("jsonschema").Validator;
  var v = new Validator();
  console.log(req.body);
  if (req.body.status_sikp == "calon") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        data_batch: { type: "string", minLength: 1 },
        status_sikp: { type: "string", minLength: 1 },
        nik_lama: { type: "string", minLength: 1, maxLength: 16 },
        nama: { type: "string", minLength: 1 },
        tgl_lahir: { type: "string" },
        jns_kelamin: { type: "number", minimum: 1 },
        maritas_sts: { type: "number", minimum: 1 },
        pendidikan: { type: "number", minimum: 1 },
        pekerjaan: { type: "number", minimum: 1 },
        jns_debitur: { type: "string", minLength: 1 },
        alamat: { type: "string", minLength: 1 },
        kode_kabkota: { type: "string", minLength: 1 },
        kode_pos: { type: "string" },
        npwp: { type: "string" },
        mulai_usaha: { type: "string" },
        alamat_usaha: { type: "string", minLength: 1 },
        ijin_usaha: { type: "string" },
        modal_usaha: { type: "number" },
        jml_pekerja: { type: "number", minimum: 1 },
        no_hp: { type: "string" },
        uraian_agunan: { type: "string" },
      },
      additionalProperties: false,
    };
  } else if (req.body.status_sikp == "akad") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        data_batch: { type: "string", minLength: 1 },
        status_sikp: { type: "string", maxLength: 30 },
        rekening_baru: { type: "string", minLength: 1 },
        kode_bank: { type: "string", minLength: 1 },
        nik_lama: { type: "string", minLength: 1 },
        rekening_lama: { type: "string" },
        status_akad: { type: "string", minLength: 1 },
        status_rekening: { type: "number", minimum: 1 },
        nomor_akad: { type: "string", minLength: 1 },
        tgl_akad: { type: "string", minLength: 8 },
        tgl_penarikan: { type: "string", minLength: 8 },
        tgl_jatuh_tempo: { type: "string", minLength: 8 },
        nilai_akad: { type: "number", minimum: 1 },
        tgl_penjaminan: { type: "string", minLength: 1 },
        nomor_penjaminan: { type: "string", minLength: 1 },
        nilai_dijamin: { type: "number", minimum: 1 },
        sektor: { type: "string", minLength: 1 },
      },
      additionalProperties: false,
    };
  } else if (req.body.status_sikp == "tagihan") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        data_batch: { type: "string", minLength: 1 },
        status_sikp: { type: "string", minLength: 1 },
        nomor_tagihan: { type: "string", minLength: 1 },
        nomor_rekening: { type: "string", minLength: 1 },
        kode_bank: { type: "string", minLength: 1 },
        outstanding: { type: "number", minimum: 1 },
        tahun: { type: "number", minimum: 2020 },
        nilai_ijp: { type: "number", minimum: 1 },
        periode: { type: "number", minimum: 1 },
      },
      additionalProperties: false,
    };
  } else if (req.body.status_sikp == "debitur") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        data_batch: { type: "string", minLength: 1 },
        status_sikp: { type: "string", minLength: 1 },
        nik_lama: { type: "string", minLength: 1, maxLength: 16 },
        nama: { type: "string", minLength: 1 },
        tgl_lahir: { type: "string" },
        jns_kelamin: { type: "number", minimum: 1 },
        maritas_sts: { type: "number", minimum: 1 },
        pendidikan: { type: "number", minimum: 1 },
        pekerjaan: { type: "number", minimum: 1 },
        jns_debitur: { type: "string", minLength: 1 },
        alamat: { type: "string", minLength: 1 },
        kode_kabkota: { type: "string", minLength: 1 },
        kode_pos: { type: "string" },
        npwp: { type: "string" },
        mulai_usaha: { type: "string" },
        alamat_usaha: { type: "string", minLength: 1 },
        ijin_usaha: { type: "string" },
        modal_usaha: { type: "number" },
        jml_pekerja: { type: "number", minimum: 1 },
        no_hp: { type: "string" },
        uraian_agunan: { type: "string" },
      },
      additionalProperties: false,
    };
  } else {
    res.status(400).json({
      errorMessage:
        'Status SIKP Salah, isi dengan "calon", "akad", atau "debitur"!',
    });
  }

  var results = v.validate(req.body, put_sikp_validation);
  if (results.errors.length > 0) {
    var json_ori = JSON.stringify(req.body).replace(/""|" "/g, "null");
    var json_fix = JSON.parse(json_ori);
    console.log(json_fix);
    var messages = [];
    for (i = 0; i < results.errors.length; i++) {
      if (results.errors[i].name === "additionalProperties") {
        messages.push({
          status: false,
          errorCode: "0102",
          errorType: "JSON Structure Error",
          errorMessage:
            "Field JSON " + results.errors[i].argument + " Not Allowed",
          trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
        });
      } else if (results.errors[i].name !== "additionalProperties") {
        if (results.errors[i].name === "type") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "Datatype of " +
              results.errors[i].property.split("instance.").join("") +
              " must be " +
              results.errors[i].argument[0],
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "required") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].argument.split("instance.").join("") +
              " is Required",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "minLength") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].property.split("instance.").join("") +
              " cannot be empty/below minimum length",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "maxLength") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].property.split("instance.").join("") +
              " violates maximal length of string",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "minimum") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].property.split("instance.").join("") +
              " violates minimum amount of number",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else {
          messages.push({
            status: false,
            errorCode: "",
            errorType: "Internal Server Error",
            errorMessage: "",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        }
      }
    }
    res.status(400).json(messages);
  } else {
    var json_ori = JSON.stringify(req.body).replace(/""|" "/g, "null");
    var json_fix = JSON.parse(json_ori);
    return new Promise((resolve) => {
      request(
        {
          url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
          // agent: agent,
          json: {
            username: "askrindo",
            password: "bzMjN9Wc8DeATBKh",
            // "password" :"development"
          },
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        },
        function (error, response, body) {
          if (error) {
            console.log(error);
          } else {
            console.log(body);
            if (body.data && body.data != "") {
              getPenjaminanBatch(json_fix.data_batch).then(function (params) {
                if (params) {
                  var sukses = 0;
                  var gagal = 0;
                  params.forEach((val, i) => {
                    setTimeout(function () {
                      if (json_fix.status_sikp == "calon") {
                        var substring_ktp;
                        var nik_lama;
                        var alamat_usaha;
                        if (json_fix.nik_lama) {
                          nik_lama = json_fix.nik_lama;
                        } else {
                          nik_lama = val.no_id_debitur;
                        }
                        getKodeKotaSIKP(val.kode_pos).then(
                          function (kode_sikp_get) {
                            if (kode_sikp_get.length == 0) {
                              substring_ktp = val.no_id_debitur.substring(0, 4);
                            } else {
                              substring_ktp = kode_sikp_get[0].kode_kabkota;
                            }
                            request(
                              {
                                url:
                                  "http://10.238.136.117/pen-umkm-dev/api/v1/Referensi/KabKota/" +
                                  substring_ktp,
                                // agent: agent,
                                method: "GET",
                                json: {},
                                headers: {
                                  "Content-Type": "application/json",
                                  Authorization: "Bearer " + body.data,
                                },
                              },
                              function (error2, response2, body2) {
                                if (error2) {
                                  console.log(error2);
                                } else {
                                  if (response2.statusCode != 200) {
                                    request(
                                      {
                                        url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                        // agent: agent,
                                        json: {
                                          username: "askrindo",
                                          password: "bzMjN9Wc8DeATBKh",
                                          // "password" :"development"
                                        },
                                        method: "POST",
                                        headers: {
                                          "Content-Type": "application/json",
                                        },
                                      },
                                      function (
                                        errorfix,
                                        responsefix,
                                        bodyfix
                                      ) {
                                        if (errorfix) {
                                          console.log(errorfix);
                                        } else {
                                          body.data = bodyfix.data;
                                          console.log("REFRESH TOKEN");
                                        }
                                      }
                                    );
                                  } else if (body2.code === "51") {
                                    console.log(body2);
                                    getAgunan(val.id_penjaminan).then(function (
                                      agunan
                                    ) {
                                      var uraian_agunan = "";
                                      if (agunan.length === 0) {
                                        uraian_agunan = null;
                                      } else {
                                        uraian_agunan = agunan[0].label;
                                      }

                                      if (json_fix.nama) {
                                        val.nama_debitur = json_fix.nama;
                                      }
                                      if (json_fix.tgl_lahir) {
                                        val.tgl_lahir = json_fix.tgl_lahir;
                                      }
                                      if (json_fix.jns_kelamin) {
                                        val.jenis_kelamin =
                                          json_fix.jns_kelamin;
                                      }
                                      if (json_fix.maritas_sts) {
                                        val.maritas_status =
                                          json_fix.maritas_sts;
                                      }
                                      if (json_fix.pendidikan) {
                                        val.pendidikan = json_fix.pendidikan;
                                      }
                                      if (json_fix.pekerjaan) {
                                        val.jenis_pekerjaan =
                                          json_fix.pekerjaan;
                                      }
                                      if (json_fix.alamat) {
                                        val.alamat_debitur = json_fix.alamat;
                                      }
                                      if (json_fix.kode_pos) {
                                        val.kode_pos = json_fix.kode_pos;
                                      }
                                      if (json_fix.npwp) {
                                        val.npwp = json_fix.npwp;
                                      }
                                      if (json_fix.mulai_usaha) {
                                        val.tgl_mulai_usaha =
                                          json_fix.mulai_usaha;
                                      }
                                      if (json_fix.alamat_usaha) {
                                        alamat_usaha = json_fix.alamat_usaha;
                                      } else {
                                        alamat_usaha = val.alamat_debitur;
                                      }
                                      if (json_fix.ijin_usaha) {
                                        val.no_ijin_usaha = json_fix.ijin_usaha;
                                      }
                                      if (json_fix.modal_usaha) {
                                        val.modal_usaha = json_fix.modal_usaha;
                                      }
                                      if (json_fix.no_hp) {
                                        val.no_hp_debitur = json_fix.no_hp;
                                      }
                                      if (json_fix.uraian_agunan) {
                                        uraian_agunan = json_fix.uraian_agunan;
                                      }
                                      if (val.npwp) {
                                        val.npwp = val.npwp.replace(
                                          /[^0-9a-z]/gi,
                                          ""
                                        );
                                      } else {
                                        val.npwp = null;
                                      }
                                      console.log({
                                        nik: val.no_id_debitur,
                                        nama: val.nama_debitur,
                                        tgl_lahir: val.tgl_lahir,
                                        jns_kelamin: val.jenis_kelamin,
                                        maritas_sts: val.marital_status,
                                        pendidikan: val.pendidikan,
                                        pekerjaan: val.jenis_pekerjaan,
                                        jns_debitur: "R",
                                        alamat: val.alamat_debitur,
                                        kode_kabkota: body2.data.kode,
                                        kode_pos: val.kode_pos,
                                        npwp: val.npwp,
                                        mulai_usaha: val.tgl_mulai_usaha,
                                        alamat_usaha: alamat_usaha,
                                        ijin_usaha: val.no_ijin_usaha,
                                        modal_usaha: val.modal_usaha,
                                        jml_pekerja: 1,
                                        jml_kredit: val.plafond_kredit,
                                        no_hp: val.no_hp_debitur,
                                        uraian_agunan: uraian_agunan,
                                      });
                                      var tgl_lahir;
                                      if (val.jenis_kelamin == "9") {
                                        tgl_lahir = null;
                                      } else {
                                        tgl_lahir = new Date(val.tgl_lahir);
                                      }
                                      if (!val.tgl_mulai_usaha) {
                                        val.tgl_mulai_usaha =
                                          val.tgl_mulai_usaha;
                                      } else {
                                        new Date(val.tgl_mulai_usaha);
                                      }
                                      request(
                                        {
                                          url:
                                            "http://10.238.136.117/pen-umkm-dev/api/v1/Calon/" +
                                            nik_lama,
                                          // agent: agent,
                                          json: {
                                            nik: val.no_id_debitur,
                                            nama: val.nama_debitur,
                                            tgl_lahir: tgl_lahir,
                                            jns_kelamin: val.jenis_kelamin,
                                            maritas_sts: val.marital_status,
                                            pendidikan: val.pendidikan,
                                            pekerjaan: val.jenis_pekerjaan,
                                            jns_debitur: "R",
                                            alamat: val.alamat_debitur,
                                            kode_kabkota: body2.data.kode,
                                            kode_pos: val.kode_pos,
                                            npwp: val.npwp,
                                            mulai_usaha: val.tgl_mulai_usaha,
                                            alamat_usaha: alamat_usaha,
                                            ijin_usaha: val.no_ijin_usaha,
                                            modal_usaha: val.modal_usaha,
                                            jml_pekerja: 1,
                                            jml_kredit: val.plafond_kredit,
                                            no_hp: val.no_hp_debitur,
                                            uraian_agunan: uraian_agunan,
                                          },
                                          method: "PUT",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (error3, response3, body3) {
                                          if (error3) {
                                            console.log(error3);
                                          } else {
                                            console.log(body3);
                                            if (response3.statusCode != 200) {
                                              request(
                                                {
                                                  url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                                  // agent: agent,
                                                  json: {
                                                    username: "askrindo",
                                                    password:
                                                      "bzMjN9Wc8DeATBKh",
                                                    // "password" :"development"
                                                  },
                                                  method: "POST",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                  },
                                                },
                                                function (
                                                  errorfix,
                                                  responsefix,
                                                  bodyfix
                                                ) {
                                                  if (errorfix) {
                                                    console.log(errorfix);
                                                  } else {
                                                    body.data = bodyfix.data;
                                                    console.log(
                                                      "REFRESH TOKEN"
                                                    );
                                                    request(
                                                      {
                                                        url:
                                                          "http://10.238.136.117/pen-umkm-dev/api/v1/Calon/" +
                                                          nik_lama,
                                                        // agent: agent,
                                                        json: {
                                                          nik: val.no_id_debitur,
                                                          nama: val.nama_debitur,
                                                          tgl_lahir: tgl_lahir,
                                                          jns_kelamin:
                                                            val.jenis_kelamin,
                                                          maritas_sts:
                                                            val.marital_status,
                                                          pendidikan:
                                                            val.pendidikan,
                                                          pekerjaan:
                                                            val.jenis_pekerjaan,
                                                          jns_debitur: "R",
                                                          alamat:
                                                            val.alamat_debitur,
                                                          kode_kabkota:
                                                            body2.data.kode,
                                                          kode_pos:
                                                            val.kode_pos,
                                                          npwp: val.npwp,
                                                          mulai_usaha:
                                                            val.tgl_mulai_usaha,
                                                          alamat_usaha:
                                                            alamat_usaha,
                                                          ijin_usaha:
                                                            val.no_ijin_usaha,
                                                          modal_usaha:
                                                            val.modal_usaha,
                                                          jml_pekerja: 1,
                                                          jml_kredit:
                                                            val.plafond_kredit,
                                                          no_hp:
                                                            val.no_hp_debitur,
                                                          uraian_agunan:
                                                            uraian_agunan,
                                                        },
                                                        method: "PUT",
                                                        headers: {
                                                          "Content-Type":
                                                            "application/json",
                                                          Authorization:
                                                            "Bearer " +
                                                            body.data,
                                                        },
                                                      },
                                                      function (
                                                        error3re,
                                                        response3re,
                                                        body3re
                                                      ) {
                                                        if (error3) {
                                                          console.log(error3re);
                                                        } else {
                                                          console.log(body3re);

                                                          if (
                                                            body3re.code ===
                                                            "45"
                                                          ) {
                                                            if (
                                                              i ==
                                                              params.length - 1
                                                            ) {
                                                              sukses++;
                                                              console.log(
                                                                "put calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              res
                                                                .status(200)
                                                                .json({
                                                                  error: false,
                                                                  id_penjaminan:
                                                                    json_fix.data_batch,
                                                                  message:
                                                                    "put calon sukses!",
                                                                });
                                                              resolve(
                                                                "PUT SIKP CALON SUKSES!"
                                                              );
                                                            } else {
                                                              sukses++;
                                                              console.log(
                                                                "put calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              res
                                                                .status(200)
                                                                .json({
                                                                  error: false,
                                                                  id_penjaminan:
                                                                    json_fix.data_batch,
                                                                  message:
                                                                    "put calon sukses!",
                                                                });
                                                              resolve(
                                                                "PUT SIKP CALON SUKSES!"
                                                              );
                                                            }
                                                          } else if (
                                                            body3re.code ===
                                                            "07"
                                                          ) {
                                                            request(
                                                              {
                                                                url:
                                                                  "http://10.238.136.117/pen-umkm-dev/api/v1/Debitur/" +
                                                                  nik_lama,
                                                                // agent: agent,
                                                                json: {
                                                                  nik: val.no_id_debitur,
                                                                  nama: val.nama_debitur,
                                                                  tgl_lahir:
                                                                    tgl_lahir,
                                                                  jns_kelamin:
                                                                    val.jenis_kelamin,
                                                                  maritas_sts:
                                                                    val.marital_status,
                                                                  pendidikan:
                                                                    val.pendidikan,
                                                                  pekerjaan:
                                                                    val.jenis_pekerjaan,
                                                                  jns_debitur:
                                                                    "R",
                                                                  alamat:
                                                                    val.alamat_debitur,
                                                                  kode_kabkota:
                                                                    body2.data
                                                                      .kode,
                                                                  kode_pos:
                                                                    val.kode_pos,
                                                                  npwp: val.npwp,
                                                                  mulai_usaha:
                                                                    val.tgl_mulai_usaha,
                                                                  alamat_usaha:
                                                                    alamat_usaha,
                                                                  ijin_usaha:
                                                                    val.no_ijin_usaha,
                                                                  modal_usaha:
                                                                    val.modal_usaha,
                                                                  jml_pekerja: 1,
                                                                  jml_kredit:
                                                                    val.plafond_kredit,
                                                                  no_hp:
                                                                    val.no_hp_debitur,
                                                                  uraian_agunan:
                                                                    uraian_agunan,
                                                                },
                                                                method: "PUT",
                                                                headers: {
                                                                  "Content-Type":
                                                                    "application/json",
                                                                  Authorization:
                                                                    "Bearer " +
                                                                    body.data,
                                                                },
                                                              },
                                                              function (
                                                                error7,
                                                                response7,
                                                                body7
                                                              ) {
                                                                if (error7) {
                                                                  console.log(
                                                                    error7
                                                                  );
                                                                } else {
                                                                  console.log(
                                                                    body7
                                                                  );

                                                                  if (
                                                                    body7.code ===
                                                                    "45"
                                                                  ) {
                                                                    if (
                                                                      i ==
                                                                      params.length -
                                                                        1
                                                                    ) {
                                                                      sukses++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );
                                                                      res
                                                                        .status(
                                                                          200
                                                                        )
                                                                        .json({
                                                                          error: false,
                                                                          id_penjaminan:
                                                                            json_fix.data_batch,
                                                                          message:
                                                                            "put debitur sukses!",
                                                                        });
                                                                      resolve(
                                                                        "PUT SIKP DEBITUR SUKSES!"
                                                                      );
                                                                    } else {
                                                                      sukses++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );

                                                                      resolve(
                                                                        "PUT SIKP DEBITUR SUKSES!"
                                                                      );
                                                                    }
                                                                  } else {
                                                                    if (
                                                                      i ==
                                                                      params.length -
                                                                        1
                                                                    ) {
                                                                      gagal++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );
                                                                      //insert debitur gagal
                                                                      res
                                                                        .status(
                                                                          400
                                                                        )
                                                                        .json({
                                                                          error: true,
                                                                          id_penjaminan:
                                                                            json_fix.data_batch,
                                                                          message:
                                                                            body7.message,
                                                                        });
                                                                      resolve(
                                                                        "PUT SIKP DEBITUR GAGAL!, " +
                                                                          body7.message
                                                                      );
                                                                    } else {
                                                                      gagal++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );
                                                                      //insert debitur gagal

                                                                      resolve(
                                                                        "PUT SIKP DEBITUR GAGAL!, " +
                                                                          body7.message
                                                                      );
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            );
                                                          } else {
                                                            if (
                                                              i ==
                                                              params.length - 1
                                                            ) {
                                                              gagal++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              //insert calon gagal
                                                              res
                                                                .status(400)
                                                                .json({
                                                                  error: true,
                                                                  id_penjaminan:
                                                                    json_fix.data_batch,
                                                                  message:
                                                                    body3re.message,
                                                                });
                                                              resolve(
                                                                "PUT SIKP CALON GAGAL!, " +
                                                                  body3re.message
                                                              );
                                                            } else {
                                                              gagal++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              //insert calon gagal

                                                              resolve(
                                                                "PUT SIKP DEBITUR GAGAL!, " +
                                                                  body3re.message
                                                              );
                                                            }
                                                          }
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            } else if (body3.code === "45") {
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(200).json({
                                                  error: false,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: "put calon sukses!",
                                                });
                                                resolve(
                                                  "PUT SIKP CALON SUKSES!"
                                                );
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );

                                                resolve(
                                                  "PUT SIKP CALON SUKSES!"
                                                );
                                              }
                                            } else if (body3.code === "07") {
                                              request(
                                                {
                                                  url:
                                                    "http://10.238.136.117/pen-umkm-dev/api/v1/Debitur/" +
                                                    nik_lama,
                                                  // agent: agent,
                                                  json: {
                                                    nik: val.no_id_debitur,
                                                    nama: val.nama_debitur,
                                                    tgl_lahir: tgl_lahir,
                                                    jns_kelamin:
                                                      val.jenis_kelamin,
                                                    maritas_sts:
                                                      val.marital_status,
                                                    pendidikan: val.pendidikan,
                                                    pekerjaan:
                                                      val.jenis_pekerjaan,
                                                    jns_debitur: "R",
                                                    alamat: val.alamat_debitur,
                                                    kode_kabkota:
                                                      body2.data.kode,
                                                    kode_pos: val.kode_pos,
                                                    npwp: val.npwp,
                                                    mulai_usaha:
                                                      val.tgl_mulai_usaha,
                                                    alamat_usaha: alamat_usaha,
                                                    ijin_usaha:
                                                      val.no_ijin_usaha,
                                                    modal_usaha:
                                                      val.modal_usaha,
                                                    jml_pekerja: 1,
                                                    jml_kredit:
                                                      val.plafond_kredit,
                                                    no_hp: val.no_hp_debitur,
                                                    uraian_agunan:
                                                      uraian_agunan,
                                                  },
                                                  method: "PUT",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                    Authorization:
                                                      "Bearer " + body.data,
                                                  },
                                                },
                                                function (
                                                  error7,
                                                  response7,
                                                  body7
                                                ) {
                                                  if (error7) {
                                                    console.log(error7);
                                                  } else {
                                                    console.log(body7);

                                                    if (body7.code === "45") {
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        sukses++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(200).json({
                                                          error: false,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            "put debitur sukses!",
                                                        });
                                                        resolve(
                                                          "PUT SIKP DEBITUR SUKSES!"
                                                        );
                                                      } else {
                                                        sukses++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );

                                                        resolve(
                                                          "PUT SIKP DEBITUR SUKSES!"
                                                        );
                                                      }
                                                    } else {
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        gagal++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        //insert debitur gagal
                                                        res.status(400).json({
                                                          error: true,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            body7.message,
                                                        });
                                                        resolve(
                                                          "PUT SIKP DEBITUR GAGAL!, " +
                                                            body7.message
                                                        );
                                                      } else {
                                                        gagal++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        //insert debitur gagal

                                                        resolve(
                                                          "PUT SIKP DEBITUR GAGAL!, " +
                                                            body7.message
                                                        );
                                                      }
                                                    }
                                                  }
                                                }
                                              );
                                            } else {
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal
                                                res.status(400).json({
                                                  error: true,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: body3.message,
                                                });
                                                resolve(
                                                  "PUT SIKP CALON GAGAL!, " +
                                                    body3.message
                                                );
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal

                                                resolve(
                                                  "PUT SIKP CALON GAGAL!, " +
                                                    body3.message
                                                );
                                              }
                                            }
                                          }
                                        }
                                      );
                                    });
                                  } else {
                                    gagal++;
                                    console.log(
                                      "Calon sukses = " +
                                        sukses +
                                        " & gagal = " +
                                        gagal
                                    );
                                    res.status(400).json({
                                      error: true,
                                      id_penjaminan: json_fix.data_batch,
                                      message: body2.message,
                                    });
                                    resolve(
                                      "PUT SIKP CALON GAGAL!, " + body2.message
                                    );
                                  }
                                }
                              }
                            );
                          }
                        );
                      } else if (json_fix.status_sikp == "akad") {
                        var rekening_lama_sikp;
                        var kode_bank_lama_sikp;
                        if (val.no_rek_lama) {
                          if (json_fix.rekening_lama) {
                            val.no_rek_lama = json_fix.rekening_lama;
                          }
                          val.no_rek_lama = val.no_rek_lama.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          );
                        }
                        if (json_fix.rekening_baru) {
                          rekening_lama_sikp = json_fix.rekening_baru;
                          val.no_rekening_pinjaman =
                            val.no_rekening_pinjaman.replace(
                              /[^0-9a-z_]/gi,
                              ""
                            );
                        } else {
                          rekening_lama_sikp = val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          );
                        }
                        if (json_fix.kode_bank) {
                          kode_bank_lama_sikp = json_fix.kode_bank;
                        } else {
                          kode_bank_lama_sikp = val.kode_bank;
                        }
                        if (json_fix.nik_lama) {
                          val.no_id_debitur = json_fix.nik_lama;
                        }
                        if (json_fix.nomor_akad) {
                          val.no_perjanjian_kredit = json_fix.nomor_akad;
                        }
                        if (json_fix.tgl_akad) {
                          val.tgl_pk = json_fix.tgl_akad;
                        }
                        if (json_fix.tgl_penarikan) {
                          val.tgl_awal_pertanggungan = json_fix.tgl_penarikan;
                        }
                        if (json_fix.tgl_jatuh_tempo) {
                          val.tgl_akhir_pertanggungan =
                            json_fix.tgl_jatuh_tempo;
                        }
                        if (json_fix.nilai_akad) {
                          val.plafond_kredit = json_fix.nilai_akad;
                        }
                        if (json_fix.tgl_penjaminan) {
                          val.tgl_sertifikat = json_fix.tgl_penjaminan;
                        }
                        if (json_fix.nomor_penjaminan) {
                          val.no_sertifikat = json_fix.nomor_penjaminan;
                        }
                        if (json_fix.nilai_dijamin) {
                          val.nilai_pertanggungan = json_fix.nilai_dijamin;
                        }
                        if (json_fix.sektor) {
                          val.sektor_ekonomi = json_fix.sektor;
                        }

                        console.log({
                          rekening_baru: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          nik: val.no_id_debitur,
                          rekening_lama: val.no_rek_lama,
                          status_akad: "B",
                          status_rekening: 1,
                          nomor_akad: val.no_perjanjian_kredit,
                          tgl_akad: new Date(val.tgl_pk),
                          tgl_penarikan: new Date(val.tgl_awal_pertanggungan),
                          tgl_jatuh_tempo: new Date(
                            val.tgl_akhir_pertanggungan
                          ),
                          nilai_akad: val.plafond_kredit,
                          tgl_penjaminan: val.tgl_sertifikat,
                          nomor_penjaminan: val.no_sertifikat,
                          nilai_dijamin: val.nilai_pertanggungan,
                          sektor: val.sektor_ekonomi,
                        });
                        console.log(
                          "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/" +
                            kode_bank_lama_sikp +
                            "/" +
                            rekening_lama_sikp
                        );
                        request(
                          {
                            url:
                              "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/" +
                              kode_bank_lama_sikp +
                              "/" +
                              rekening_lama_sikp,
                            // agent: agent,
                            json: {
                              rekening_baru: val.no_rekening_pinjaman.replace(
                                /[^0-9a-z_]/gi,
                                ""
                              ),
                              kode_bank: val.kode_bank,
                              nik: val.no_id_debitur,
                              rekening_lama: val.no_rek_lama,
                              status_akad: "B",
                              status_rekening: 1,
                              nomor_akad: val.no_perjanjian_kredit,
                              tgl_akad: new Date(val.tgl_pk),
                              tgl_penarikan: new Date(
                                val.tgl_awal_pertanggungan
                              ),
                              tgl_jatuh_tempo: new Date(
                                val.tgl_akhir_pertanggungan
                              ),
                              nilai_akad: val.plafond_kredit,
                              tgl_penjaminan: val.tgl_sertifikat,
                              nomor_penjaminan: val.no_sertifikat,
                              nilai_dijamin: val.nilai_pertanggungan,
                              sektor: val.sektor_ekonomi,
                            },
                            method: "PUT",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error4, response4, body4) {
                            if (error4) {
                              console.log(error4);
                            } else {
                              console.log(body4);
                              if (response4.statusCode != 200) {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                    // agent: agent,
                                    json: {
                                      username: "askrindo",
                                      password: "bzMjN9Wc8DeATBKh",
                                      // "password" :"development"
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                    },
                                  },
                                  function (errorfix, responsefix, bodyfix) {
                                    if (errorfix) {
                                      console.log(errorfix);
                                    } else {
                                      body.data = bodyfix.data;
                                      console.log("REFRESH TOKEN");
                                      request(
                                        {
                                          url:
                                            "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/" +
                                            kode_bank_lama_sikp +
                                            "/" +
                                            rekening_lama_sikp,
                                          // agent: agent,
                                          json: {
                                            rekening_baru:
                                              val.no_rekening_pinjaman.replace(
                                                /[^0-9a-z_]/gi,
                                                ""
                                              ),
                                            kode_bank: val.kode_bank,
                                            nik: val.no_id_debitur,
                                            rekening_lama: val.no_rek_lama,
                                            status_akad: "B",
                                            status_rekening: 1,
                                            nomor_akad:
                                              val.no_perjanjian_kredit,
                                            tgl_akad: new Date(val.tgl_pk),
                                            tgl_penarikan: new Date(
                                              val.tgl_awal_pertanggungan
                                            ),
                                            tgl_jatuh_tempo: new Date(
                                              val.tgl_akhir_pertanggungan
                                            ),
                                            nilai_akad: val.plafond_kredit,
                                            tgl_penjaminan: val.tgl_sertifikat,
                                            nomor_penjaminan: val.no_sertifikat,
                                            nilai_dijamin:
                                              val.nilai_pertanggungan,
                                            sektor: val.sektor_ekonomi,
                                          },
                                          method: "POST",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (
                                          error4re,
                                          response4re,
                                          body4re
                                        ) {
                                          if (error4re) {
                                            console.log(error4re);
                                          } else {
                                            if (body4re.code === "45") {
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(200).json({
                                                  error: false,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: "put akad sukses!",
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD SUKSES!"
                                                );
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(200).json({
                                                  error: false,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: "put akad sukses!",
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD SUKSES!"
                                                );
                                              }
                                            } else {
                                              // insert akad gagal
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(400).json({
                                                  error: true,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: body4re.message,
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD GAGAL!, " +
                                                    body4re.message
                                                );
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(400).json({
                                                  error: true,
                                                  id_penjaminan:
                                                    json_fix.data_batch,
                                                  message: body4re.message,
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD GAGAL!, " +
                                                    body4re.message
                                                );
                                              }
                                            }
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              } else if (body4.code === "45") {
                                if (i == params.length - 1) {
                                  sukses++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(200).json({
                                    error: false,
                                    id_penjaminan: json_fix.data_batch,
                                    message: "put akad sukses!",
                                  });
                                  resolve("PUT SIKP AKAD SUKSES!");
                                } else {
                                  sukses++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(200).json({
                                    error: false,
                                    id_penjaminan: json_fix.data_batch,
                                    message: "put akad sukses!",
                                  });
                                  resolve("PUT SIKP AKAD SUKSES!");
                                }
                              } else {
                                // insert akad gagal
                                if (i == params.length - 1) {
                                  gagal++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(400).json({
                                    error: true,
                                    id_penjaminan: json_fix.data_batch,
                                    message: body4.message,
                                  });
                                  resolve(
                                    "PUT SIKP AKAD GAGAL!, " + body4.message
                                  );
                                } else {
                                  gagal++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(400).json({
                                    error: true,
                                    id_penjaminan: json_fix.data_batch,
                                    message: body4.message,
                                  });
                                  resolve(
                                    "PUT SIKP AKAD GAGAL!, " + body4.message
                                  );
                                }
                              }
                            }
                          }
                        );
                      } else if (json_fix.status_sikp == "tagihan") {
                        request(
                          {
                            url:
                              "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan?kode_bank=" +
                              val.kode_bank +
                              "&nomor_rekening=" +
                              val.no_rekening_pinjaman,
                            // agent: agent,
                            method: "GET",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error6, response6, body6) {
                            if (error6) {
                              console.log(error6);
                            } else {
                              body6 = JSON.parse(body6);
                              if (body6.code === "56") {
                                var nomor_tagihan_new;

                                if (json_fix.nomor_tagihan) {
                                  nomor_tagihan_new = json_fix.nomor_tagihan;
                                } else {
                                  nomor_tagihan_new =
                                    body6.data[val.tahun_ke - 1].nomor_tagihan;
                                }
                                if (json_fix.nomor_rekening) {
                                  val.no_rekening_pinjaman =
                                    json_fix.nomor_rekening;
                                }
                                if (json_fix.kode_bank) {
                                  val.kode_bank = json_fix.kode_bank;
                                }
                                if (json_fix.outstanding) {
                                  val.plafond_kredit = json_fix.outstanding;
                                }
                                if (json_fix.nilai_ijp) {
                                  val.premi = json_fix.nilai_ijp;
                                }
                                if (json_fix.periode) {
                                  val.tahun_ke = json_fix.periode;
                                }

                                console.log({
                                  nomor_tagihan: nomor_tagihan_new,
                                  nomor_rekening: val.no_rekening_pinjaman,
                                  kode_bank: val.kode_bank,
                                  outstanding: val.plafond_kredit,
                                  tahun: dateFormat(new Date(), "yyyy"),
                                  nilai_ijp: val.premi,
                                  periode: val.tahun_ke,
                                });
                                request(
                                  {
                                    url:
                                      "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan/" +
                                      body6.data[val.tahun_ke - 1].id_tagihan,
                                    // agent: agent,
                                    json: {
                                      nomor_tagihan: nomor_tagihan_new,
                                      nomor_rekening: val.no_rekening_pinjaman,
                                      kode_bank: val.kode_bank,
                                      outstanding: val.plafond_kredit,
                                      tahun: dateFormat(new Date(), "yyyy"),
                                      nilai_ijp: val.premi,
                                      periode: val.tahun_ke,
                                    },
                                    method: "PUT",
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization: "Bearer " + body.data,
                                    },
                                  },
                                  function (error5, response5, body5) {
                                    if (error5) {
                                      console.log(error5);
                                    } else {
                                      console.log(body5);
                                      if (response5.statusCode != 200) {
                                        request(
                                          {
                                            url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                            // agent: agent,
                                            json: {
                                              username: "askrindo",
                                              password: "bzMjN9Wc8DeATBKh",
                                              // "password" :"development"
                                            },
                                            method: "POST",
                                            headers: {
                                              "Content-Type":
                                                "application/json",
                                            },
                                          },
                                          function (
                                            errorfix,
                                            responsefix,
                                            bodyfix
                                          ) {
                                            if (errorfix) {
                                              console.log(errorfix);
                                            } else {
                                              body.data = bodyfix.data;
                                              console.log("REFRESH TOKEN");
                                              request(
                                                {
                                                  url:
                                                    "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan/" +
                                                    body6.data[val.tahun_ke - 1]
                                                      .id_tagihan,
                                                  // agent: agent,
                                                  json: {
                                                    nomor_tagihan:
                                                      nomor_tagihan_new,
                                                    nomor_rekening:
                                                      val.no_rekening_pinjaman,
                                                    kode_bank: val.kode_bank,
                                                    outstanding:
                                                      val.plafond_kredit,
                                                    tahun: dateFormat(
                                                      new Date(),
                                                      "yyyy"
                                                    ),
                                                    nilai_ijp: val.premi,
                                                    periode: val.tahun_ke,
                                                  },
                                                  method: "PUT",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                    Authorization:
                                                      "Bearer " + body.data,
                                                  },
                                                },
                                                function (
                                                  error5re,
                                                  response5re,
                                                  body5re
                                                ) {
                                                  if (error5re) {
                                                    console.log(error5re);
                                                  } else {
                                                    console.log(body5re);
                                                    console.log(
                                                      "REFRESH TOKEN"
                                                    );
                                                    if (body5re.code === "45") {
                                                      console.log(
                                                        "tagihan sukses = " +
                                                          sukses +
                                                          " & gagal = " +
                                                          gagal
                                                      );
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        sukses++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(200).json({
                                                          error: false,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            "put tagihan sukses!",
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN SUKSES!"
                                                        );
                                                      } else {
                                                        sukses++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(200).json({
                                                          error: false,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            "put tagihan sukses!",
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN SUKSES!"
                                                        );
                                                      }
                                                    } else {
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        gagal++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(400).json({
                                                          error: true,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            body5re.message,
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN GAGAL! " +
                                                            body5re.message
                                                        );
                                                      } else {
                                                        gagal++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(400).json({
                                                          error: true,
                                                          id_penjaminan:
                                                            json_fix.data_batch,
                                                          message:
                                                            body5re.message,
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN GAGAL! " +
                                                            body5re.message
                                                        );
                                                      }
                                                      //insert tagihan gagal
                                                    }
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      } else if (body5.code === "45") {
                                        sukses++;
                                        if (i == params.length - 1) {
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(200).json({
                                            error: false,
                                            id_penjaminan: json_fix.data_batch,
                                            message: "put tagihan sukses!",
                                          });
                                          resolve("PUT SIKP TAGIHAN SUKSES!");
                                        } else {
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(200).json({
                                            error: false,
                                            id_penjaminan: json_fix.data_batch,
                                            message: "put tagihan sukses!",
                                          });
                                          resolve("PUT SIKP TAGIHAN SUKSES!");
                                        }
                                      } else {
                                        if (i == params.length - 1) {
                                          gagal++;
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(400).json({
                                            error: true,
                                            id_penjaminan: json_fix.data_batch,
                                            message: body5.message,
                                          });
                                          resolve(
                                            "PUT SIKP TAGIHAN GAGAL! " +
                                              body5.message
                                          );
                                        } else {
                                          gagal++;
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(400).json({
                                            error: true,
                                            id_penjaminan: json_fix.data_batch,
                                            message: body5.message,
                                          });
                                          resolve(
                                            "PUT SIKP TAGIHAN GAGAL! " +
                                              body5.message
                                          );
                                        }
                                        //insert tagihan gagal
                                      }
                                    }
                                  }
                                );
                              } else {
                                resolve("GAGAL, DATA SIKP TIDAK DITEMUKAN!");
                              }
                            }
                          }
                        );
                      } else {
                        resolve("GAGAL, INVALID COMMAND!");
                      }
                    }, i * 2000);
                  });
                } else {
                  resolve("GAGAL, DATA TIDAK DITEMUKAN!");
                }
              });
            }
          }
        }
      );
    });
  }
};

exports.putSIKP = async function (req, res) {
  var agent;
  agentOptions = {
    host: "202.61.126.162",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };
  agent = new https.Agent(agentOptions);
  var put_sikp_validation;
  var Validator = require("jsonschema").Validator;
  var v = new Validator();
  console.log(req.body);
  if (req.body.status_sikp == "calon") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        status_sikp: { type: "string", minLength: 1 },
        nik_lama: { type: "string", minLength: 1, maxLength: 16 },
        nama: { type: "string", minLength: 1 },
        tgl_lahir: { type: "string" },
        jns_kelamin: { type: "number", minimum: 1 },
        maritas_sts: { type: "number", minimum: 1 },
        pendidikan: { type: "number", minimum: 1 },
        pekerjaan: { type: "number", minimum: 1 },
        jns_debitur: { type: "string", minLength: 1 },
        alamat: { type: "string", minLength: 1 },
        kode_kabkota: { type: "string", minLength: 1 },
        kode_pos: { type: "string" },
        npwp: { type: "string" },
        mulai_usaha: { type: "string" },
        alamat_usaha: { type: "string", minLength: 1 },
        ijin_usaha: { type: "string" },
        modal_usaha: { type: "number" },
        jml_pekerja: { type: "number", minimum: 1 },
        no_hp: { type: "string" },
        uraian_agunan: { type: "string" },
      },
      additionalProperties: false,
    };
  } else if (req.body.status_sikp == "akad") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        status_sikp: { type: "string", maxLength: 30 },
        rekening_baru: { type: "string", minLength: 1 },
        kode_bank: { type: "string", minLength: 1 },
        nik_lama: { type: "string", minLength: 1 },
        rekening_lama: { type: "string" },
        status_akad: { type: "string", minLength: 1 },
        status_rekening: { type: "number", minimum: 1 },
        nomor_akad: { type: "string", minLength: 1 },
        tgl_akad: { type: "string", minLength: 8 },
        tgl_penarikan: { type: "string", minLength: 8 },
        tgl_jatuh_tempo: { type: "string", minLength: 8 },
        nilai_akad: { type: "number", minimum: 1 },
        tgl_penjaminan: { type: "string", minLength: 1 },
        nomor_penjaminan: { type: "string", minLength: 1 },
        nilai_dijamin: { type: "number", minimum: 1 },
        sektor: { type: "string", minLength: 1 },
      },
      additionalProperties: false,
    };
  } else if (req.body.status_sikp == "tagihan") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        status_sikp: { type: "string", minLength: 1 },
        nomor_tagihan: { type: "string", minLength: 1 },
        nomor_rekening: { type: "string", minLength: 1 },
        kode_bank: { type: "string", minLength: 1 },
        outstanding: { type: "number", minimum: 1 },
        tahun: { type: "number", minimum: 2020 },
        nilai_ijp: { type: "number", minimum: 1 },
        periode: { type: "number", minimum: 1 },
      },
      additionalProperties: false,
    };
  } else if (req.body.status_sikp == "debitur") {
    put_sikp_validation = {
      id: "/put_sikp",
      type: "object",
      disableFormat: false,
      properties: {
        no_aplikasi: { type: "string", minLength: 1, maxLength: 50 },
        status_sikp: { type: "string", minLength: 1 },
        nik_lama: { type: "string", minLength: 1, maxLength: 16 },
        nama: { type: "string", minLength: 1 },
        tgl_lahir: { type: "string" },
        jns_kelamin: { type: "number", minimum: 1 },
        maritas_sts: { type: "number", minimum: 1 },
        pendidikan: { type: "number", minimum: 1 },
        pekerjaan: { type: "number", minimum: 1 },
        jns_debitur: { type: "string", minLength: 1 },
        alamat: { type: "string", minLength: 1 },
        kode_kabkota: { type: "string", minLength: 1 },
        kode_pos: { type: "string" },
        npwp: { type: "string" },
        mulai_usaha: { type: "string" },
        alamat_usaha: { type: "string", minLength: 1 },
        ijin_usaha: { type: "string" },
        modal_usaha: { type: "number" },
        jml_pekerja: { type: "number", minimum: 1 },
        no_hp: { type: "string" },
        uraian_agunan: { type: "string" },
      },
      additionalProperties: false,
    };
  } else {
    res.status(400).json({
      errorMessage:
        'Status SIKP Salah, isi dengan "calon", "akad", atau "debitur"!',
    });
  }

  var results = v.validate(req.body, put_sikp_validation);
  if (results.errors.length > 0) {
    var json_ori = JSON.stringify(req.body).replace(/""|" "/g, "null");
    var json_fix = JSON.parse(json_ori);
    console.log(json_fix);
    var messages = [];
    for (i = 0; i < results.errors.length; i++) {
      if (results.errors[i].name === "additionalProperties") {
        messages.push({
          status: false,
          errorCode: "0102",
          errorType: "JSON Structure Error",
          errorMessage:
            "Field JSON " + results.errors[i].argument + " Not Allowed",
          trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
        });
      } else if (results.errors[i].name !== "additionalProperties") {
        if (results.errors[i].name === "type") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "Datatype of " +
              results.errors[i].property.split("instance.").join("") +
              " must be " +
              results.errors[i].argument[0],
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "required") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].argument.split("instance.").join("") +
              " is Required",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "minLength") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].property.split("instance.").join("") +
              " cannot be empty/below minimum length",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "maxLength") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].property.split("instance.").join("") +
              " violates maximal length of string",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "minimum") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].property.split("instance.").join("") +
              " violates minimum amount of number",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else {
          messages.push({
            status: false,
            errorCode: "",
            errorType: "Internal Server Error",
            errorMessage: "",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        }
      }
    }
    res.status(400).json(messages);
  } else {
    var json_ori = JSON.stringify(req.body).replace(/""|" "/g, "null");
    var json_fix = JSON.parse(json_ori);
    return new Promise((resolve) => {
      request(
        {
          url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
          // agent: agent,
          json: {
            username: "askrindo",
            password: "bzMjN9Wc8DeATBKh",
            // "password" :"development"
          },
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        },
        function (error, response, body) {
          if (error) {
            console.log(error);
          } else {
            console.log(body);
            if (body.data && body.data != "") {
              getPenjaminanByNoAplikasi(json_fix.no_aplikasi).then(function (
                params
              ) {
                if (params) {
                  var sukses = 0;
                  var gagal = 0;
                  params.forEach((val, i) => {
                    setTimeout(function () {
                      if (json_fix.status_sikp == "calon") {
                        var substring_ktp;
                        var nik_lama;
                        var alamat_usaha;
                        if (json_fix.nik_lama) {
                          nik_lama = json_fix.nik_lama;
                        } else {
                          nik_lama = val.no_id_debitur;
                        }
                        getKodeKotaSIKP(val.kode_pos).then(
                          function (kode_sikp_get) {
                            if (kode_sikp_get.length == 0) {
                              substring_ktp = val.no_id_debitur.substring(0, 4);
                            } else {
                              substring_ktp = kode_sikp_get[0].kode_kabkota;
                            }
                            request(
                              {
                                url:
                                  "http://10.238.136.117/pen-umkm-dev/api/v1/Referensi/KabKota/" +
                                  substring_ktp,
                                // agent: agent,
                                method: "GET",
                                json: {},
                                headers: {
                                  "Content-Type": "application/json",
                                  Authorization: "Bearer " + body.data,
                                },
                              },
                              function (error2, response2, body2) {
                                if (error2) {
                                  console.log(error2);
                                } else {
                                  if (response2.statusCode != 200) {
                                    request(
                                      {
                                        url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                        // agent: agent,
                                        json: {
                                          username: "askrindo",
                                          password: "bzMjN9Wc8DeATBKh",
                                          // "password" :"development"
                                        },
                                        method: "POST",
                                        headers: {
                                          "Content-Type": "application/json",
                                        },
                                      },
                                      function (
                                        errorfix,
                                        responsefix,
                                        bodyfix
                                      ) {
                                        if (errorfix) {
                                          console.log(errorfix);
                                        } else {
                                          body.data = bodyfix.data;
                                          console.log("REFRESH TOKEN");
                                        }
                                      }
                                    );
                                  } else if (body2.code === "51") {
                                    console.log(body2);
                                    getAgunan(val.id_penjaminan).then(function (
                                      agunan
                                    ) {
                                      var uraian_agunan = "";
                                      if (agunan.length === 0) {
                                        uraian_agunan = null;
                                      } else {
                                        uraian_agunan = agunan[0].label;
                                      }

                                      if (json_fix.nama) {
                                        val.nama_debitur = json_fix.nama;
                                      }
                                      if (json_fix.tgl_lahir) {
                                        val.tgl_lahir = json_fix.tgl_lahir;
                                      }
                                      if (json_fix.jns_kelamin) {
                                        val.jenis_kelamin =
                                          json_fix.jns_kelamin;
                                      }
                                      if (json_fix.maritas_sts) {
                                        val.maritas_status =
                                          json_fix.maritas_sts;
                                      }
                                      if (json_fix.pendidikan) {
                                        val.pendidikan = json_fix.pendidikan;
                                      }
                                      if (json_fix.pekerjaan) {
                                        val.jenis_pekerjaan =
                                          json_fix.pekerjaan;
                                      }
                                      if (json_fix.alamat) {
                                        val.alamat_debitur = json_fix.alamat;
                                      }
                                      if (json_fix.kode_pos) {
                                        val.kode_pos = json_fix.kode_pos;
                                      }
                                      if (json_fix.npwp) {
                                        val.npwp = json_fix.npwp;
                                      }
                                      if (json_fix.mulai_usaha) {
                                        val.tgl_mulai_usaha =
                                          json_fix.mulai_usaha;
                                      }
                                      if (json_fix.alamat_usaha) {
                                        alamat_usaha = json_fix.alamat_usaha;
                                      } else {
                                        alamat_usaha = val.alamat_debitur;
                                      }
                                      if (json_fix.ijin_usaha) {
                                        val.no_ijin_usaha = json_fix.ijin_usaha;
                                      }
                                      if (json_fix.modal_usaha) {
                                        val.modal_usaha = json_fix.modal_usaha;
                                      }
                                      if (json_fix.no_hp) {
                                        val.no_hp_debitur = json_fix.no_hp;
                                      }
                                      if (json_fix.uraian_agunan) {
                                        uraian_agunan = json_fix.uraian_agunan;
                                      }
                                      console.log({
                                        nik: val.no_id_debitur,
                                        nama: val.nama_debitur,
                                        tgl_lahir: val.tgl_lahir,
                                        jns_kelamin: val.jenis_kelamin,
                                        maritas_sts: val.marital_status,
                                        pendidikan: val.pendidikan,
                                        pekerjaan: val.jenis_pekerjaan,
                                        jns_debitur: "R",
                                        alamat: val.alamat_debitur,
                                        kode_kabkota: body2.data.kode,
                                        kode_pos: val.kode_pos,
                                        npwp: val.npwp.replace(
                                          /[^0-9a-z]/gi,
                                          ""
                                        ),
                                        mulai_usaha: new Date(
                                          val.tgl_mulai_usaha
                                        ),
                                        alamat_usaha: alamat_usaha,
                                        ijin_usaha: val.no_ijin_usaha,
                                        modal_usaha: val.modal_usaha,
                                        jml_pekerja: 1,
                                        jml_kredit: val.plafond_kredit,
                                        no_hp: val.no_hp_debitur,
                                        uraian_agunan: uraian_agunan,
                                      });
                                      var tgl_lahir;
                                      if (val.jenis_kelamin == "9") {
                                        tgl_lahir = null;
                                      } else {
                                        tgl_lahir = new Date(val.tgl_lahir);
                                      }
                                      request(
                                        {
                                          url:
                                            "http://10.238.136.117/pen-umkm-dev/api/v1/Calon/" +
                                            nik_lama,
                                          // agent: agent,
                                          json: {
                                            nik: val.no_id_debitur,
                                            nama: val.nama_debitur,
                                            tgl_lahir: tgl_lahir,
                                            jns_kelamin: val.jenis_kelamin,
                                            maritas_sts: val.marital_status,
                                            pendidikan: val.pendidikan,
                                            pekerjaan: val.jenis_pekerjaan,
                                            jns_debitur: "R",
                                            alamat: val.alamat_debitur,
                                            kode_kabkota: body2.data.kode,
                                            kode_pos: val.kode_pos,
                                            npwp: val.npwp.replace(
                                              /[^0-9a-z]/gi,
                                              ""
                                            ),
                                            mulai_usaha: new Date(
                                              val.tgl_mulai_usaha
                                            ),
                                            alamat_usaha: alamat_usaha,
                                            ijin_usaha: val.no_ijin_usaha,
                                            modal_usaha: val.modal_usaha,
                                            jml_pekerja: 1,
                                            jml_kredit: val.plafond_kredit,
                                            no_hp: val.no_hp_debitur,
                                            uraian_agunan: uraian_agunan,
                                          },
                                          method: "PUT",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (error3, response3, body3) {
                                          if (error3) {
                                            console.log(error3);
                                          } else {
                                            console.log(body3);
                                            if (response3.statusCode != 200) {
                                              request(
                                                {
                                                  url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                                  // agent: agent,
                                                  json: {
                                                    username: "askrindo",
                                                    password:
                                                      "bzMjN9Wc8DeATBKh",
                                                    // "password" :"development"
                                                  },
                                                  method: "POST",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                  },
                                                },
                                                function (
                                                  errorfix,
                                                  responsefix,
                                                  bodyfix
                                                ) {
                                                  if (errorfix) {
                                                    console.log(errorfix);
                                                  } else {
                                                    body.data = bodyfix.data;
                                                    console.log(
                                                      "REFRESH TOKEN"
                                                    );
                                                    request(
                                                      {
                                                        url:
                                                          "http://10.238.136.117/pen-umkm-dev/api/v1/Calon/" +
                                                          nik_lama,
                                                        // agent: agent,
                                                        json: {
                                                          nik: val.no_id_debitur,
                                                          nama: val.nama_debitur,
                                                          tgl_lahir: tgl_lahir,
                                                          jns_kelamin:
                                                            val.jenis_kelamin,
                                                          maritas_sts:
                                                            val.marital_status,
                                                          pendidikan:
                                                            val.pendidikan,
                                                          pekerjaan:
                                                            val.jenis_pekerjaan,
                                                          jns_debitur: "R",
                                                          alamat:
                                                            val.alamat_debitur,
                                                          kode_kabkota:
                                                            body2.data.kode,
                                                          kode_pos:
                                                            val.kode_pos,
                                                          npwp: val.npwp.replace(
                                                            /[^0-9a-z]/gi,
                                                            ""
                                                          ),
                                                          mulai_usaha: new Date(
                                                            val.tgl_mulai_usaha
                                                          ),
                                                          alamat_usaha:
                                                            alamat_usaha,
                                                          ijin_usaha:
                                                            val.no_ijin_usaha,
                                                          modal_usaha:
                                                            val.modal_usaha,
                                                          jml_pekerja: 1,
                                                          jml_kredit:
                                                            val.plafond_kredit,
                                                          no_hp:
                                                            val.no_hp_debitur,
                                                          uraian_agunan:
                                                            uraian_agunan,
                                                        },
                                                        method: "PUT",
                                                        headers: {
                                                          "Content-Type":
                                                            "application/json",
                                                          Authorization:
                                                            "Bearer " +
                                                            body.data,
                                                        },
                                                      },
                                                      function (
                                                        error3re,
                                                        response3re,
                                                        body3re
                                                      ) {
                                                        if (error3) {
                                                          console.log(error3re);
                                                        } else {
                                                          console.log(body3re);

                                                          if (
                                                            body3re.code ===
                                                            "45"
                                                          ) {
                                                            if (
                                                              i ==
                                                              params.length - 1
                                                            ) {
                                                              sukses++;
                                                              console.log(
                                                                "put calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              res
                                                                .status(200)
                                                                .json({
                                                                  error: false,
                                                                  no_aplikasi:
                                                                    json_fix.no_aplikasi,
                                                                  message:
                                                                    "put calon sukses!",
                                                                });
                                                              resolve(
                                                                "PUT SIKP CALON SUKSES!"
                                                              );
                                                            } else {
                                                              sukses++;
                                                              console.log(
                                                                "put calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              res
                                                                .status(200)
                                                                .json({
                                                                  error: false,
                                                                  no_aplikasi:
                                                                    json_fix.no_aplikasi,
                                                                  message:
                                                                    "put calon sukses!",
                                                                });
                                                              resolve(
                                                                "PUT SIKP CALON SUKSES!"
                                                              );
                                                            }
                                                          } else if (
                                                            body3re.code ===
                                                            "07"
                                                          ) {
                                                            request(
                                                              {
                                                                url:
                                                                  "http://10.238.136.117/pen-umkm-dev/api/v1/Debitur/" +
                                                                  nik_lama,
                                                                // agent: agent,
                                                                json: {
                                                                  nik: val.no_id_debitur,
                                                                  nama: val.nama_debitur,
                                                                  tgl_lahir:
                                                                    tgl_lahir,
                                                                  jns_kelamin:
                                                                    val.jenis_kelamin,
                                                                  maritas_sts:
                                                                    val.marital_status,
                                                                  pendidikan:
                                                                    val.pendidikan,
                                                                  pekerjaan:
                                                                    val.jenis_pekerjaan,
                                                                  jns_debitur:
                                                                    "R",
                                                                  alamat:
                                                                    val.alamat_debitur,
                                                                  kode_kabkota:
                                                                    body2.data
                                                                      .kode,
                                                                  kode_pos:
                                                                    val.kode_pos,
                                                                  npwp: val.npwp.replace(
                                                                    /[^0-9a-z]/gi,
                                                                    ""
                                                                  ),
                                                                  mulai_usaha:
                                                                    new Date(
                                                                      val.tgl_mulai_usaha
                                                                    ),
                                                                  alamat_usaha:
                                                                    alamat_usaha,
                                                                  ijin_usaha:
                                                                    val.no_ijin_usaha,
                                                                  modal_usaha:
                                                                    val.modal_usaha,
                                                                  jml_pekerja: 1,
                                                                  jml_kredit:
                                                                    val.plafond_kredit,
                                                                  no_hp:
                                                                    val.no_hp_debitur,
                                                                  uraian_agunan:
                                                                    uraian_agunan,
                                                                },
                                                                method: "PUT",
                                                                headers: {
                                                                  "Content-Type":
                                                                    "application/json",
                                                                  Authorization:
                                                                    "Bearer " +
                                                                    body.data,
                                                                },
                                                              },
                                                              function (
                                                                error7,
                                                                response7,
                                                                body7
                                                              ) {
                                                                if (error7) {
                                                                  console.log(
                                                                    error7
                                                                  );
                                                                } else {
                                                                  console.log(
                                                                    body7
                                                                  );

                                                                  if (
                                                                    body7.code ===
                                                                    "45"
                                                                  ) {
                                                                    if (
                                                                      i ==
                                                                      params.length -
                                                                        1
                                                                    ) {
                                                                      sukses++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );
                                                                      res
                                                                        .status(
                                                                          200
                                                                        )
                                                                        .json({
                                                                          error: false,
                                                                          no_aplikasi:
                                                                            json_fix.no_aplikasi,
                                                                          message:
                                                                            "put debitur sukses!",
                                                                        });
                                                                      resolve(
                                                                        "PUT SIKP DEBITUR SUKSES!"
                                                                      );
                                                                    } else {
                                                                      sukses++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );
                                                                      res
                                                                        .status(
                                                                          200
                                                                        )
                                                                        .json({
                                                                          error: false,
                                                                          no_aplikasi:
                                                                            json_fix.no_aplikasi,
                                                                          message:
                                                                            "put debitur sukses!",
                                                                        });
                                                                      resolve(
                                                                        "PUT SIKP DEBITUR SUKSES!"
                                                                      );
                                                                    }
                                                                  } else {
                                                                    if (
                                                                      i ==
                                                                      params.length -
                                                                        1
                                                                    ) {
                                                                      gagal++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );
                                                                      //insert debitur gagal
                                                                      res
                                                                        .status(
                                                                          400
                                                                        )
                                                                        .json({
                                                                          error: true,
                                                                          no_aplikasi:
                                                                            json_fix.no_aplikasi,
                                                                          message:
                                                                            body7.message,
                                                                        });
                                                                      resolve(
                                                                        "PUT SIKP DEBITUR GAGAL!, " +
                                                                          body7.message
                                                                      );
                                                                    } else {
                                                                      gagal++;
                                                                      console.log(
                                                                        "debitur sukses = " +
                                                                          sukses +
                                                                          " & gagal = " +
                                                                          gagal
                                                                      );
                                                                      //insert debitur gagal
                                                                      res
                                                                        .status(
                                                                          400
                                                                        )
                                                                        .json({
                                                                          error: true,
                                                                          no_aplikasi:
                                                                            json_fix.no_aplikasi,
                                                                          message:
                                                                            body7.message,
                                                                        });
                                                                      resolve(
                                                                        "PUT SIKP DEBITUR GAGAL!, " +
                                                                          body7.message
                                                                      );
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            );
                                                          } else {
                                                            if (
                                                              i ==
                                                              params.length - 1
                                                            ) {
                                                              gagal++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              //insert calon gagal
                                                              res
                                                                .status(400)
                                                                .json({
                                                                  error: true,
                                                                  no_aplikasi:
                                                                    json_fix.no_aplikasi,
                                                                  message:
                                                                    body3re.message,
                                                                });
                                                              resolve(
                                                                "PUT SIKP CALON GAGAL!, " +
                                                                  body3re.message
                                                              );
                                                            } else {
                                                              gagal++;
                                                              console.log(
                                                                "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal
                                                              );
                                                              //insert calon gagal
                                                              res
                                                                .status(400)
                                                                .json({
                                                                  error: true,
                                                                  no_aplikasi:
                                                                    json_fix.no_aplikasi,
                                                                  message:
                                                                    body3re.message,
                                                                });
                                                              resolve(
                                                                "PUT SIKP DEBITUR GAGAL!, " +
                                                                  body3re.message
                                                              );
                                                            }
                                                          }
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            } else if (body3.code === "45") {
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(200).json({
                                                  error: false,
                                                  no_aplikasi:
                                                    json_fix.no_aplikasi,
                                                  message: "put calon sukses!",
                                                });
                                                resolve(
                                                  "PUT SIKP CALON SUKSES!"
                                                );
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(200).json({
                                                  error: false,
                                                  no_aplikasi:
                                                    json_fix.no_aplikasi,
                                                  message: "put calon sukses!",
                                                });
                                                resolve(
                                                  "PUT SIKP CALON SUKSES!"
                                                );
                                              }
                                            } else if (body3.code === "07") {
                                              request(
                                                {
                                                  url:
                                                    "http://10.238.136.117/pen-umkm-dev/api/v1/Debitur/" +
                                                    nik_lama,
                                                  // agent: agent,
                                                  json: {
                                                    nik: val.no_id_debitur,
                                                    nama: val.nama_debitur,
                                                    tgl_lahir: tgl_lahir,
                                                    jns_kelamin:
                                                      val.jenis_kelamin,
                                                    maritas_sts:
                                                      val.marital_status,
                                                    pendidikan: val.pendidikan,
                                                    pekerjaan:
                                                      val.jenis_pekerjaan,
                                                    jns_debitur: "R",
                                                    alamat: val.alamat_debitur,
                                                    kode_kabkota:
                                                      body2.data.kode,
                                                    kode_pos: val.kode_pos,
                                                    npwp: val.npwp.replace(
                                                      /[^0-9a-z]/gi,
                                                      ""
                                                    ),
                                                    mulai_usaha: new Date(
                                                      val.tgl_mulai_usaha
                                                    ),
                                                    alamat_usaha: alamat_usaha,
                                                    ijin_usaha:
                                                      val.no_ijin_usaha,
                                                    modal_usaha:
                                                      val.modal_usaha,
                                                    jml_pekerja: 1,
                                                    jml_kredit:
                                                      val.plafond_kredit,
                                                    no_hp: val.no_hp_debitur,
                                                    uraian_agunan:
                                                      uraian_agunan,
                                                  },
                                                  method: "PUT",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                    Authorization:
                                                      "Bearer " + body.data,
                                                  },
                                                },
                                                function (
                                                  error7,
                                                  response7,
                                                  body7
                                                ) {
                                                  if (error7) {
                                                    console.log(error7);
                                                  } else {
                                                    console.log(body7);

                                                    if (body7.code === "45") {
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        sukses++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(200).json({
                                                          error: false,
                                                          no_aplikasi:
                                                            json_fix.no_aplikasi,
                                                          message:
                                                            "put debitur sukses!",
                                                        });
                                                        resolve(
                                                          "PUT SIKP DEBITUR SUKSES!"
                                                        );
                                                      } else {
                                                        sukses++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(200).json({
                                                          error: false,
                                                          no_aplikasi:
                                                            json_fix.no_aplikasi,
                                                          message:
                                                            "put debitur sukses!",
                                                        });
                                                        resolve(
                                                          "PUT SIKP DEBITUR SUKSES!"
                                                        );
                                                      }
                                                    } else {
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        gagal++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        //insert debitur gagal
                                                        res.status(400).json({
                                                          error: true,
                                                          no_aplikasi:
                                                            json_fix.no_aplikasi,
                                                          message:
                                                            body7.message,
                                                        });
                                                        resolve(
                                                          "PUT SIKP DEBITUR GAGAL!, " +
                                                            body7.message
                                                        );
                                                      } else {
                                                        gagal++;
                                                        console.log(
                                                          "debitur sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        //insert debitur gagal
                                                        res.status(400).json({
                                                          error: true,
                                                          no_aplikasi:
                                                            json_fix.no_aplikasi,
                                                          message:
                                                            body7.message,
                                                        });
                                                        resolve(
                                                          "PUT SIKP DEBITUR GAGAL!, " +
                                                            body7.message
                                                        );
                                                      }
                                                    }
                                                  }
                                                }
                                              );
                                            } else {
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal
                                                res.status(400).json({
                                                  error: true,
                                                  no_aplikasi:
                                                    json_fix.no_aplikasi,
                                                  message: body3.message,
                                                });
                                                resolve(
                                                  "PUT SIKP CALON GAGAL!, " +
                                                    body3.message
                                                );
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal
                                                res.status(400).json({
                                                  error: true,
                                                  no_aplikasi:
                                                    json_fix.no_aplikasi,
                                                  message: body3.message,
                                                });
                                                resolve(
                                                  "PUT SIKP CALON GAGAL!, " +
                                                    body3.message
                                                );
                                              }
                                            }
                                          }
                                        }
                                      );
                                    });
                                  } else {
                                    gagal++;
                                    console.log(
                                      "Calon sukses = " +
                                        sukses +
                                        " & gagal = " +
                                        gagal
                                    );
                                    res.status(400).json({
                                      error: true,
                                      no_aplikasi: json_fix.no_aplikasi,
                                      message: body2.message,
                                    });
                                    resolve(
                                      "PUT SIKP CALON GAGAL!, " + body2.message
                                    );
                                  }
                                }
                              }
                            );
                          }
                        );
                      } else if (json_fix.status_sikp == "akad") {
                        var rekening_lama_sikp;
                        var kode_bank_lama_sikp;
                        if (val.no_rek_lama) {
                          if (json_fix.rekening_lama) {
                            val.no_rek_lama = json_fix.rekening_lama;
                          }
                          val.no_rek_lama = val.no_rek_lama.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          );
                        }
                        if (json_fix.rekening_baru) {
                          rekening_lama_sikp = json_fix.rekening_baru;
                          val.no_rekening_pinjaman =
                            val.no_rekening_pinjaman.replace(
                              /[^0-9a-z_]/gi,
                              ""
                            );
                        } else {
                          rekening_lama_sikp = val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          );
                        }
                        if (json_fix.kode_bank) {
                          kode_bank_lama_sikp = json_fix.kode_bank;
                        } else {
                          kode_bank_lama_sikp = val.kode_bank;
                        }
                        if (json_fix.nik_lama) {
                          val.no_id_debitur = json_fix.nik_lama;
                        }
                        if (json_fix.nomor_akad) {
                          val.no_perjanjian_kredit = json_fix.nomor_akad;
                        }
                        if (json_fix.tgl_akad) {
                          val.tgl_pk = json_fix.tgl_akad;
                        }
                        if (json_fix.tgl_penarikan) {
                          val.tgl_awal_pertanggungan = json_fix.tgl_penarikan;
                        }
                        if (json_fix.tgl_jatuh_tempo) {
                          val.tgl_akhir_pertanggungan =
                            json_fix.tgl_jatuh_tempo;
                        }
                        if (json_fix.nilai_akad) {
                          val.plafond_kredit = json_fix.nilai_akad;
                        }
                        if (json_fix.tgl_penjaminan) {
                          val.tgl_sertifikat = json_fix.tgl_penjaminan;
                        }
                        if (json_fix.nomor_penjaminan) {
                          val.no_sertifikat = json_fix.nomor_penjaminan;
                        }
                        if (json_fix.nilai_dijamin) {
                          val.nilai_pertanggungan = json_fix.nilai_dijamin;
                        }
                        if (json_fix.sektor) {
                          val.sektor_ekonomi = json_fix.sektor;
                        }

                        console.log({
                          rekening_baru: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          nik: val.no_id_debitur,
                          rekening_lama: val.no_rek_lama,
                          status_akad: "B",
                          status_rekening: 1,
                          nomor_akad: val.no_perjanjian_kredit,
                          tgl_akad: new Date(val.tgl_pk),
                          tgl_penarikan: new Date(val.tgl_awal_pertanggungan),
                          tgl_jatuh_tempo: new Date(
                            val.tgl_akhir_pertanggungan
                          ),
                          nilai_akad: val.plafond_kredit,
                          tgl_penjaminan: val.tgl_sertifikat,
                          nomor_penjaminan: val.no_sertifikat,
                          nilai_dijamin: val.nilai_pertanggungan,
                          sektor: val.sektor_ekonomi,
                        });
                        console.log(
                          "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/" +
                            kode_bank_lama_sikp +
                            "/" +
                            rekening_lama_sikp
                        );
                        request(
                          {
                            url:
                              "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/" +
                              kode_bank_lama_sikp +
                              "/" +
                              rekening_lama_sikp,
                            // agent: agent,
                            json: {
                              rekening_baru: val.no_rekening_pinjaman.replace(
                                /[^0-9a-z_]/gi,
                                ""
                              ),
                              kode_bank: val.kode_bank,
                              nik: val.no_id_debitur,
                              rekening_lama: val.no_rek_lama,
                              status_akad: "B",
                              status_rekening: 1,
                              nomor_akad: val.no_perjanjian_kredit,
                              tgl_akad: new Date(val.tgl_pk),
                              tgl_penarikan: new Date(
                                val.tgl_awal_pertanggungan
                              ),
                              tgl_jatuh_tempo: new Date(
                                val.tgl_akhir_pertanggungan
                              ),
                              nilai_akad: val.plafond_kredit,
                              tgl_penjaminan: val.tgl_sertifikat,
                              nomor_penjaminan: val.no_sertifikat,
                              nilai_dijamin: val.nilai_pertanggungan,
                              sektor: val.sektor_ekonomi,
                            },
                            method: "PUT",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error4, response4, body4) {
                            if (error4) {
                              console.log(error4);
                            } else {
                              console.log(body4);
                              if (response4.statusCode != 200) {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                    // agent: agent,
                                    json: {
                                      username: "askrindo",
                                      password: "bzMjN9Wc8DeATBKh",
                                      // "password" :"development"
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                    },
                                  },
                                  function (errorfix, responsefix, bodyfix) {
                                    if (errorfix) {
                                      console.log(errorfix);
                                    } else {
                                      body.data = bodyfix.data;
                                      console.log("REFRESH TOKEN");
                                      request(
                                        {
                                          url:
                                            "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/" +
                                            kode_bank_lama_sikp +
                                            "/" +
                                            rekening_lama_sikp,
                                          // agent: agent,
                                          json: {
                                            rekening_baru:
                                              val.no_rekening_pinjaman.replace(
                                                /[^0-9a-z_]/gi,
                                                ""
                                              ),
                                            kode_bank: val.kode_bank,
                                            nik: val.no_id_debitur,
                                            rekening_lama: val.no_rek_lama,
                                            status_akad: "B",
                                            status_rekening: 1,
                                            nomor_akad:
                                              val.no_perjanjian_kredit,
                                            tgl_akad: new Date(val.tgl_pk),
                                            tgl_penarikan: new Date(
                                              val.tgl_awal_pertanggungan
                                            ),
                                            tgl_jatuh_tempo: new Date(
                                              val.tgl_akhir_pertanggungan
                                            ),
                                            nilai_akad: val.plafond_kredit,
                                            tgl_penjaminan: val.tgl_sertifikat,
                                            nomor_penjaminan: val.no_sertifikat,
                                            nilai_dijamin:
                                              val.nilai_pertanggungan,
                                            sektor: val.sektor_ekonomi,
                                          },
                                          method: "POST",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (
                                          error4re,
                                          response4re,
                                          body4re
                                        ) {
                                          if (error4re) {
                                            console.log(error4re);
                                          } else {
                                            if (body4re.code === "45") {
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(200).json({
                                                  error: false,
                                                  no_aplikasi:
                                                    json_fix.no_aplikasi,
                                                  message: "put akad sukses!",
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD SUKSES!"
                                                );
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(200).json({
                                                  error: false,
                                                  no_aplikasi:
                                                    json_fix.no_aplikasi,
                                                  message: "put akad sukses!",
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD SUKSES!"
                                                );
                                              }
                                            } else {
                                              // insert akad gagal
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(400).json({
                                                  error: true,
                                                  no_aplikasi:
                                                    json_fix.no_aplikasi,
                                                  message: body4re.message,
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD GAGAL!, " +
                                                    body4re.message
                                                );
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "akad sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                res.status(400).json({
                                                  error: true,
                                                  no_aplikasi:
                                                    json_fix.no_aplikasi,
                                                  message: body4re.message,
                                                });
                                                resolve(
                                                  "PUT SIKP AKAD GAGAL!, " +
                                                    body4re.message
                                                );
                                              }
                                            }
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              } else if (body4.code === "45") {
                                if (i == params.length - 1) {
                                  sukses++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(200).json({
                                    error: false,
                                    no_aplikasi: json_fix.no_aplikasi,
                                    message: "put akad sukses!",
                                  });
                                  resolve("PUT SIKP AKAD SUKSES!");
                                } else {
                                  sukses++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(200).json({
                                    error: false,
                                    no_aplikasi: json_fix.no_aplikasi,
                                    message: "put akad sukses!",
                                  });
                                  resolve("PUT SIKP AKAD SUKSES!");
                                }
                              } else {
                                // insert akad gagal
                                if (i == params.length - 1) {
                                  gagal++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(400).json({
                                    error: true,
                                    no_aplikasi: json_fix.no_aplikasi,
                                    message: body4.message,
                                  });
                                  resolve(
                                    "PUT SIKP AKAD GAGAL!, " + body4.message
                                  );
                                } else {
                                  gagal++;
                                  console.log(
                                    "akad sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  res.status(400).json({
                                    error: true,
                                    no_aplikasi: json_fix.no_aplikasi,
                                    message: body4.message,
                                  });
                                  resolve(
                                    "PUT SIKP AKAD GAGAL!, " + body4.message
                                  );
                                }
                              }
                            }
                          }
                        );
                      } else if (json_fix.status_sikp == "tagihan") {
                        request(
                          {
                            url:
                              "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan?kode_bank=" +
                              val.kode_bank +
                              "&nomor_rekening=" +
                              val.no_rekening_pinjaman,
                            // agent: agent,
                            method: "GET",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error6, response6, body6) {
                            if (error6) {
                              console.log(error6);
                            } else {
                              body6 = JSON.parse(body6);
                              if (body6.code === "56") {
                                var nomor_tagihan_new;

                                if (json_fix.nomor_tagihan) {
                                  nomor_tagihan_new = json_fix.nomor_tagihan;
                                } else {
                                  nomor_tagihan_new =
                                    body6.data[val.tahun_ke - 1].nomor_tagihan;
                                }
                                if (json_fix.nomor_rekening) {
                                  val.no_rekening_pinjaman =
                                    json_fix.nomor_rekening;
                                }
                                if (json_fix.kode_bank) {
                                  val.kode_bank = json_fix.kode_bank;
                                }
                                if (json_fix.outstanding) {
                                  val.plafond_kredit = json_fix.outstanding;
                                }
                                if (json_fix.nilai_ijp) {
                                  val.premi = json_fix.nilai_ijp;
                                }
                                if (json_fix.periode) {
                                  val.tahun_ke = json_fix.periode;
                                }

                                console.log({
                                  nomor_tagihan: nomor_tagihan_new,
                                  nomor_rekening: val.no_rekening_pinjaman,
                                  kode_bank: val.kode_bank,
                                  outstanding: val.plafond_kredit,
                                  tahun: dateFormat(new Date(), "yyyy"),
                                  nilai_ijp: val.premi,
                                  periode: val.tahun_ke,
                                });
                                request(
                                  {
                                    url:
                                      "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan/" +
                                      body6.data[val.tahun_ke - 1].id_tagihan,
                                    // agent: agent,
                                    json: {
                                      nomor_tagihan: nomor_tagihan_new,
                                      nomor_rekening: val.no_rekening_pinjaman,
                                      kode_bank: val.kode_bank,
                                      outstanding: val.plafond_kredit,
                                      tahun: dateFormat(new Date(), "yyyy"),
                                      nilai_ijp: val.premi,
                                      periode: val.tahun_ke,
                                    },
                                    method: "PUT",
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization: "Bearer " + body.data,
                                    },
                                  },
                                  function (error5, response5, body5) {
                                    if (error5) {
                                      console.log(error5);
                                    } else {
                                      console.log(body5);
                                      if (response5.statusCode != 200) {
                                        request(
                                          {
                                            url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                            // agent: agent,
                                            json: {
                                              username: "askrindo",
                                              password: "bzMjN9Wc8DeATBKh",
                                              // "password" :"development"
                                            },
                                            method: "POST",
                                            headers: {
                                              "Content-Type":
                                                "application/json",
                                            },
                                          },
                                          function (
                                            errorfix,
                                            responsefix,
                                            bodyfix
                                          ) {
                                            if (errorfix) {
                                              console.log(errorfix);
                                            } else {
                                              body.data = bodyfix.data;
                                              console.log("REFRESH TOKEN");
                                              request(
                                                {
                                                  url:
                                                    "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan/" +
                                                    body6.data[val.tahun_ke - 1]
                                                      .id_tagihan,
                                                  // agent: agent,
                                                  json: {
                                                    nomor_tagihan:
                                                      nomor_tagihan_new,
                                                    nomor_rekening:
                                                      val.no_rekening_pinjaman,
                                                    kode_bank: val.kode_bank,
                                                    outstanding:
                                                      val.plafond_kredit,
                                                    tahun: dateFormat(
                                                      new Date(),
                                                      "yyyy"
                                                    ),
                                                    nilai_ijp: val.premi,
                                                    periode: val.tahun_ke,
                                                  },
                                                  method: "PUT",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                    Authorization:
                                                      "Bearer " + body.data,
                                                  },
                                                },
                                                function (
                                                  error5re,
                                                  response5re,
                                                  body5re
                                                ) {
                                                  if (error5re) {
                                                    console.log(error5re);
                                                  } else {
                                                    console.log(body5re);
                                                    console.log(
                                                      "REFRESH TOKEN"
                                                    );
                                                    if (body5re.code === "45") {
                                                      console.log(
                                                        "tagihan sukses = " +
                                                          sukses +
                                                          " & gagal = " +
                                                          gagal
                                                      );
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        sukses++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(200).json({
                                                          error: false,
                                                          no_aplikasi:
                                                            json_fix.no_aplikasi,
                                                          message:
                                                            "put tagihan sukses!",
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN SUKSES!"
                                                        );
                                                      } else {
                                                        sukses++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(200).json({
                                                          error: false,
                                                          no_aplikasi:
                                                            json_fix.no_aplikasi,
                                                          message:
                                                            "put tagihan sukses!",
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN SUKSES!"
                                                        );
                                                      }
                                                    } else {
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        gagal++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(400).json({
                                                          error: true,
                                                          no_aplikasi:
                                                            json_fix.no_aplikasi,
                                                          message:
                                                            body5re.message,
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN GAGAL! " +
                                                            body5re.message
                                                        );
                                                      } else {
                                                        gagal++;
                                                        console.log(
                                                          "tagihan sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        res.status(400).json({
                                                          error: true,
                                                          no_aplikasi:
                                                            json_fix.no_aplikasi,
                                                          message:
                                                            body5re.message,
                                                        });
                                                        resolve(
                                                          "PUT SIKP TAGIHAN GAGAL! " +
                                                            body5re.message
                                                        );
                                                      }
                                                      //insert tagihan gagal
                                                    }
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      } else if (body5.code === "45") {
                                        sukses++;
                                        if (i == params.length - 1) {
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(200).json({
                                            error: false,
                                            no_aplikasi: json_fix.no_aplikasi,
                                            message: "put tagihan sukses!",
                                          });
                                          resolve("PUT SIKP TAGIHAN SUKSES!");
                                        } else {
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(200).json({
                                            error: false,
                                            no_aplikasi: json_fix.no_aplikasi,
                                            message: "put tagihan sukses!",
                                          });
                                          resolve("PUT SIKP TAGIHAN SUKSES!");
                                        }
                                      } else {
                                        if (i == params.length - 1) {
                                          gagal++;
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(400).json({
                                            error: true,
                                            no_aplikasi: json_fix.no_aplikasi,
                                            message: body5.message,
                                          });
                                          resolve(
                                            "PUT SIKP TAGIHAN GAGAL! " +
                                              body5.message
                                          );
                                        } else {
                                          gagal++;
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          res.status(400).json({
                                            error: true,
                                            no_aplikasi: json_fix.no_aplikasi,
                                            message: body5.message,
                                          });
                                          resolve(
                                            "PUT SIKP TAGIHAN GAGAL! " +
                                              body5.message
                                          );
                                        }
                                        //insert tagihan gagal
                                      }
                                    }
                                  }
                                );
                              } else {
                                resolve("GAGAL, DATA SIKP TIDAK DITEMUKAN!");
                              }
                            }
                          }
                        );
                      } else {
                        resolve("GAGAL, INVALID COMMAND!");
                      }
                    }, i * 2000);
                  });
                } else {
                  resolve("GAGAL, DATA TIDAK DITEMUKAN!");
                }
              });
            }
          }
        }
      );
    });
  }
};

exports.postSIKP = async function (req, res) {
  var agent;
  agentOptions = {
    host: "202.61.126.162",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };
  agent = new https.Agent(agentOptions);
  request(
    {
      url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
      // agent: agent,
      json: {
        username: "askrindo",
        password: "bzMjN9Wc8DeATBKh",
        // "password" :"development"
      },
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    },
    function (error, response, body) {
      if (error) {
        console.log(error);
      } else {
        console.log(body);
        if (body.data && body.data != "") {
          getPenjaminanByTanggalIJP(
            req.body.tgl_awal,
            req.body.tgl_akhir,
            req.body.status
          ).then(function (params) {
            if (params) {
              var sukses = 0;
              var gagal = 0;
              params.forEach((val, i) => {
                setTimeout(function () {
                  if (req.body.status === 0) {
                    var substring_ktp;
                    var pendidikan;
                    getKodeKotaSIKP(val.kode_pos.substring(0, 4)).then(
                      function (kode_sikp_get) {
                        if (kode_sikp_get.length == 0) {
                          substring_ktp = val.no_id_debitur.substring(0, 4);
                        } else {
                          substring_ktp = kode_sikp_get[0].kode_kabkota;
                        }
                        request(
                          {
                            url:
                              "http://10.238.136.117/pen-umkm-dev/api/v1/Referensi/KabKota/" +
                              substring_ktp,
                            // agent: agent,
                            method: "GET",
                            json: {},
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error2, response2, body2) {
                            if (error2) {
                              console.log(error2);
                            } else {
                              if (response2.statusCode != 200) {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                    // agent: agent,
                                    json: {
                                      username: "askrindo",
                                      password: "bzMjN9Wc8DeATBKh",
                                      // "password" :"development"
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                    },
                                  },
                                  function (errorfix, responsefix, bodyfix) {
                                    if (errorfix) {
                                      console.log(errorfix);
                                    } else {
                                      body.data = bodyfix.data;
                                      console.log("REFRESH TOKEN");
                                    }
                                  }
                                );
                              } else if (body2.code === "51") {
                                console.log(body2);
                                getAgunan(val.id_penjaminan).then(function (
                                  agunan
                                ) {
                                  var uraian_agunan = "";
                                  if (agunan.length === 0) {
                                    uraian_agunan = null;
                                  } else {
                                    uraian_agunan = agunan[0].label;
                                  }
                                  if (val.npwp) {
                                    val.npwp = val.npwp.replace(
                                      /[^0-9a-z]/gi,
                                      ""
                                    );
                                  } else {
                                    val.npwp = null;
                                  }
                                  console.log({
                                    nik: val.no_id_debitur,
                                    nama: val.nama_debitur,
                                    tgl_lahir: new Date(val.tgl_lahir),
                                    jns_kelamin: val.jenis_kelamin,
                                    maritas_sts: val.marital_status,
                                    pendidikan: val.pendidikan,
                                    pekerjaan: val.jenis_pekerjaan,
                                    jns_debitur: "R",
                                    alamat: val.alamat_debitur,
                                    kode_kabkota: body2.data.kode,
                                    kode_pos: val.kode_pos,
                                    npwp: val.npwp,
                                    mulai_usaha: new Date(val.tgl_mulai_usaha),
                                    alamat_usaha: val.alamat_debitur,
                                    ijin_usaha: val.no_ijin_usaha,
                                    modal_usaha: val.modal_usaha,
                                    jml_pekerja: 1,
                                    jml_kredit: val.plafond_kredit,
                                    no_hp: val.no_hp_debitur,
                                    uraian_agunan: uraian_agunan,
                                  });
                                  var tgl_lahir;
                                  if (val.jenis_kelamin == "9") {
                                    tgl_lahir = null;
                                  } else {
                                    tgl_lahir = new Date(val.tgl_lahir);
                                  }
                                  request(
                                    {
                                      url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon",
                                      // agent: agent,
                                      json: {
                                        nik: val.no_id_debitur,
                                        nama: val.nama_debitur,
                                        tgl_lahir: tgl_lahir,
                                        jns_kelamin: val.jenis_kelamin,
                                        maritas_sts: val.marital_status,
                                        pendidikan: val.pendidikan,
                                        pekerjaan: val.jenis_pekerjaan,
                                        jns_debitur: "R",
                                        alamat: val.alamat_debitur,
                                        kode_kabkota: body2.data.kode,
                                        kode_pos: val.kode_pos,
                                        npwp: val.npwp,
                                        mulai_usaha: new Date(
                                          val.tgl_mulai_usaha
                                        ),
                                        alamat_usaha: val.alamat_debitur,
                                        ijin_usaha: val.no_ijin_usaha,
                                        modal_usaha: val.modal_usaha,
                                        jml_pekerja: 1,
                                        jml_kredit: val.plafond_kredit,
                                        no_hp: val.no_hp_debitur,
                                        uraian_agunan: uraian_agunan,
                                      },
                                      method: "POST",
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: "Bearer " + body.data,
                                      },
                                    },
                                    function (error3, response3, body3) {
                                      if (error3) {
                                        console.log(error3);
                                      } else {
                                        console.log(body3);
                                        if (response3.statusCode != 200) {
                                          request(
                                            {
                                              url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                              // agent: agent,
                                              json: {
                                                username: "askrindo",
                                                password: "bzMjN9Wc8DeATBKh",
                                                // "password" :"development"
                                              },
                                              method: "POST",
                                              headers: {
                                                "Content-Type":
                                                  "application/json",
                                              },
                                            },
                                            function (
                                              errorfix,
                                              responsefix,
                                              bodyfix
                                            ) {
                                              if (errorfix) {
                                                console.log(errorfix);
                                              } else {
                                                body.data = bodyfix.data;
                                                console.log("REFRESH TOKEN");
                                                request(
                                                  {
                                                    url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon",
                                                    // agent: agent,
                                                    json: {
                                                      nik: val.no_id_debitur,
                                                      nama: val.nama_debitur,
                                                      tgl_lahir: tgl_lahir,
                                                      jns_kelamin:
                                                        val.jenis_kelamin,
                                                      maritas_sts:
                                                        val.marital_status,
                                                      pendidikan:
                                                        val.pendidikan,
                                                      pekerjaan:
                                                        val.jenis_pekerjaan,
                                                      jns_debitur: "R",
                                                      alamat:
                                                        val.alamat_debitur,
                                                      kode_kabkota:
                                                        body2.data.kode,
                                                      kode_pos: val.kode_pos,
                                                      npwp: val.npwp,
                                                      mulai_usaha: new Date(
                                                        val.tgl_mulai_usaha
                                                      ),
                                                      alamat_usaha:
                                                        val.alamat_debitur,
                                                      ijin_usaha:
                                                        val.no_ijin_usaha,
                                                      modal_usaha:
                                                        val.modal_usaha,
                                                      jml_pekerja: 1,
                                                      jml_kredit:
                                                        val.plafond_kredit,
                                                      no_hp: val.no_hp_debitur,
                                                      uraian_agunan:
                                                        uraian_agunan,
                                                    },
                                                    method: "POST",
                                                    headers: {
                                                      "Content-Type":
                                                        "application/json",
                                                      Authorization:
                                                        "Bearer " + body.data,
                                                    },
                                                  },
                                                  function (
                                                    error3re,
                                                    response3re,
                                                    body3re
                                                  ) {
                                                    if (error3) {
                                                      console.log(error3re);
                                                    } else {
                                                      console.log(body3re);

                                                      if (
                                                        body3re.code === "00"
                                                      ) {
                                                        if (
                                                          i ==
                                                          params.length - 1
                                                        ) {
                                                          sukses++;
                                                          console.log(
                                                            "calon sukses = " +
                                                              sukses +
                                                              " & gagal = " +
                                                              gagal
                                                          );
                                                          updateStatusSIKPPenjaminan(
                                                            val.id_penjaminan,
                                                            1,
                                                            val.no_id_debitur
                                                          ).then(function (
                                                            params
                                                          ) {
                                                            res
                                                              .status(200)
                                                              .json({
                                                                message:
                                                                  "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal,
                                                              });
                                                          });
                                                        } else {
                                                          sukses++;
                                                          console.log(
                                                            "calon sukses = " +
                                                              sukses +
                                                              " & gagal = " +
                                                              gagal
                                                          );
                                                          updateStatusSIKPPenjaminan(
                                                            val.id_penjaminan,
                                                            1,
                                                            val.no_id_debitur
                                                          );
                                                        }
                                                      } else {
                                                        if (
                                                          i ==
                                                          params.length - 1
                                                        ) {
                                                          gagal++;
                                                          console.log(
                                                            "calon sukses = " +
                                                              sukses +
                                                              " & gagal = " +
                                                              gagal
                                                          );
                                                          //insert calon gagal
                                                          insertLogSIKP(
                                                            val.id_penjaminan,
                                                            val.no_rekening_pinjaman,
                                                            val.transaction_id_bank,
                                                            val.tgl_premi,
                                                            val.no_sertifikat,
                                                            val.no_id_debitur,
                                                            0,
                                                            body3re.message
                                                          ).then(function (
                                                            params
                                                          ) {
                                                            res
                                                              .status(200)
                                                              .json({
                                                                message:
                                                                  "calon sukses = " +
                                                                  sukses +
                                                                  " & gagal = " +
                                                                  gagal,
                                                              });
                                                          });
                                                        } else {
                                                          gagal++;
                                                          console.log(
                                                            "calon sukses = " +
                                                              sukses +
                                                              " & gagal = " +
                                                              gagal
                                                          );
                                                          //insert calon gagal
                                                          insertLogSIKP(
                                                            val.id_penjaminan,
                                                            val.no_rekening_pinjaman,
                                                            val.transaction_id_bank,
                                                            val.tgl_premi,
                                                            val.no_sertifikat,
                                                            val.no_id_debitur,
                                                            0,
                                                            body3re.message
                                                          );
                                                        }
                                                      }
                                                    }
                                                  }
                                                );
                                              }
                                            }
                                          );
                                        } else if (body3.code === "00") {
                                          if (i == params.length - 1) {
                                            sukses++;
                                            console.log(
                                              "calon sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPPenjaminan(
                                              val.id_penjaminan,
                                              1,
                                              val.no_id_debitur
                                            ).then(function (params) {
                                              res.status(200).json({
                                                message:
                                                  "calon sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal,
                                              });
                                            });
                                          } else {
                                            sukses++;
                                            console.log(
                                              "calon sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPPenjaminan(
                                              val.id_penjaminan,
                                              1,
                                              val.no_id_debitur
                                            );
                                          }
                                        } else {
                                          if (i == params.length - 1) {
                                            gagal++;
                                            console.log(
                                              "calon sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            //insert calon gagal
                                            insertLogSIKP(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.transaction_id_bank,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              0,
                                              body3.message
                                            ).then(function (params) {
                                              res.status(200).json({
                                                message:
                                                  "calon sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal,
                                              });
                                            });
                                          } else {
                                            gagal++;
                                            console.log(
                                              "calon sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            //insert calon gagal
                                            insertLogSIKP(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.transaction_id_bank,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              0,
                                              body3.message
                                            );
                                          }
                                        }
                                      }
                                    }
                                  );
                                });
                              } else {
                                gagal++;
                                console.log(
                                  "Calon sukses = " +
                                    sukses +
                                    " & gagal = " +
                                    gagal
                                );
                                insertLogSIKP(
                                  val.id_penjaminan,
                                  val.no_rekening_pinjaman,
                                  val.transaction_id_bank,
                                  val.tgl_premi,
                                  val.no_sertifikat,
                                  val.no_id_debitur,
                                  0,
                                  body2.message + " (Get No Kota/Kab)"
                                );
                              }
                            }
                          }
                        );
                      }
                    );
                  } else if (req.body.status === 1) {
                    if (val.no_rek_lama) {
                      val.no_rek_lama = val.no_rek_lama.replace(
                        /[^0-9a-z_]/gi,
                        ""
                      );
                    }
                    console.log({
                      rekening_baru: val.no_rekening_pinjaman.replace(
                        /[^0-9a-z_]/gi,
                        ""
                      ),
                      kode_bank: val.kode_bank,
                      nik: val.no_id_debitur,
                      rekening_lama: val.no_rek_lama,
                      status_akad: "B",
                      status_rekening: 1,
                      nomor_akad: val.no_perjanjian_kredit,
                      tgl_akad: new Date(val.tgl_pk),
                      tgl_penarikan: new Date(val.tgl_awal_pertanggungan),
                      tgl_jatuh_tempo: new Date(val.tgl_akhir_pertanggungan),
                      nilai_akad: val.plafond_kredit,
                      tgl_penjaminan: val.tgl_sertifikat,
                      nomor_penjaminan: val.no_sertifikat,
                      nilai_dijamin: val.nilai_pertanggungan,
                      sektor: val.sektor_ekonomi,
                    });
                    request(
                      {
                        url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad",
                        // agent: agent,
                        json: {
                          rekening_baru: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          nik: val.no_id_debitur,
                          rekening_lama: val.no_rek_lama,
                          status_akad: "B",
                          status_rekening: 1,
                          nomor_akad: val.no_perjanjian_kredit,
                          tgl_akad: new Date(val.tgl_pk),
                          tgl_penarikan: new Date(val.tgl_awal_pertanggungan),
                          tgl_jatuh_tempo: new Date(
                            val.tgl_akhir_pertanggungan
                          ),
                          nilai_akad: val.plafond_kredit,
                          tgl_penjaminan: val.tgl_sertifikat,
                          nomor_penjaminan: val.no_sertifikat,
                          nilai_dijamin: val.nilai_pertanggungan,
                          sektor: val.sektor_ekonomi,
                        },
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                          Authorization: "Bearer " + body.data,
                        },
                      },
                      function (error4, response4, body4) {
                        if (error4) {
                          console.log(error4);
                        } else {
                          console.log(body4);
                          if (response4.statusCode != 200) {
                            request(
                              {
                                url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                // agent: agent,
                                json: {
                                  username: "askrindo",
                                  password: "bzMjN9Wc8DeATBKh",
                                  // "password" :"development"
                                },
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                },
                              },
                              function (errorfix, responsefix, bodyfix) {
                                if (errorfix) {
                                  console.log(errorfix);
                                } else {
                                  body.data = bodyfix.data;
                                  console.log("REFRESH TOKEN");
                                  request(
                                    {
                                      url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad",
                                      // agent: agent,
                                      json: {
                                        rekening_baru:
                                          val.no_rekening_pinjaman.replace(
                                            /[^0-9a-z_]/gi,
                                            ""
                                          ),
                                        kode_bank: val.kode_bank,
                                        nik: val.no_id_debitur,
                                        rekening_lama: val.no_rek_lama,
                                        status_akad: "B",
                                        status_rekening: 1,
                                        nomor_akad: val.no_perjanjian_kredit,
                                        tgl_akad: new Date(val.tgl_pk),
                                        tgl_penarikan: new Date(
                                          val.tgl_awal_pertanggungan
                                        ),
                                        tgl_jatuh_tempo: new Date(
                                          val.tgl_akhir_pertanggungan
                                        ),
                                        nilai_akad: val.plafond_kredit,
                                        tgl_penjaminan: val.tgl_sertifikat,
                                        nomor_penjaminan: val.no_sertifikat,
                                        nilai_dijamin: val.nilai_pertanggungan,
                                        sektor: val.sektor_ekonomi,
                                      },
                                      method: "POST",
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: "Bearer " + body.data,
                                      },
                                    },
                                    function (error4re, response4re, body4re) {
                                      if (error4re) {
                                        console.log(error4re);
                                      } else {
                                        if (body4re.code === "00") {
                                          if (i == params.length - 1) {
                                            sukses++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPPenjaminan(
                                              val.id_penjaminan,
                                              2,
                                              val.no_id_debitur
                                            ).then(function (params) {
                                              res.status(200).json({
                                                message:
                                                  "akad sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal,
                                              });
                                            });
                                          } else {
                                            sukses++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPPenjaminan(
                                              val.id_penjaminan,
                                              2,
                                              val.no_id_debitur
                                            );
                                          }
                                        } else {
                                          // insert akad gagal
                                          if (i == params.length - 1) {
                                            gagal++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKP(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.transaction_id_bank,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              1,
                                              body4re.message
                                            ).then(function (params) {
                                              res.status(200).json({
                                                message:
                                                  "akad sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal,
                                              });
                                            });
                                          } else {
                                            gagal++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKP(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.transaction_id_bank,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              1,
                                              body4re.message
                                            );
                                          }
                                        }
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          } else if (body4.code === "00") {
                            if (i == params.length - 1) {
                              sukses++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPPenjaminan(
                                val.id_penjaminan,
                                2,
                                val.no_id_debitur
                              ).then(function (params) {
                                res.status(200).json({
                                  message:
                                    "akad sukses = " +
                                    sukses +
                                    " & gagal = " +
                                    gagal,
                                });
                              });
                            } else {
                              sukses++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPPenjaminan(
                                val.id_penjaminan,
                                2,
                                val.no_id_debitur
                              );
                            }
                          } else {
                            // insert akad gagal
                            if (i == params.length - 1) {
                              gagal++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKP(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.transaction_id_bank,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                1,
                                body4.message
                              ).then(function (params) {
                                res.status(200).json({
                                  message:
                                    "akad sukses = " +
                                    sukses +
                                    " & gagal = " +
                                    gagal,
                                });
                              });
                            } else {
                              gagal++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKP(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.transaction_id_bank,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                1,
                                body4.message
                              );
                            }
                          }
                        }
                      }
                    );
                  } else if (req.body.status === 2) {
                    console.log({
                      nomor_tagihan: req.body.nomor_tagihan,
                      nomor_rekening: val.no_rekening_pinjaman.replace(
                        /[^0-9a-z_]/gi,
                        ""
                      ),
                      kode_bank: val.kode_bank,
                      outstanding: val.plafond_kredit,
                      tahun: dateFormat(new Date(), "yyyy"),
                      nilai_ijp: val.premi,
                      periode: dateFormat(new Date(val.tgl_premi), "yyyy"),
                    });
                    request(
                      {
                        url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                        // agent: agent,
                        json: {
                          nomor_tagihan: req.body.nomor_tagihan,
                          nomor_rekening: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          outstanding: val.plafond_kredit,
                          tahun: dateFormat(new Date(), "yyyy"),
                          nilai_ijp: val.premi,
                          periode: val.tahun_ke,
                        },
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                          Authorization: "Bearer " + body.data,
                        },
                      },
                      function (error5, response5, body5) {
                        if (error5) {
                          console.log(error5);
                        } else {
                          console.log(body5);
                          if (response5.statusCode != 200) {
                            request(
                              {
                                url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                // agent: agent,
                                json: {
                                  username: "askrindo",
                                  password: "bzMjN9Wc8DeATBKh",
                                  // "password" :"development"
                                },
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                },
                              },
                              function (errorfix, responsefix, bodyfix) {
                                if (errorfix) {
                                  console.log(errorfix);
                                } else {
                                  body.data = bodyfix.data;
                                  console.log("REFRESH TOKEN");
                                  request(
                                    {
                                      url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                                      // agent: agent,
                                      json: {
                                        nomor_tagihan: req.body.nomor_tagihan,
                                        nomor_rekening:
                                          val.no_rekening_pinjaman.replace(
                                            /[^0-9a-z_]/gi,
                                            ""
                                          ),
                                        kode_bank: val.kode_bank,
                                        outstanding: val.plafond_kredit,
                                        tahun: dateFormat(new Date(), "yyyy"),
                                        nilai_ijp: val.premi,
                                        periode: val.tahun_ke,
                                      },
                                      method: "POST",
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: "Bearer " + body.data,
                                      },
                                    },
                                    function (error5re, response5re, body5re) {
                                      if (error5re) {
                                        console.log(error5re);
                                      } else {
                                        console.log(body5re);
                                        console.log("REFRESH TOKEN");
                                        if (body5re.code === "00") {
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          if (i == params.length - 1) {
                                            sukses++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPIJP(
                                              val.penjaminan_ijp_id,
                                              true,
                                              req.body.nomor_tagihan
                                            ).then(function (params) {
                                              updateStatusSIKPPenjaminan(
                                                val.id_penjaminan,
                                                3,
                                                val.no_id_debitur
                                              ).then(function (params) {
                                                res.status(200).json({
                                                  message:
                                                    "tagihan sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal,
                                                });
                                              });
                                            });
                                          } else {
                                            sukses++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPIJP(
                                              val.penjaminan_ijp_id,
                                              true,
                                              req.body.nomor_tagihan
                                            ).then(function (params) {
                                              updateStatusSIKPPenjaminan(
                                                val.id_penjaminan,
                                                3,
                                                val.no_id_debitur
                                              );
                                            });
                                          }
                                        } else {
                                          if (i == params.length - 1) {
                                            gagal++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKP(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.transaction_id_bank,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              2,
                                              body5re.message
                                            ).then(function (params) {
                                              res.status(200).json({
                                                message:
                                                  "tagihan sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal,
                                              });
                                            });
                                          } else {
                                            gagal++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKP(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.transaction_id_bank,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              2,
                                              body5re.message
                                            );
                                          }
                                          //insert tagihan gagal
                                        }
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          } else if (body5.code === "00") {
                            sukses++;
                            if (i == params.length - 1) {
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPIJP(
                                val.penjaminan_ijp_id,
                                true,
                                req.body.nomor_tagihan
                              ).then(function (params) {
                                updateStatusSIKPPenjaminan(
                                  val.id_penjaminan,
                                  3,
                                  val.no_id_debitur
                                ).then(function (params) {
                                  res.status(200).json({
                                    message:
                                      "tagihan sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal,
                                  });
                                });
                              });
                            } else {
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPIJP(
                                val.penjaminan_ijp_id,
                                true,
                                req.body.nomor_tagihan
                              ).then(function (params) {
                                updateStatusSIKPPenjaminan(
                                  val.id_penjaminan,
                                  3,
                                  val.no_id_debitur
                                );
                              });
                            }
                          } else {
                            if (i == params.length - 1) {
                              gagal++;
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKP(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.transaction_id_bank,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                2,
                                body5.message
                              ).then(function (params) {
                                res.status(200).json({
                                  message:
                                    "tagihan sukses = " +
                                    sukses +
                                    " & gagal = " +
                                    gagal,
                                });
                              });
                            } else {
                              gagal++;
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKP(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.transaction_id_bank,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                2,
                                body5.message
                              );
                            }
                            //insert tagihan gagal
                          }
                        }
                      }
                    );
                  } else {
                    res.status(400).json({
                      errorMessage: "Action Invalid!",
                    });
                  }
                }, i * 2000);
              });
            } else {
              res.status(400).json({
                message: "Data tidak ditemukan!",
              });
            }
          });
        }
      }
    }
  );
};

exports.postSIKPJPASscheduler = async function (
  tgl_awal,
  tgl_akhir,
  status,
  nomor_tagihan
) {
  var agent;
  var req = {
    body: {
      tgl_awal: null,
      tgl_akhir: null,
      status: null,
      nomor_tagihan: null,
    },
  };
  req.body.tgl_awal = tgl_awal;
  req.body.tgl_akhir = tgl_akhir;
  req.body.status = status;
  req.body.nomor_tagihan = nomor_tagihan;
  agentOptions = {
    host: "202.61.126.162",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };
  agent = new https.Agent(agentOptions);
  request(
    {
      url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
      // agent: agent,
      json: {
        username: "askrindo",
        password: "bzMjN9Wc8DeATBKh",
        // "password" :"development"
      },
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    },
    function (error, response, body) {
      if (error) {
        console.log(error);
      } else {
        console.log(body);
        if (body.data && body.data != "") {
          getPenjaminanJPASByTanggalIJP(
            req.body.tgl_awal,
            req.body.tgl_akhir,
            req.body.status
          ).then(function (params) {
            if (params) {
              var sukses = 0;
              var gagal = 0;
              params.forEach((val, i) => {
                setTimeout(function () {
                  if (req.body.status === 0) {
                    var substring_ktp;
                    var pendidikan;
                    getKodeKotaSIKP(val.kode_pos).then(
                      function (kode_sikp_get) {
                        if (kode_sikp_get.length == 0) {
                          // substring_ktp = '3578'
                          substring_ktp = val.no_id_debitur.substring(0, 4);
                        } else {
                          substring_ktp = kode_sikp_get[0].kode_kabkota;
                        }
                        request(
                          {
                            url:
                              "http://10.238.136.117/pen-umkm-dev/api/v1/Referensi/KabKota/" +
                              substring_ktp,
                            // agent: agent,
                            method: "GET",
                            json: {},
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error2, response2, body2) {
                            if (error2) {
                              console.log(error2);
                            } else {
                              if (response2.statusCode != 200) {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                    // agent: agent,
                                    json: {
                                      username: "askrindo",
                                      password: "bzMjN9Wc8DeATBKh",
                                      // "password" :"development"
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                    },
                                  },
                                  function (errorfix, responsefix, bodyfix) {
                                    if (errorfix) {
                                      console.log(errorfix);
                                    } else {
                                      console.log(
                                        responsefix.statusCode + " setErr"
                                      );
                                      body.data = bodyfix.data;
                                      console.log("REFRESH TOKEN");
                                    }
                                  }
                                );
                              } else if (body2.code === "51") {
                                console.log(body2);

                                var uraian_agunan = null;

                                console.log({
                                  nik: val.no_id_debitur,
                                  nama: val.nama_debitur,
                                  tgl_lahir: new Date(val.tgl_lahir),
                                  jns_kelamin: val.jenis_kelamin,
                                  maritas_sts: val.marital_status,
                                  pendidikan: val.pendidikan,
                                  pekerjaan: val.jenis_pekerjaan,
                                  jns_debitur: "R",
                                  alamat: val.alamat_debitur,
                                  kode_kabkota: body2.data.kode,
                                  kode_pos: val.kode_pos,
                                  npwp: null,
                                  mulai_usaha: new Date(val.tgl_mulai_usaha),
                                  alamat_usaha: val.alamat_debitur,
                                  ijin_usaha: val.no_ijin_usaha,
                                  modal_usaha: val.modal_usaha,
                                  jml_pekerja: 1,
                                  jml_kredit: val.plafond_kredit,
                                  no_hp: null,
                                  uraian_agunan: uraian_agunan,
                                });
                                var tgl_lahir;
                                if (val.jenis_kelamin == "9") {
                                  tgl_lahir = null;
                                } else {
                                  tgl_lahir = new Date(val.tgl_lahir);
                                }
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon",
                                    // agent: agent,
                                    json: {
                                      nik: val.no_id_debitur,
                                      nama: val.nama_debitur,
                                      tgl_lahir: tgl_lahir,
                                      jns_kelamin: val.jenis_kelamin,
                                      maritas_sts: val.marital_status,
                                      pendidikan: val.pendidikan,
                                      pekerjaan: val.jenis_pekerjaan,
                                      jns_debitur: "R",
                                      alamat: val.alamat_debitur,
                                      kode_kabkota: body2.data.kode,
                                      kode_pos: val.kode_pos,
                                      npwp: null,
                                      mulai_usaha: new Date(
                                        val.tgl_mulai_usaha
                                      ),
                                      alamat_usaha: val.alamat_debitur,
                                      ijin_usaha: val.no_ijin_usaha,
                                      modal_usaha: val.modal_usaha,
                                      jml_pekerja: 1,
                                      jml_kredit: val.plafond_kredit,
                                      no_hp: null,
                                      uraian_agunan: uraian_agunan,
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization: "Bearer " + body.data,
                                    },
                                  },
                                  function (error3, response3, body3) {
                                    if (error3) {
                                      console.log(error3);
                                    } else {
                                      console.log(body3);
                                      console.log(response3.statusCode);
                                      if (response3.statusCode != 200) {
                                        request(
                                          {
                                            url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                            // agent: agent,
                                            json: {
                                              username: "askrindo",
                                              password: "bzMjN9Wc8DeATBKh",
                                              // "password" :"development"
                                            },
                                            method: "POST",
                                            headers: {
                                              "Content-Type":
                                                "application/json",
                                            },
                                          },
                                          function (
                                            errorfix,
                                            responsefix,
                                            bodyfix
                                          ) {
                                            if (errorfix) {
                                              console.log(errorfix);
                                            } else {
                                              console.log(
                                                responsefix.statusCode +
                                                  " setErr"
                                              );
                                              body.data = bodyfix.data;
                                              console.log("REFRESH TOKEN");
                                              request(
                                                {
                                                  url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon",
                                                  // agent: agent,
                                                  json: {
                                                    nik: val.no_id_debitur,
                                                    nama: val.nama_debitur,
                                                    tgl_lahir: tgl_lahir,
                                                    jns_kelamin:
                                                      val.jenis_kelamin,
                                                    maritas_sts:
                                                      val.marital_status,
                                                    pendidikan: val.pendidikan,
                                                    pekerjaan:
                                                      val.jenis_pekerjaan,
                                                    jns_debitur: "R",
                                                    alamat: val.alamat_debitur,
                                                    kode_kabkota:
                                                      body2.data.kode,
                                                    kode_pos: val.kode_pos,
                                                    npwp: null,
                                                    mulai_usaha: new Date(
                                                      val.tgl_mulai_usaha
                                                    ),
                                                    alamat_usaha:
                                                      val.alamat_debitur,
                                                    ijin_usaha:
                                                      val.no_ijin_usaha,
                                                    modal_usaha:
                                                      val.modal_usaha,
                                                    jml_pekerja: 1,
                                                    jml_kredit:
                                                      val.plafond_kredit,
                                                    no_hp: null,
                                                    uraian_agunan:
                                                      uraian_agunan,
                                                  },
                                                  method: "POST",
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                    Authorization:
                                                      "Bearer " + body.data,
                                                  },
                                                },
                                                function (
                                                  error3re,
                                                  response3re,
                                                  body3re
                                                ) {
                                                  if (error3) {
                                                    console.log(error3re);
                                                  } else {
                                                    console.log(body3re);

                                                    if (body3re.code === "00") {
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        sukses++;
                                                        console.log(
                                                          "calon sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        updateStatusSIKPPenjaminanJPAS(
                                                          val.id_penjaminan,
                                                          1,
                                                          val.no_id_debitur
                                                        ).then(function (
                                                          params
                                                        ) {
                                                          res.status(200).json({
                                                            message:
                                                              "calon sukses = " +
                                                              sukses +
                                                              " & gagal = " +
                                                              gagal,
                                                          });
                                                        });
                                                      } else {
                                                        sukses++;
                                                        console.log(
                                                          "calon sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        updateStatusSIKPPenjaminanJPAS(
                                                          val.id_penjaminan,
                                                          1,
                                                          val.no_id_debitur
                                                        );
                                                      }
                                                    } else {
                                                      if (
                                                        i ==
                                                        params.length - 1
                                                      ) {
                                                        gagal++;
                                                        console.log(
                                                          "calon sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        //insert calon gagal
                                                        insertLogSIKPJPAS(
                                                          val.id_penjaminan,
                                                          val.no_rekening_pinjaman,
                                                          val.transaction_id_bank,
                                                          val.tgl_premi,
                                                          val.no_sertifikat,
                                                          val.no_id_debitur,
                                                          0,
                                                          body3re.message
                                                        ).then(function (
                                                          params
                                                        ) {
                                                          res.status(200).json({
                                                            message:
                                                              "calon sukses = " +
                                                              sukses +
                                                              " & gagal = " +
                                                              gagal,
                                                          });
                                                        });
                                                      } else {
                                                        gagal++;
                                                        console.log(
                                                          "calon sukses = " +
                                                            sukses +
                                                            " & gagal = " +
                                                            gagal
                                                        );
                                                        //insert calon gagal
                                                        insertLogSIKPJPAS(
                                                          val.id_penjaminan,
                                                          val.no_rekening_pinjaman,
                                                          val.transaction_id_bank,
                                                          val.tgl_premi,
                                                          val.no_sertifikat,
                                                          val.no_id_debitur,
                                                          0,
                                                          body3re.message
                                                        );
                                                      }
                                                    }
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      } else if (body3.code === "00") {
                                        if (i == params.length - 1) {
                                          sukses++;
                                          console.log(
                                            "calon sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          updateStatusSIKPPenjaminanJPAS(
                                            val.id_penjaminan,
                                            1,
                                            val.no_id_debitur
                                          ).then(function (params) {
                                            res.status(200).json({
                                              message:
                                                "calon sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal,
                                            });
                                          });
                                        } else {
                                          sukses++;
                                          console.log(
                                            "calon sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          updateStatusSIKPPenjaminanJPAS(
                                            val.id_penjaminan,
                                            1,
                                            val.no_id_debitur
                                          );
                                        }
                                      } else {
                                        if (i == params.length - 1) {
                                          gagal++;
                                          console.log(
                                            "calon sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          //insert calon gagal
                                          insertLogSIKPJPAS(
                                            val.id_penjaminan,
                                            val.no_rekening_pinjaman,
                                            val.tgl_premi,
                                            val.no_sertifikat,
                                            val.no_id_debitur,
                                            0,
                                            body3.message
                                          ).then(function (params) {
                                            res.status(200).json({
                                              message:
                                                "calon sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal,
                                            });
                                          });
                                        } else {
                                          gagal++;
                                          console.log(
                                            "calon sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          //insert calon gagal
                                          insertLogSIKPJPAS(
                                            val.id_penjaminan,
                                            val.no_rekening_pinjaman,
                                            val.tgl_premi,
                                            val.no_sertifikat,
                                            val.no_id_debitur,
                                            0,
                                            body3.message
                                          );
                                        }
                                      }
                                    }
                                  }
                                );
                              } else {
                                if (i == params.length - 1) {
                                  gagal++;
                                  console.log(
                                    "Calon sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  insertLogSIKPJPAS(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    0,
                                    body2.message + " (Get No Kota/Kab)"
                                  ).then(function (params) {
                                    res.status(200).json({
                                      message:
                                        "calon sukses = " +
                                        sukses +
                                        " & gagal = " +
                                        gagal,
                                    });
                                  });
                                } else {
                                  gagal++;
                                  console.log(
                                    "Calon sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  insertLogSIKPJPAS(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    0,
                                    body2.message + " (Get No Kota/Kab)"
                                  );
                                }
                              }
                            }
                          }
                        );
                      }
                    );
                  } else if (req.body.status === 1) {
                    if (val.no_rek_lama) {
                      val.no_rek_lama = val.no_rek_lama.replace(
                        /[^0-9a-z_]/gi,
                        ""
                      );
                    }
                    console.log({
                      rekening_baru: val.no_rekening_pinjaman.replace(
                        /[^0-9a-z_]/gi,
                        ""
                      ),
                      kode_bank: val.kode_bank,
                      nik: val.no_id_debitur,
                      rekening_lama: val.no_rek_lama,
                      status_akad: "B",
                      status_rekening: 1,
                      nomor_akad: val.no_perjanjian_kredit,
                      tgl_akad: new Date(val.tgl_pk),
                      tgl_penarikan: new Date(val.tgl_awal_pertanggungan),
                      tgl_jatuh_tempo: new Date(val.tgl_akhir_pertanggungan),
                      nilai_akad: val.plafond_kredit,
                      tgl_penjaminan: val.tgl_sertifikat,
                      nomor_penjaminan: val.no_sertifikat,
                      nilai_dijamin: val.nilai_pertanggungan,
                      sektor: val.sektor_ekonomi,
                    });
                    request(
                      {
                        url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad",
                        // agent: agent,
                        json: {
                          rekening_baru: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          nik: val.no_id_debitur,
                          rekening_lama: val.no_rek_lama,
                          status_akad: "B",
                          status_rekening: 1,
                          nomor_akad: val.no_perjanjian_kredit,
                          tgl_akad: new Date(val.tgl_pk),
                          tgl_penarikan: new Date(val.tgl_awal_pertanggungan),
                          tgl_jatuh_tempo: new Date(
                            val.tgl_akhir_pertanggungan
                          ),
                          nilai_akad: val.plafond_kredit,
                          tgl_penjaminan: val.tgl_sertifikat,
                          nomor_penjaminan: val.no_sertifikat,
                          nilai_dijamin: val.nilai_pertanggungan,
                          sektor: val.sektor_ekonomi,
                        },
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                          Authorization: "Bearer " + body.data,
                        },
                      },
                      function (error4, response4, body4) {
                        if (error4) {
                          console.log(error4);
                        } else {
                          console.log(body4);
                          if (response4.statusCode != 200) {
                            request(
                              {
                                url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                // agent: agent,
                                json: {
                                  username: "askrindo",
                                  password: "bzMjN9Wc8DeATBKh",
                                  // "password" :"development"
                                },
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                },
                              },
                              function (errorfix, responsefix, bodyfix) {
                                if (errorfix) {
                                  console.log(errorfix);
                                } else {
                                  console.log(
                                    responsefix.statusCode + " setErr"
                                  );
                                  body.data = bodyfix.data;
                                  console.log("REFRESH TOKEN");
                                  request(
                                    {
                                      url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad",
                                      // agent: agent,
                                      json: {
                                        rekening_baru:
                                          val.no_rekening_pinjaman.replace(
                                            /[^0-9a-z_]/gi,
                                            ""
                                          ),
                                        kode_bank: val.kode_bank,
                                        nik: val.no_id_debitur,
                                        rekening_lama: val.no_rek_lama,
                                        status_akad: "B",
                                        status_rekening: 1,
                                        nomor_akad: val.no_perjanjian_kredit,
                                        tgl_akad: new Date(val.tgl_pk),
                                        tgl_penarikan: new Date(
                                          val.tgl_awal_pertanggungan
                                        ),
                                        tgl_jatuh_tempo: new Date(
                                          val.tgl_akhir_pertanggungan
                                        ),
                                        nilai_akad: val.plafond_kredit,
                                        tgl_penjaminan: val.tgl_sertifikat,
                                        nomor_penjaminan: val.no_sertifikat,
                                        nilai_dijamin: val.nilai_pertanggungan,
                                        sektor: val.sektor_ekonomi,
                                      },
                                      method: "POST",
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: "Bearer " + body.data,
                                      },
                                    },
                                    function (error4re, response4re, body4re) {
                                      if (error4re) {
                                        console.log(error4re);
                                      } else {
                                        if (body4re.code === "00") {
                                          if (i == params.length - 1) {
                                            sukses++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPPenjaminanJPAS(
                                              val.id_penjaminan,
                                              2,
                                              val.no_id_debitur
                                            ).then(function (params) {
                                              res.status(200).json({
                                                message:
                                                  "akad sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal,
                                              });
                                            });
                                          } else {
                                            sukses++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPPenjaminanJPAS(
                                              val.id_penjaminan,
                                              2,
                                              val.no_id_debitur
                                            );
                                          }
                                        } else {
                                          // insert akad gagal
                                          if (i == params.length - 1) {
                                            gagal++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKPJPAS(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              1,
                                              body4re.message
                                            ).then(function (params) {
                                              res.status(200).json({
                                                message:
                                                  "akad sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal,
                                              });
                                            });
                                          } else {
                                            gagal++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKPJPAS(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              1,
                                              body4re.message
                                            );
                                          }
                                        }
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          } else if (body4.code === "00") {
                            if (i == params.length - 1) {
                              sukses++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPPenjaminanJPAS(
                                val.id_penjaminan,
                                2,
                                val.no_id_debitur
                              ).then(function (params) {
                                res.status(200).json({
                                  message:
                                    "akad sukses = " +
                                    sukses +
                                    " & gagal = " +
                                    gagal,
                                });
                              });
                            } else {
                              sukses++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPPenjaminanJPAS(
                                val.id_penjaminan,
                                2,
                                val.no_id_debitur
                              );
                            }
                          } else {
                            // insert akad gagal
                            if (i == params.length - 1) {
                              gagal++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKPJPAS(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                1,
                                body4.message
                              ).then(function (params) {
                                res.status(200).json({
                                  message:
                                    "akad sukses = " +
                                    sukses +
                                    " & gagal = " +
                                    gagal,
                                });
                              });
                            } else {
                              gagal++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKPJPAS(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                1,
                                body4.message
                              );
                            }
                          }
                        }
                      }
                    );
                  } else if (req.body.status === 2) {
                    console.log({
                      nomor_tagihan: req.body.nomor_tagihan,
                      nomor_rekening: val.no_rekening_pinjaman.replace(
                        /[^0-9a-z_]/gi,
                        ""
                      ),
                      kode_bank: val.kode_bank,
                      outstanding: val.plafond_kredit,
                      tahun: dateFormat(new Date(), "yyyy"),
                      nilai_ijp: val.premi,
                      periode: dateFormat(new Date(val.tgl_premi), "yyyy"),
                    });
                    request(
                      {
                        url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                        // agent: agent,
                        json: {
                          nomor_tagihan: req.body.nomor_tagihan,
                          nomor_rekening: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          outstanding: val.plafond_kredit,
                          tahun: dateFormat(new Date(), "yyyy"),
                          nilai_ijp: val.premi,
                          periode: val.tahun_ke,
                        },
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                          Authorization: "Bearer " + body.data,
                        },
                      },
                      function (error5, response5, body5) {
                        if (error5) {
                          console.log(error5);
                        } else {
                          console.log(body5);
                          if (response5.statusCode != 200) {
                            request(
                              {
                                url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                // agent: agent,
                                json: {
                                  username: "askrindo",
                                  password: "bzMjN9Wc8DeATBKh",
                                  // "password" :"development"
                                },
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                },
                              },
                              function (errorfix, responsefix, bodyfix) {
                                if (errorfix) {
                                  console.log(errorfix);
                                } else {
                                  body.data = bodyfix.data;
                                  console.log("REFRESH TOKEN");
                                  request(
                                    {
                                      url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                                      // agent: agent,
                                      json: {
                                        nomor_tagihan: req.body.nomor_tagihan,
                                        nomor_rekening:
                                          val.no_rekening_pinjaman.replace(
                                            /[^0-9a-z_]/gi,
                                            ""
                                          ),
                                        kode_bank: val.kode_bank,
                                        outstanding: val.plafond_kredit,
                                        tahun: dateFormat(new Date(), "yyyy"),
                                        nilai_ijp: val.premi,
                                        periode: val.tahun_ke,
                                      },
                                      method: "POST",
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: "Bearer " + body.data,
                                      },
                                    },
                                    function (error5re, response5re, body5re) {
                                      if (error5re) {
                                        console.log(error5re);
                                      } else {
                                        console.log(body5re);
                                        console.log("REFRESH TOKEN");
                                        if (body5re.code === "00") {
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          if (i == params.length - 1) {
                                            sukses++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPIJPJPAS(
                                              val.penjaminan_ijp_id,
                                              true,
                                              req.body.nomor_tagihan
                                            ).then(function (params) {
                                              updateStatusSIKPPenjaminanJPAS(
                                                val.id_penjaminan,
                                                3,
                                                val.no_id_debitur
                                              ).then(function (params) {
                                                res.status(200).json({
                                                  message:
                                                    "tagihan sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal,
                                                });
                                              });
                                            });
                                          } else {
                                            sukses++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPIJPJPAS(
                                              val.penjaminan_ijp_id,
                                              true,
                                              req.body.nomor_tagihan
                                            ).then(function (params) {
                                              updateStatusSIKPPenjaminanJPAS(
                                                val.id_penjaminan,
                                                3,
                                                val.no_id_debitur
                                              );
                                            });
                                          }
                                        } else {
                                          if (i == params.length - 1) {
                                            gagal++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKPJPAS(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              2,
                                              body5re.message
                                            ).then(function (params) {
                                              res.status(200).json({
                                                message:
                                                  "tagihan sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal,
                                              });
                                            });
                                          } else {
                                            gagal++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKPJPAS(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              2,
                                              body5re.message
                                            );
                                          }
                                          //insert tagihan gagal
                                        }
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          } else if (body5.code === "00") {
                            sukses++;
                            if (i == params.length - 1) {
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPIJPJPAS(
                                val.penjaminan_ijp_id,
                                true,
                                req.body.nomor_tagihan
                              ).then(function (params) {
                                updateStatusSIKPPenjaminanJPAS(
                                  val.id_penjaminan,
                                  3,
                                  val.no_id_debitur
                                ).then(function (params) {
                                  res.status(200).json({
                                    message:
                                      "tagihan sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal,
                                  });
                                });
                              });
                            } else {
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPIJPJPAS(
                                val.penjaminan_ijp_id,
                                true,
                                req.body.nomor_tagihan
                              ).then(function (params) {
                                updateStatusSIKPPenjaminanJPAS(
                                  val.id_penjaminan,
                                  3,
                                  val.no_id_debitur
                                );
                              });
                            }
                          } else {
                            if (i == params.length - 1) {
                              gagal++;
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKPJPAS(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                2,
                                body5.message
                              ).then(function (params) {
                                res.status(200).json({
                                  message:
                                    "tagihan sukses = " +
                                    sukses +
                                    " & gagal = " +
                                    gagal,
                                });
                              });
                            } else {
                              gagal++;
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKPJPAS(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                2,
                                body5.message
                              );
                            }
                            //insert tagihan gagal
                          }
                        }
                      }
                    );
                  } else {
                    res.status(400).json({
                      errorMessage: "Action Invalid!",
                    });
                  }
                }, i * 2000);
              });
            } else {
              res.status(400).json({
                message: "Data tidak ditemukan!",
              });
            }
          });
        }
      }
    }
  );
};

exports.postSIKPJPAS = async function (req, res) {
  var agent;
  agentOptions = {
    host: "202.61.126.162",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };
  agent = new https.Agent(agentOptions);
  request(
    {
      url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
      // agent: agent,
      json: {
        username: "askrindo",
        password: "bzMjN9Wc8DeATBKh",
        // "password" :"development"
      },
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    },
    function (error, response, body) {
      if (error) {
        console.log(error);
      } else {
        console.log(body);
        if (body.data && body.data != "") {
          getPenjaminanJPASByTanggalIJP(
            req.body.tgl_awal,
            req.body.tgl_akhir,
            req.body.status
          ).then(function (params) {
            if (params) {
              var sukses = 0;
              var gagal = 0;
              params.forEach((val, i) => {
                setTimeout(function () {
                  if (req.body.status === 0) {
                    var substring_ktp;
                    var pendidikan;
                    getKodeKotaSIKP(val.kode_pos).then(
                      function (kode_sikp_get) {
                        if (kode_sikp_get.length == 0) {
                          // substring_ktp = '3578'
                          substring_ktp = val.no_id_debitur.substring(0, 4);
                        } else {
                          substring_ktp = kode_sikp_get[0].kode_kabkota;
                        }

                        if (val.npwp) {
                          val.npwp = val.npwp.replace(/[^0-9a-z]/gi, "");
                        } else {
                          val.npwp = null;
                        }
                        var uraian_agunan = null;

                        console.log({
                          nik: val.no_id_debitur,
                          nama: val.nama_debitur,
                          tgl_lahir: new Date(val.tgl_lahir),
                          jns_kelamin: val.jenis_kelamin,
                          maritas_sts: val.marital_status,
                          pendidikan: val.pendidikan,
                          pekerjaan: val.jenis_pekerjaan,
                          jns_debitur: "R",
                          alamat: val.alamat_debitur,
                          kode_kabkota: substring_ktp,
                          kode_pos: val.kode_pos,
                          npwp: val.npwp,
                          mulai_usaha: new Date(val.tgl_mulai_usaha),
                          alamat_usaha: val.alamat_debitur,
                          ijin_usaha: val.no_ijin_usaha,
                          modal_usaha: val.modal_usaha,
                          jml_pekerja: 1,
                          jml_kredit: val.plafond_kredit,
                          no_hp: null,
                          uraian_agunan: uraian_agunan,
                        });
                        var tgl_lahir;
                        if (val.jenis_kelamin == "9") {
                          tgl_lahir = null;
                        } else {
                          tgl_lahir = new Date(val.tgl_lahir);
                        }
                        request(
                          {
                            url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon",
                            // agent: agent,
                            json: {
                              nik: val.no_id_debitur,
                              nama: val.nama_debitur,
                              tgl_lahir: tgl_lahir,
                              jns_kelamin: val.jenis_kelamin,
                              maritas_sts: val.marital_status,
                              pendidikan: val.pendidikan,
                              pekerjaan: val.jenis_pekerjaan,
                              jns_debitur: "R",
                              alamat: val.alamat_debitur,
                              kode_kabkota: substring_ktp,
                              kode_pos: val.kode_pos,
                              npwp: val.npwp,
                              mulai_usaha: null,
                              alamat_usaha: val.alamat_debitur,
                              ijin_usaha: null,
                              modal_usaha: val.modal_usaha,
                              jml_pekerja: 1,
                              jml_kredit: val.plafond_kredit,
                              no_hp: null,
                              uraian_agunan: uraian_agunan,
                            },
                            method: "POST",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: "Bearer " + body.data,
                            },
                          },
                          function (error3, response3, body3) {
                            if (error3) {
                              console.log(error3);
                            } else {
                              console.log(body3);
                              console.log(response3.statusCode);
                              if (response3.statusCode != 200) {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                    // agent: agent,
                                    json: {
                                      username: "askrindo",
                                      password: "bzMjN9Wc8DeATBKh",
                                      // "password" :"development"
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                    },
                                  },
                                  function (errorfix, responsefix, bodyfix) {
                                    if (errorfix) {
                                      console.log(errorfix);
                                    } else {
                                      console.log(
                                        responsefix.statusCode + " setErr"
                                      );
                                      body.data = bodyfix.data;
                                      console.log("REFRESH TOKEN");
                                      request(
                                        {
                                          url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon",
                                          // agent: agent,
                                          json: {
                                            nik: val.no_id_debitur,
                                            nama: val.nama_debitur,
                                            tgl_lahir: tgl_lahir,
                                            jns_kelamin: val.jenis_kelamin,
                                            maritas_sts: val.marital_status,
                                            pendidikan: val.pendidikan,
                                            pekerjaan: val.jenis_pekerjaan,
                                            jns_debitur: "R",
                                            alamat: val.alamat_debitur,
                                            kode_kabkota: substring_ktp,
                                            kode_pos: val.kode_pos,
                                            npwp: val.npwp,
                                            mulai_usaha: null,
                                            alamat_usaha: val.alamat_debitur,
                                            ijin_usaha: null,
                                            modal_usaha: val.modal_usaha,
                                            jml_pekerja: 1,
                                            jml_kredit: val.plafond_kredit,
                                            no_hp: null,
                                            uraian_agunan: uraian_agunan,
                                          },
                                          method: "POST",
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer " + body.data,
                                          },
                                        },
                                        function (
                                          error3re,
                                          response3re,
                                          body3re
                                        ) {
                                          if (error3) {
                                            console.log(error3re);
                                          } else {
                                            console.log(body3re);

                                            if (body3re.code === "00") {
                                              if (i == params.length - 1) {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPPenjaminanJPAS(
                                                  val.id_penjaminan,
                                                  1,
                                                  val.no_id_debitur
                                                ).then(function (params) {
                                                  res.status(200).json({
                                                    message:
                                                      "calon sukses = " +
                                                      sukses +
                                                      " & gagal = " +
                                                      gagal,
                                                  });
                                                });
                                              } else {
                                                sukses++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                updateStatusSIKPPenjaminanJPAS(
                                                  val.id_penjaminan,
                                                  1,
                                                  val.no_id_debitur
                                                );
                                              }
                                            } else {
                                              if (i == params.length - 1) {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal
                                                insertLogSIKPJPAS(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  0,
                                                  body3re.message
                                                ).then(function (params) {
                                                  res.status(200).json({
                                                    message:
                                                      "calon sukses = " +
                                                      sukses +
                                                      " & gagal = " +
                                                      gagal,
                                                  });
                                                });
                                              } else {
                                                gagal++;
                                                console.log(
                                                  "calon sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal
                                                );
                                                //insert calon gagal
                                                insertLogSIKPJPAS(
                                                  val.id_penjaminan,
                                                  val.no_rekening_pinjaman,
                                                  val.transaction_id_bank,
                                                  val.tgl_premi,
                                                  val.no_sertifikat,
                                                  val.no_id_debitur,
                                                  0,
                                                  body3re.message
                                                );
                                              }
                                            }
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              } else if (body3.code === "00") {
                                if (i == params.length - 1) {
                                  sukses++;
                                  console.log(
                                    "calon sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  updateStatusSIKPPenjaminanJPAS(
                                    val.id_penjaminan,
                                    1,
                                    val.no_id_debitur
                                  ).then(function (params) {
                                    res.status(200).json({
                                      message:
                                        "calon sukses = " +
                                        sukses +
                                        " & gagal = " +
                                        gagal,
                                    });
                                  });
                                } else {
                                  sukses++;
                                  console.log(
                                    "calon sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  updateStatusSIKPPenjaminanJPAS(
                                    val.id_penjaminan,
                                    1,
                                    val.no_id_debitur
                                  );
                                }
                              } else {
                                if (i == params.length - 1) {
                                  gagal++;
                                  console.log(
                                    "calon sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  //insert calon gagal
                                  insertLogSIKPJPAS(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    0,
                                    body3.message
                                  ).then(function (params) {
                                    res.status(200).json({
                                      message:
                                        "calon sukses = " +
                                        sukses +
                                        " & gagal = " +
                                        gagal,
                                    });
                                  });
                                } else {
                                  gagal++;
                                  console.log(
                                    "calon sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal
                                  );
                                  //insert calon gagal
                                  insertLogSIKPJPAS(
                                    val.id_penjaminan,
                                    val.no_rekening_pinjaman,
                                    val.tgl_premi,
                                    val.no_sertifikat,
                                    val.no_id_debitur,
                                    0,
                                    body3.message
                                  );
                                }
                              }
                            }
                          }
                        );
                      }
                    );
                  } else if (req.body.status === 1) {
                    if (val.no_rek_lama) {
                      val.no_rek_lama = val.no_rek_lama.replace(
                        /[^0-9a-z_]/gi,
                        ""
                      );
                    }
                    console.log({
                      rekening_baru: val.no_rekening_pinjaman.replace(
                        /[^0-9a-z_]/gi,
                        ""
                      ),
                      kode_bank: val.kode_bank,
                      nik: val.no_id_debitur,
                      rekening_lama: val.no_rek_lama,
                      status_akad: "B",
                      status_rekening: 1,
                      nomor_akad: val.no_perjanjian_kredit,
                      tgl_akad: new Date(val.tgl_pk),
                      tgl_penarikan: new Date(val.tgl_awal_pertanggungan),
                      tgl_jatuh_tempo: new Date(val.tgl_akhir_pertanggungan),
                      nilai_akad: val.plafond_kredit,
                      tgl_penjaminan: val.tgl_sertifikat,
                      nomor_penjaminan: val.no_sertifikat,
                      nilai_dijamin: val.nilai_pertanggungan,
                      sektor: val.sektor_ekonomi,
                    });
                    request(
                      {
                        url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad",
                        // agent: agent,
                        json: {
                          rekening_baru: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          nik: val.no_id_debitur,
                          rekening_lama: val.no_rek_lama,
                          status_akad: "B",
                          status_rekening: 1,
                          nomor_akad: val.no_perjanjian_kredit,
                          tgl_akad: new Date(val.tgl_pk),
                          tgl_penarikan: new Date(val.tgl_awal_pertanggungan),
                          tgl_jatuh_tempo: new Date(
                            val.tgl_akhir_pertanggungan
                          ),
                          nilai_akad: val.plafond_kredit,
                          tgl_penjaminan: val.tgl_sertifikat,
                          nomor_penjaminan: val.no_sertifikat,
                          nilai_dijamin: val.nilai_pertanggungan,
                          sektor: val.sektor_ekonomi,
                        },
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                          Authorization: "Bearer " + body.data,
                        },
                      },
                      function (error4, response4, body4) {
                        if (error4) {
                          console.log(error4);
                        } else {
                          console.log(body4);
                          if (response4.statusCode != 200) {
                            request(
                              {
                                url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                // agent: agent,
                                json: {
                                  username: "askrindo",
                                  password: "bzMjN9Wc8DeATBKh",
                                  // "password" :"development"
                                },
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                },
                              },
                              function (errorfix, responsefix, bodyfix) {
                                if (errorfix) {
                                  console.log(errorfix);
                                } else {
                                  console.log(
                                    responsefix.statusCode + " setErr"
                                  );
                                  body.data = bodyfix.data;
                                  console.log("REFRESH TOKEN");
                                  request(
                                    {
                                      url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad",
                                      // agent: agent,
                                      json: {
                                        rekening_baru:
                                          val.no_rekening_pinjaman.replace(
                                            /[^0-9a-z_]/gi,
                                            ""
                                          ),
                                        kode_bank: val.kode_bank,
                                        nik: val.no_id_debitur,
                                        rekening_lama: val.no_rek_lama,
                                        status_akad: "B",
                                        status_rekening: 1,
                                        nomor_akad: val.no_perjanjian_kredit,
                                        tgl_akad: new Date(val.tgl_pk),
                                        tgl_penarikan: new Date(
                                          val.tgl_awal_pertanggungan
                                        ),
                                        tgl_jatuh_tempo: new Date(
                                          val.tgl_akhir_pertanggungan
                                        ),
                                        nilai_akad: val.plafond_kredit,
                                        tgl_penjaminan: val.tgl_sertifikat,
                                        nomor_penjaminan: val.no_sertifikat,
                                        nilai_dijamin: val.nilai_pertanggungan,
                                        sektor: val.sektor_ekonomi,
                                      },
                                      method: "POST",
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: "Bearer " + body.data,
                                      },
                                    },
                                    function (error4re, response4re, body4re) {
                                      if (error4re) {
                                        console.log(error4re);
                                      } else {
                                        if (body4re.code === "00") {
                                          if (i == params.length - 1) {
                                            sukses++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPPenjaminanJPAS(
                                              val.id_penjaminan,
                                              2,
                                              val.no_id_debitur
                                            ).then(function (params) {
                                              res.status(200).json({
                                                message:
                                                  "akad sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal,
                                              });
                                            });
                                          } else {
                                            sukses++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPPenjaminanJPAS(
                                              val.id_penjaminan,
                                              2,
                                              val.no_id_debitur
                                            );
                                          }
                                        } else {
                                          // insert akad gagal
                                          if (i == params.length - 1) {
                                            gagal++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKPJPAS(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              1,
                                              body4re.message
                                            ).then(function (params) {
                                              res.status(200).json({
                                                message:
                                                  "akad sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal,
                                              });
                                            });
                                          } else {
                                            gagal++;
                                            console.log(
                                              "akad sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKPJPAS(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              1,
                                              body4re.message
                                            );
                                          }
                                        }
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          } else if (body4.code === "00") {
                            if (i == params.length - 1) {
                              sukses++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPPenjaminanJPAS(
                                val.id_penjaminan,
                                2,
                                val.no_id_debitur
                              ).then(function (params) {
                                res.status(200).json({
                                  message:
                                    "akad sukses = " +
                                    sukses +
                                    " & gagal = " +
                                    gagal,
                                });
                              });
                            } else {
                              sukses++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPPenjaminanJPAS(
                                val.id_penjaminan,
                                2,
                                val.no_id_debitur
                              );
                            }
                          } else {
                            // insert akad gagal
                            if (i == params.length - 1) {
                              gagal++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKPJPAS(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                1,
                                body4.message
                              ).then(function (params) {
                                res.status(200).json({
                                  message:
                                    "akad sukses = " +
                                    sukses +
                                    " & gagal = " +
                                    gagal,
                                });
                              });
                            } else {
                              gagal++;
                              console.log(
                                "akad sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKPJPAS(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                1,
                                body4.message
                              );
                            }
                          }
                        }
                      }
                    );
                  } else if (req.body.status === 2) {
                    console.log({
                      nomor_tagihan: req.body.nomor_tagihan,
                      nomor_rekening: val.no_rekening_pinjaman.replace(
                        /[^0-9a-z_]/gi,
                        ""
                      ),
                      kode_bank: val.kode_bank,
                      outstanding: val.plafond_kredit,
                      tahun: dateFormat(new Date(), "yyyy"),
                      nilai_ijp: val.premi,
                      periode: dateFormat(new Date(val.tgl_premi), "yyyy"),
                    });
                    request(
                      {
                        url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                        // agent: agent,
                        json: {
                          nomor_tagihan: req.body.nomor_tagihan,
                          nomor_rekening: val.no_rekening_pinjaman.replace(
                            /[^0-9a-z_]/gi,
                            ""
                          ),
                          kode_bank: val.kode_bank,
                          outstanding: val.plafond_kredit,
                          tahun: dateFormat(new Date(), "yyyy"),
                          nilai_ijp: val.premi,
                          periode: val.tahun_ke,
                        },
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                          Authorization: "Bearer " + body.data,
                        },
                      },
                      function (error5, response5, body5) {
                        if (error5) {
                          console.log(error5);
                        } else {
                          console.log(body5);
                          if (response5.statusCode != 200) {
                            request(
                              {
                                url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
                                // agent: agent,
                                json: {
                                  username: "askrindo",
                                  password: "bzMjN9Wc8DeATBKh",
                                  // "password" :"development"
                                },
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                },
                              },
                              function (errorfix, responsefix, bodyfix) {
                                if (errorfix) {
                                  console.log(errorfix);
                                } else {
                                  body.data = bodyfix.data;
                                  console.log("REFRESH TOKEN");
                                  request(
                                    {
                                      url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                                      // agent: agent,
                                      json: {
                                        nomor_tagihan: req.body.nomor_tagihan,
                                        nomor_rekening:
                                          val.no_rekening_pinjaman.replace(
                                            /[^0-9a-z_]/gi,
                                            ""
                                          ),
                                        kode_bank: val.kode_bank,
                                        outstanding: val.plafond_kredit,
                                        tahun: dateFormat(new Date(), "yyyy"),
                                        nilai_ijp: val.premi,
                                        periode: val.tahun_ke,
                                      },
                                      method: "POST",
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: "Bearer " + body.data,
                                      },
                                    },
                                    function (error5re, response5re, body5re) {
                                      if (error5re) {
                                        console.log(error5re);
                                      } else {
                                        console.log(body5re);
                                        console.log("REFRESH TOKEN");
                                        if (body5re.code === "00") {
                                          console.log(
                                            "tagihan sukses = " +
                                              sukses +
                                              " & gagal = " +
                                              gagal
                                          );
                                          if (i == params.length - 1) {
                                            sukses++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPIJPJPAS(
                                              val.penjaminan_ijp_id,
                                              true,
                                              req.body.nomor_tagihan
                                            ).then(function (params) {
                                              updateStatusSIKPPenjaminanJPAS(
                                                val.id_penjaminan,
                                                3,
                                                val.no_id_debitur
                                              ).then(function (params) {
                                                res.status(200).json({
                                                  message:
                                                    "tagihan sukses = " +
                                                    sukses +
                                                    " & gagal = " +
                                                    gagal,
                                                });
                                              });
                                            });
                                          } else {
                                            sukses++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            updateStatusSIKPIJPJPAS(
                                              val.penjaminan_ijp_id,
                                              true,
                                              req.body.nomor_tagihan
                                            ).then(function (params) {
                                              updateStatusSIKPPenjaminanJPAS(
                                                val.id_penjaminan,
                                                3,
                                                val.no_id_debitur
                                              );
                                            });
                                          }
                                        } else {
                                          if (i == params.length - 1) {
                                            gagal++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKPJPAS(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              2,
                                              body5re.message
                                            ).then(function (params) {
                                              res.status(200).json({
                                                message:
                                                  "tagihan sukses = " +
                                                  sukses +
                                                  " & gagal = " +
                                                  gagal,
                                              });
                                            });
                                          } else {
                                            gagal++;
                                            console.log(
                                              "tagihan sukses = " +
                                                sukses +
                                                " & gagal = " +
                                                gagal
                                            );
                                            insertLogSIKPJPAS(
                                              val.id_penjaminan,
                                              val.no_rekening_pinjaman,
                                              val.tgl_premi,
                                              val.no_sertifikat,
                                              val.no_id_debitur,
                                              2,
                                              body5re.message
                                            );
                                          }
                                          //insert tagihan gagal
                                        }
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          } else if (body5.code === "00") {
                            sukses++;
                            if (i == params.length - 1) {
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPIJPJPAS(
                                val.penjaminan_ijp_id,
                                true,
                                req.body.nomor_tagihan
                              ).then(function (params) {
                                updateStatusSIKPPenjaminanJPAS(
                                  val.id_penjaminan,
                                  3,
                                  val.no_id_debitur
                                ).then(function (params) {
                                  res.status(200).json({
                                    message:
                                      "tagihan sukses = " +
                                      sukses +
                                      " & gagal = " +
                                      gagal,
                                  });
                                });
                              });
                            } else {
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              updateStatusSIKPIJPJPAS(
                                val.penjaminan_ijp_id,
                                true,
                                req.body.nomor_tagihan
                              ).then(function (params) {
                                updateStatusSIKPPenjaminanJPAS(
                                  val.id_penjaminan,
                                  3,
                                  val.no_id_debitur
                                );
                              });
                            }
                          } else {
                            if (i == params.length - 1) {
                              gagal++;
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKPJPAS(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                2,
                                body5.message
                              ).then(function (params) {
                                res.status(200).json({
                                  message:
                                    "tagihan sukses = " +
                                    sukses +
                                    " & gagal = " +
                                    gagal,
                                });
                              });
                            } else {
                              gagal++;
                              console.log(
                                "tagihan sukses = " +
                                  sukses +
                                  " & gagal = " +
                                  gagal
                              );
                              insertLogSIKPJPAS(
                                val.id_penjaminan,
                                val.no_rekening_pinjaman,
                                val.tgl_premi,
                                val.no_sertifikat,
                                val.no_id_debitur,
                                2,
                                body5.message
                              );
                            }
                            //insert tagihan gagal
                          }
                        }
                      }
                    );
                  } else {
                    res.status(400).json({
                      errorMessage: "Action Invalid!",
                    });
                  }
                }, i * 1000);
              });
            } else {
              res.status(400).json({
                message: "Data tidak ditemukan!",
              });
            }
          });
        }
      }
    }
  );
};

exports.schedulerSAA = async function (req, res) {
  javaPath = "./node_modules/sybase/JavaSybaseLink/dist/JavaSybaseLink.jar";
  db = new Sybase(
    "10.10.1.99",
    5000,
    "dummy_saa",
    "sa",
    "Askrindo#4321",
    "",
    javaPath
  );
  // db.connect(function (err) {
  //     db.query("SELECT top 1 * from transaksi_detil", function (err, data) {
  //         if (err) console.log(err);
  //         console.log(data)
  //         res.json(data)
  //     })
  // })

  select_detail_saa = await model.sequelize
    .query(
      "select extract(year from a.tgl_premi) as tahun, right('0'||extract(month from a.tgl_premi),2) as bulan, c.id_cabang, b.kode_cabang_askrindo, b.kode_bank, sum(a.premi) as akumulasi_premi, sum(a.cadangan) as akumulasi_cadangan from t_penjaminan_ijp a, t_penjaminan b, m_cabang c where c.kode_cabang = b.kode_cabang_askrindo and c.group_id = 2 and a.id_penjaminan = b.id_penjaminan and extract(year from a.tgl_premi) = extract(year from '2020-08-01'::date) and extract(month from a.tgl_premi) = extract(month from '2020-08-01'::date) group by b.kode_bank, b.kode_cabang_askrindo, c.id_cabang, tahun, bulan order by b.kode_bank",
      {
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (select_detail_saa) {
      // select_detail_saa.forEach(async (detail, i) =>
      // {
      //     insert_staging_saa = await model.sequelize.query("INSERT INTO public.t_jurnal_produksi_ijp(id_cabang, kode_bank, bulan, tahun, periode_awal, periode_akhir, nilai_ijp, no_jurnal, tgl_jurnal, nilai_cadangan, status, version, created_by, created_date, modified_by, modified_date)VALUES(:id_cabang, :kode_bank, :bulan, :tahun, now(), now(), :nilai_ijp, NULL, NULL, :nilai_cadangan, false, 1, 'SYSTEM', now(), NULL, NULL);", {
      //         replacements: {id_cabang: detail.id_cabang, kode_bank: detail.kode_bank, bulan: detail.bulan, tahun:detail.tahun, nilai_ijp: detail.akumulasi_premi, nilai_cadangan: detail.akumulasi_cadangan},
      //         type: model.sequelize.QueryTypes.INSERT,
      //         quoteIdentifiers: true}).then(async function () {
      //             select_penjaminan = await model.sequelize.query("select id_jurnal_produksi_ijp from t_jurnal_produksi_ijp tjpi where id_cabang = :id_cabang and kode_bank = :kode_bank and bulan = :bulan and tahun = :tahun", {
      //                 replacements: {id_cabang: detail.id_cabang, kode_bank: detail.kode_bank, bulan: detail.bulan, tahun:detail.tahun},
      //                 type: model.sequelize.QueryTypes.SELECT,
      //                 quoteIdentifiers: true}).then(async function (select_penjaminan) {
      //                     update_id_ijp = await model.sequelize.query("UPDATE t_penjaminan_ijp SET id_jurnal_produksi_ijp = :id_jurnal_produksi_ijp, modified_date = now(), modified_by = 'SYSTEM' where id_penjaminan in(select id_penjaminan from t_penjaminan where kode_cabang_askrindo = :kode_cabang_askrindo and kode_bank = :kode_bank) and extract(year from tgl_premi) = extract(year from now()) and extract(month from tgl_premi) = extract(month from now()) and id_jurnal_produksi_ijp is null", {
      //                         replacements: {id_jurnal_produksi_ijp: select_penjaminan[0].id_jurnal_produksi_ijp, kode_cabang_askrindo: detail.kode_cabang_askrindo, kode_bank: detail.kode_bank},
      //                         type: model.sequelize.QueryTypes.UPDATE,
      //                         quoteIdentifiers: true})
      //                 })
      //         })
      // })
    })
    .then(async function (params) {
      select_saa_push = await model.sequelize
        .query(
          "select * from t_jurnal_produksi_ijp where bulan = extract(month from now()) and tahun = extract(year from now()) and no_jurnal is null and tgl_jurnal is null and status = false",
          {
            type: model.sequelize.QueryTypes.SELECT,
            quoteIdentifiers: true,
          }
        )
        .then(function (select_saa_push) {
          db.connect(function (err) {
            if (err) return console.log(err);
            select_saa_push.forEach(async (push, i) => {
              noreg = await db.query(
                "SELECT noreg FROM no_transaksi WHERE ( sbu_id  = '" +
                  push.id_cabang.substring(3, 5) +
                  "' ) AND ( tahun   = " +
                  push.tahun +
                  " ) AND ( kur_nonkur = '1' )",
                async function (err, data) {
                  if (err) console.log(err);
                  sumber = await db.query(
                    "SELECT sumber FROM no_sumber WHERE ( sbu_id = '" +
                      push.id_cabang.substring(3, 5) +
                      "' ) AND ( kur_nonkur = '1' ) AND ( tahun = " +
                      push.tahun +
                      " ) AND ( bulan = " +
                      push.bulan +
                      " ) AND ( id_perkiraan = 0 ) AND ( kode_jurnal = '5' )",
                    async function (err, data1) {
                      if (err) console.log(err);
                      unit = await db.query(
                        "SELECT top 1 unit_id FROM password_master WHERE password_master.sbu_id = '" +
                          push.id_cabang.substring(3, 5) +
                          "'",
                        async function (err, data2) {
                          if (err) console.log(err);
                          var n_transaksi = await (data[0].noreg + 1);
                          var sumber_fix;
                          var query_update_insert_n_transaksi;
                          var query_update_insert_sumber;
                          if (data[0].length == 0) {
                            n_transaksi = 0;
                            query_update_insert_n_transaksi =
                              "INSERT INTO no_transaksi(sbu_id, tahun, noreg, kur_nonkur)VALUES('" +
                              push.id_cabang.substring(3, 5) +
                              "', " +
                              dateFormat(new Date(), "yyyy") +
                              ", 1, '1')";
                          } else {
                            query_update_insert_n_transaksi =
                              "UPDATE no_transaksi SET noreg = " +
                              n_transaksi +
                              " WHERE ( sbu_id  = '" +
                              push.id_cabang.substring(3, 5) +
                              "' ) AND  ( tahun   = " +
                              dateFormat(new Date(), "yyyy") +
                              " ) AND( kur_nonkur = '1' )";
                          }
                          if (data1.length == 0) {
                            sumber_fix = 0;
                            query_update_insert_sumber =
                              "INSERT INTO dummy_saa.dbo.no_sumber(sbu_id, tahun, bulan, kode_jurnal, sumber, kur_nonkur, id_perkiraan)VALUES('" +
                              push.id_cabang.substring(3, 5) +
                              "', " +
                              dateFormat(new Date(), "yyyy") +
                              ", " +
                              dateFormat(new Date(), "mm") +
                              ", '5', 1, '1', 0)";
                          } else {
                            sumber_fix = await data1[0].sumber;
                            query_update_insert_sumber =
                              "UPDATE no_sumber SET sumber = " +
                              urutan +
                              " WHERE ( sbu_id  = '" +
                              push.id_cabang.substring(3, 5) +
                              "' ) AND ( kur_nonkur = '1' ) AND ( tahun   = " +
                              dateFormat(new Date(), "yyyy") +
                              " ) AND ( bulan   = " +
                              dateFormat(new Date(), "mm") +
                              " ) AND ( id_perkiraan = 0 ) AND ( kode_jurnal = '5' )";
                          }
                          var urutan = sumber_fix + 1;
                          console.log(urutan);
                          var unit_id = await data2[0].unit_id;
                          var transaksi_id =
                            push.id_cabang.substring(3, 5) +
                            1 +
                            dateFormat(new Date(), "yy") +
                            padWithZeroes(n_transaksi, 5);
                          var sumber =
                            "MM1." +
                            push.id_cabang.substring(3, 5) +
                            "." +
                            dateFormat(new Date(), "yyyy") +
                            "." +
                            dateFormat(new Date(), "mm") +
                            "/" +
                            padWithZeroes(urutan, 5);
                          //lanjut insert dan update SAA dan update t_jurnal_produksi_ijp
                          insert_master = await db.query(
                            "INSERT INTO transaksi_master(transaksi_id, sbu_id, tanggal, sumber, keterangan, user_id, kode_jurnal, tanggal_entri, posted, window_edit, nama_id, flag_uang_muka, transaksi_lback_id, bulan, tahun, perkiraan_id, jumlah, no_giro, s_unit, principal_id, sbu_induk, id_sbu_pusat, kur_nonkur, prod_nonprod, id_transfer)VALUES('" +
                              transaksi_id +
                              "', '" +
                              push.id_cabang.substring(3, 5) +
                              "', '" +
                              dateFormat(new Date(), "yyyy-mm-dd") +
                              "', '" +
                              sumber +
                              "', NULL, 9999, '5', '" +
                              dateFormat(new Date(), "yyyy-mm-dd") +
                              "', 0, 1, 0, 0, NULL, " +
                              dateFormat(new Date(), "mm") +
                              ", " +
                              dateFormat(new Date(), "yyyy") +
                              ", 11091, " +
                              push.nilai_ijp +
                              ", NULL, '" +
                              unit_id +
                              "', NULL, 'KP', 'KP', '1', '2', NULL)",
                            async function (err, insert_transaksi_master) {
                              if (err) console.log(err);
                              no_transaksi = await db.query(
                                query_update_insert_n_transaksi,
                                async function (err, update_no_transaksi) {
                                  if (err) console.log(err);
                                  update_sumber = await db.query(
                                    query_update_insert_sumber,
                                    async function (err, update_no_transaksi) {
                                      if (err) console.log(err);
                                      select_bisnis = await db.query(
                                        "SELECT ref_jurnal.bisnis,ref_jurnal.proses,ref_jurnal.kode_akun,perkiraan.nama_perkiraan,perkiraan.nomor_pekiraan,ref_jurnal.debet_kredit,ref_jurnal.perubahan,ref_jurnal.urut FROM ref_jurnal,perkiraan WHERE ( perkiraan.perkiraan_id = ref_jurnal.kode_akun ) and ( ref_jurnal.kode_jurnal = 5 ) AND ( ref_jurnal.bisnis = '16' ) AND ( ref_jurnal.proses = '1' ) AND ( ref_jurnal.treafac = '0' ) ORDER BY ref_jurnal.proses,ref_jurnal.urut",
                                        async function (err, data3) {
                                          if (err) console.log(err);
                                          data3.forEach(
                                            async (push_detil, i2) => {
                                              var debet;
                                              var kredit;
                                              if (
                                                push_detil.kode_akun == 11091
                                              ) {
                                                debet = push.nilai_ijp + 0 + 0;
                                                kredit = 0;
                                              } else if (
                                                push_detil.kode_akun == 11164
                                              ) {
                                                debet = 0;
                                                kredit = push.nilai_ijp;
                                              } else if (
                                                push_detil.kode_akun == 11176
                                              ) {
                                                debet = 0;
                                                kredit = 0;
                                              } else if (
                                                push_detil.kode_akun == 11109
                                              ) {
                                                debet = 0;
                                                kredit = 0;
                                              } else if (
                                                push_detil.kode_akun == 11238
                                              ) {
                                                debet = push.nilai_cadangan;
                                                kredit = 0;
                                              } else if (
                                                push_detil.kode_akun == 11231
                                              ) {
                                                debet = 0;
                                                kredit = push.nilai_cadangan;
                                              }
                                              insert_detil = await db.query(
                                                "INSERT INTO transaksi_detil(transaksi_id, line_no, sbu_id, perkiraan_id, tanggal, debet, kredit, flag_posted, dummy_1, dummy_2, keterangan, debet_fx, kredit_fx, fx_id, obyek_1, ket_obyek_1, obyek_2, nilai_kurs, bulan, tahun, nomor_perkiraan, id_sbu_pusat, sbu_induk, kur_nonkur, transaksi_pdm_asal, transaksi_pdm_baru)VALUES('" +
                                                  transaksi_id +
                                                  "', " +
                                                  push_detil.urut +
                                                  ", '" +
                                                  push.id_cabang.substring(
                                                    3,
                                                    5
                                                  ) +
                                                  "', " +
                                                  push_detil.kode_akun +
                                                  ", '" +
                                                  dateFormat(
                                                    new Date(),
                                                    "yyyy-mm-dd"
                                                  ) +
                                                  "', " +
                                                  debet +
                                                  ", " +
                                                  kredit +
                                                  ", 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, " +
                                                  dateFormat(new Date(), "mm") +
                                                  ", " +
                                                  dateFormat(
                                                    new Date(),
                                                    "yyyy"
                                                  ) +
                                                  ", NULL, 'KP', 'KP', '1', NULL, NULL)",
                                                async function (
                                                  err,
                                                  insert_transaksi_detil
                                                ) {
                                                  if (err) console.log(err);
                                                  // update_no_tgl_jurnal = await model.sequelize.query("UPDATE t_jurnal_produksi_ijp SET no_jurnal = :no_jurnal, tgl_jurnal = :tgl_jurnal, status = true where id_jurnal_produksi_ijp = :id_jurnal_produksi_ijp", {
                                                  //     replacements: {no_jurnal :sumber, tgl_jurnal: dateFormat(new Date(), "yyyymmdd" ), id_jurnal_produksi_ijp: push.id_jurnal_produksi_ijp},
                                                  //     type: model.sequelize.QueryTypes.UPDATE,
                                                  //     quoteIdentifiers: true}).then(function () {
                                                  //         if(select_saa_push.length - 1 == i)
                                                  //         {
                                                  //             console.log(transaksi_id)
                                                  //         }
                                                  //     })
                                                }
                                              );
                                            }
                                          );
                                        }
                                      );
                                    }
                                  );
                                }
                              );
                            }
                          );
                        }
                      );
                    }
                  );
                }
              );
            });
          });
        });
    });
};

exports.schedulerMandiri = async function (req, res) {
  var date_now = new Date();
  if (
    date_now.getDay() == 1 ||
    date_now.getDay() == 2 ||
    date_now.getDay() == 3
  ) {
    mandiri_11 = await model.sequelize
      .query(
        "SET TIMEZONE='Asia/Bangkok'; select id_penjaminan, (now()::date-created_date::date) as selisih, created_date from t_penjaminan where status_penjaminan_id = 11 and ((now()::date-created_date::date) > 4)",
        {
          // replacements: {id_penjaminan: id_penjaminan},
          type: model.sequelize.QueryTypes.SELECT,
          quoteIdentifiers: true,
        }
      )
      .then(async function (params) {
        var id_penjaminan_in = "";

        for (i = 0; i < params.length; i++) {
          if (i == params.length - 1) {
            id_penjaminan_in = id_penjaminan_in + params[i].id_penjaminan;
          } else {
            id_penjaminan_in = id_penjaminan_in + params[i].id_penjaminan + ",";
          }
        }
        update_madiri_11 = await model.sequelize
          .query(
            "SET TIMEZONE='Asia/Bangkok'; update t_penjaminan set status_penjaminan_id = 13, modified_date = now(), modified_by = 'admin' where id_penjaminan in(" +
              id_penjaminan_in +
              ") ",
            {
              // replacements: {id_penjaminan: id_penjaminan},
              type: model.sequelize.QueryTypes.UPDATE,
              quoteIdentifiers: true,
            }
          )
          .then(function (params2) {
            console.log("Mandiri Sukses Ubah 13 - " + date_now);
            // res.status(200).json('Mandiri Sukses Ubah 12 - '+date_now)
          });
      });
  } else if (date_now.getDay() == 4 || date_now.getDay() == 5) {
    mandiri_11 = await model.sequelize
      .query(
        "select id_penjaminan, (now()::date-created_date::date) as selisih, created_date from t_penjaminan where status_penjaminan_id = 11 and ((now()::date-created_date::date) > 2)",
        {
          // replacements: {id_penjaminan: id_penjaminan},
          type: model.sequelize.QueryTypes.SELECT,
          quoteIdentifiers: true,
        }
      )
      .then(async function (params) {
        var id_penjaminan_in = "";

        for (i = 0; i < params.length; i++) {
          if (i == params.length - 1) {
            id_penjaminan_in = id_penjaminan_in + params[i].id_penjaminan;
          } else {
            id_penjaminan_in = id_penjaminan_in + params[i].id_penjaminan + ",";
          }
        }
        update_madiri_11 = await model.sequelize
          .query(
            "update t_penjaminan set status_penjaminan_id = 13, modified_date = now(), modified_by = 'admin' where id_penjaminan in(" +
              id_penjaminan_in +
              ") ",
            {
              // replacements: {id_penjaminan: id_penjaminan},
              type: model.sequelize.QueryTypes.UPDATE,
              quoteIdentifiers: true,
            }
          )
          .then(function (params2) {
            console.log("Mandiri Sukses Ubah 13 -- " + date_now);
            // res.status(200).json('Mandiri Sukses Ubah 12 -- '+date_now)
          });
      });
  } else {
    console.log("LIBUR WEEKEND");
  }
};

exports.inquiryAkseptasi = async function (req, res) {
  var Validator = require("jsonschema").Validator;
  var v = new Validator();
  var inquiry_validation = {
    id: "/inquiry",
    type: "object",
    disableFormat: false,
    properties: {
      nomorAplikasi: { type: "string", minLength: 1, maxLength: 50 },
      noRekening: { type: "string", maxLength: 30 },
      noIdentitas: { type: "string", maxLength: 40 },
    },
    required: ["noRekening","noIdentitas"],
    additionalProperties: false,
  };
  var results = v.validate(req.body, inquiry_validation);
  if (results.errors.length > 0) {
    var json_ori = JSON.stringify(req.body).replace(/""|" "/g, "null");
    var json_fix = JSON.parse(json_ori);
    console.log(json_fix);
    var messages = [];
    for (i = 0; i < results.errors.length; i++) {
      if (results.errors[i].name === "additionalProperties") {
        messages.push({
          status: false,
          errorCode: "0102",
          errorType: "JSON Structure Error",
          errorMessage:
            "Field JSON " + results.errors[i].argument + " Not Allowed",
          trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
        });
      } else if (results.errors[i].name !== "additionalProperties") {
        if (results.errors[i].name === "type") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "Datatype of " +
              results.errors[i].property.split("instance.").join("") +
              " must be " +
              results.errors[i].argument[0],
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "required") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].argument.split("instance.").join("") +
              " is Required",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "minLength") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].property.split("instance.").join("") +
              " cannot be empty",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        } else if (results.errors[i].name === "maxLength") {
          messages.push({
            status: false,
            errorCode: "0101",
            errorType: "Mandatory Field Validation Error or Datatype Error",
            errorMessage:
              "JSON Field " +
              results.errors[i].property.split("instance.").join("") +
              " violates maximal length of string",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          });
        }
      }
    }
    res.status(400).json(messages);
  } else {
    var json_ori = JSON.stringify(req.body).replace(/null/g, '""');
    var json_fix = JSON.parse(json_ori);
    var rekeningsql;
    var noaplikasisql;
    var noktpsql;
    console.log(json_fix);
    if (!json_fix.noRekening) {
      rekeningsql = "is null or no_rekening_pinjaman like '%'";
    } else {
      rekeningsql = "= " + "'" + json_fix.noRekening + "'";
    }
    if (!json_fix.nomorAplikasi) {
      noaplikasisql = "is null or transaction_id_bank like '%'";
    } else {
      noaplikasisql = "= " + "'" + json_fix.nomorAplikasi + "'";
    }
    if (!json_fix.noIdentitas) {
      noktpsql = "is null or no_id_debitur like '%'";
    } else {
      noktpsql = "= " + "'" + json_fix.noIdentitas + "'";
    }
    penjaminan = await model.sequelize
      .query(
        "select * from t_penjaminan where (no_rekening_pinjaman " +
          rekeningsql +
          ") and (transaction_id_bank " +
          noaplikasisql +
          ") and (no_id_debitur " +
          noktpsql +
          ")",
        {
          // replacements: {id: carIds},
          type: model.sequelize.QueryTypes.SELECT,
          quoteIdentifiers: true,
        }
      )
      .then(function (penjaminan) {
        var status;
        var sertifikat;
        var penjaminan_ori = JSON.stringify(penjaminan).replace(/null/g, '""');
        var penjaminan_fix = JSON.parse(penjaminan_ori);
        if (penjaminan.length > 0) {
          if (penjaminan_fix[0].keterangan === "SUCCESS") {
            status = "Terbit";
          } else {
            status = penjaminan_fix[0].keterangan;
          }
          if (penjaminan_fix[0].no_sertifikat) {
            sertifikat =
              "http://10.100.10.30:9200/akseptasi?no_polis=" +
              penjaminan_fix[0].no_sertifikat;
          } else {
            sertifikat = penjaminan_fix[0].no_sertifikat;
          }

          res.status(200).json({
            status: true,
            message: "Request Success",
            transactionID: padWithZeroes(penjaminan_fix[0].id_penjaminan, 9),
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
            data: {
              noTransaksiBank: json_fix.nomorAplikasi,
              cabangRekanan: penjaminan_fix[0].kode_cabang_askrindo,
              statusSertifikat: status,
              noRekening: penjaminan_fix[0].no_rekening_pinjaman,
              noSertifikat: penjaminan_fix[0].no_sertifikat,
              tglSertifikat: penjaminan_fix[0].tgl_sertifikat,
              tglRekam: penjaminan_fix[0].tgl_rekam_sertifikat,
              linkSertifikat: sertifikat,
              noSp3: "",
              tglSp3: "",
              statusDebitur: "",
            },
          });
        } else {
          res.status(400).json({
            status: false,
            errorCode: "0208",
            errorType: "Data Validation",
            errorMessage: "Data Not Found",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
            data: {},
          });
        }
      });
  }
};

exports.getAkseptasi = function (req, res) {
  var agentOptions;
  var agent;
  var type;

  agentOptions = {
    host: "10.100.10.30",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };

  agent = new https.Agent(agentOptions);
  getPenjaminan(req.query.no_polis).then(function (penjaminan) {
    getKodeCabangACS(penjaminan[0].kode_cabang_askrindo).then(function (
      kode_cabang_acs
    ) {
      console.log(padWithZeroes(penjaminan[0].id_penjaminan, 9));
      if (penjaminan[0].is_cac == true) {
        type = "CAC";
      } else {
        type = "CBC";
      }
      request(
        {
          url: "http://10.100.10.30:7700/api/v1/generate-sertifikat",
          qs: {
            no_polis: req.query.no_polis,
          },
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        },
        function (error, response, body) {
          if (error) {
            console.log(error);
          } else {
            // const download = Buffer.from(body, 'base64');
            // res.setHeader('Content-disposition', 'inline; filename="akseptasi-'+req.query.no_polis+'.pdf"');
            // res.setHeader('Content-type', 'application/pdf');
            // res.end(download);
            if (
              penjaminan[0].is_update_rekening == false &&
              penjaminan[0].kode_bank == "008"
            ) {
              const download = Buffer.from(body, "base64");
              res.setHeader(
                "Content-disposition",
                'inline; filename="akseptasi-' + req.query.no_polis + '.pdf"'
              );
              res.setHeader("Content-type", "application/pdf");
              res.end(download);
            } else {
              var status_sign;
              getPenjaminan(req.query.no_polis).then(function (penjaminan) {
                if (penjaminan[0].status_cetak == 2) {
                  status_sign = "1";
                } else {
                  status_sign = "0";
                }
                console.log({
                  data: {
                    channel: "5",
                    LoB: "5",
                    CoB: "501",
                    noPolis: req.query.no_polis,
                    emailCus: "",
                    namaNasabah: penjaminan[0].nama_debitur,
                    transaksiId: padWithZeroes(penjaminan[0].id_penjaminan, 9),
                    tipeSign: "TERA",
                    kodeCabang: kode_cabang_acs,
                    idJabatan: "00001",
                    tipeAsuransi: type,
                    lowerLeftX: "489",
                    lowerLeftY: "25",
                    upperRightX: "559",
                    upperRightY: "96",
                    pageNumber: "1",
                    flagCetakUlang: status_sign,
                    fileBase64: body,
                  },
                });
                request(
                  {
                    url: "http://10.100.10.30:5000/api/epolis-system-tera",
                    agent: agent,
                    json: {
                      data: {
                        channel: "5",
                        LoB: "5",
                        CoB: "501",
                        noPolis: req.query.no_polis,
                        emailCus: "",
                        namaNasabah: penjaminan[0].nama_debitur,
                        transaksiId: padWithZeroes(
                          penjaminan[0].id_penjaminan,
                          9
                        ),
                        tipeSign: "TERA",
                        kodeCabang: kode_cabang_acs,
                        idJabatan: "00001",
                        tipeAsuransi: type,
                        lowerLeftX: "489",
                        lowerLeftY: "25",
                        upperRightX: "559",
                        upperRightY: "96",
                        pageNumber: "1",
                        flagCetakUlang: status_sign,
                        fileBase64: body,
                      },
                    },
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",

                      "x-api-key": "9684f1fe-7564-40f1-b2e3-49e8jdg2bc85",
                      // 'x-api-key': '6280kl92-0891-7f41-ax7h-94uy6c32al42'
                    },
                  },
                  function (error, response, body) {
                    if (error) {
                      console.log(error);
                    } else {
                      console.log(body);
                      if ("resultCode" in body) {
                        if (body.resultCode === "406") {
                          request(
                            {
                              url: "http://10.100.10.30:5000/api/get-base64-doc-api",
                              agent: agent,
                              json: {
                                data: {
                                  noPolis: req.query.no_polis,
                                  channel: "5",
                                  kodeCabang: kode_cabang_acs,
                                  transaksiId: padWithZeroes(
                                    penjaminan[0].id_penjaminan,
                                    9
                                  ),
                                },
                              },
                              method: "POST",
                              headers: {
                                "Content-Type": "application/json",
                                "x-api-key":
                                  "9684f1fe-7564-40f1-b2e3-49e8jdg2bc85",
                                // 'x-api-key': '6280kl92-0891-7f41-ax7h-94uy6c32al42'
                              },
                            },
                            function (error, response, body) {
                              if (error) {
                                console.log(error);
                              } else {
                                console.log(body);
                                const download = Buffer.from(
                                  body.data.fileBase64,
                                  "base64"
                                );
                                res.setHeader(
                                  "Content-disposition",
                                  'inline; filename="akseptasi-' +
                                    req.query.no_polis +
                                    '.pdf"'
                                );
                                res.setHeader(
                                  "Content-type",
                                  "application/pdf"
                                );
                                res.end(download);
                              }
                            }
                          );
                        } else {
                          // localStorage.setItem('base64pdf', body.data.fileBase64);
                          updateStatusCetak(req.query.no_polis, 1).then(
                            function (ret) {
                              const download = Buffer.from(
                                body.data.fileBase64,
                                "base64"
                              );
                              res.setHeader(
                                "Content-disposition",
                                'inline; filename="akseptasi-' +
                                  req.query.no_polis +
                                  '.pdf"'
                              );
                              res.setHeader("Content-type", "application/pdf");
                              res.end(download);
                            }
                          );
                        }
                      } else {
                        res.setHeader("Content-Type", "text/html");
                        res
                          .status(400)
                          .send(
                            "<h1>Cetak sertifikat sedang trouble, coba beberapa saat lagi!</h1>"
                          );
                      }
                    }
                  }
                );
              });
            }
          }
        }
      );
    });
  });
};

exports.updatePolisCBC = function (req, res) {
  getPenjaminanById(req.query.id_penjaminan).then(function (penjaminan) {
    if (!penjaminan[0].no_sertifikat) {
      data_bank = {
        kodeBank: penjaminan[0].kode_bank,
        kodeUker: penjaminan[0].kode_cabang_bank,
      };
      getPolis(data_bank).then(function (polis) {
        updateSertifikat(req.query.id_penjaminan, polis).then(function (
          response
        ) {
          var tahun_ke = penjaminan[0].jangka_waktu;
          var floor = new Date(penjaminan[0].tgl_awal_pertanggungan);
          var floor_plus = new Date(
            dateFormat(
              new Date(
                +floor.getFullYear() + 1,
                floor.getMonth(),
                floor.getDate()
              ),
              "yyyy-mm-dd"
            )
          );
          var ceil = new Date(penjaminan[0].tgl_akhir_pertanggungan);
          var diff_floor_inst = new DateDiff(floor_plus, floor);
          var max_pert_inst = new DateDiff(ceil, floor);
          var jangka_waktu_hari = max_pert_inst.days();
          var diff_floor = diff_floor_inst.days();
          var max_pert = max_pert_inst.days();
          var premi = [];
          var cadangan = [];
          var jml_hari = [];
          var jml_hari_tahunan = [];
          var stop = true;
          var jatuh_tempo = dateFormat(new Date(), "dd");
          if (jatuh_tempo >= 15) {
            if (padWithZeroes(+dateFormat(new Date(), "mm") + 1, 2) > 12) {
              jatuh_tempo =
                +dateFormat(new Date(), "yyyy") +
                1 +
                padWithZeroes(+dateFormat(new Date(), "mm") + 1 - 12, 2) +
                "15";
            } else {
              jatuh_tempo =
                dateFormat(new Date(), "yyyy") +
                padWithZeroes(+dateFormat(new Date(), "mm") + 1, 2) +
                "15";
            }
          } else {
            jatuh_tempo = dateFormat(new Date(), "yyyymm") + "15";
          }

          var n = 1;
          while (stop) {
            if (max_pert > diff_floor) {

              max_pert = max_pert - diff_floor;   
              floor = new Date(dateFormat(new Date(+(floor_plus.getFullYear()), (floor_plus.getMonth()), floor_plus.getDate()), "yyyy-mm-dd" ));
              console.log(floor);
              floor_plus = new Date(dateFormat(new Date(+(floor.getFullYear())+1, (floor.getMonth()), floor.getDate()), "yyyy-mm-dd" ));             
              diff_floor_inst = new DateDiff(floor_plus, floor);
              diff_floor = diff_floor_inst.days();
              ijp = 0.0456 * penjaminan[0].plafond_kredit * 1;
              cadangan_calc = 0.008 * penjaminan[0].plafond_kredit * 1;
              premi.push(Math.round(ijp));
              cadangan.push(Math.round(cadangan_calc));
              n = n + 1;
            } else {
              ijp =
                0.0456 * penjaminan[0].plafond_kredit * (max_pert / diff_floor);
              cadangan_calc =
                0.008 * penjaminan[0].plafond_kredit * (max_pert / diff_floor);
              premi.push(Math.round(ijp));
              cadangan.push(Math.round(cadangan_calc));
              stop = false;
            }
            // if(tahun_ke > 12)
            // {
            //     tahun_ke = tahun_ke - 12
            //     ijp = 0.0456 * penjaminan[0].plafon_disetujui * 1
            //     cadangan_calc = 0.008 * penjaminan[0].plafon_disetujui * 1
            //     premi.push(ijp)
            //     cadangan.push(cadangan_calc)
            // }
            // else
            // {
            //     ijp = 0.0456 * penjaminan[0].plafon_disetujui * (tahun_ke/12)
            //     cadangan_calc = 0.008 * penjaminan[0].plafon_disetujui * (tahun_ke/12)
            //     premi.push(ijp)
            //     cadangan.push(cadangan_calc)
            //     stop = false
            // }
          }
          updateTotalIjp(
            premi.reduce((a, b) => a + b, 0),
            jangka_waktu_hari,
            req.query.id_penjaminan
          )
            .then(function (params) {
              premi.forEach((val, i) => {
                setTimeout(function () {
                  console.log("ijp 1");
                  insertIjp(
                    req.query.id_penjaminan,
                    i + 1,
                    val,
                    cadangan[i],
                    jatuh_tempo
                  );
                }, i * 2000);
              });
            })
            .then(async function (params) {
              var pertanggungan =
                Math.round(bod.plafonKredit * 0.7 * 100) / 100;
              update_pertanggungan = await model.sequelize.query(
                "UPDATE t_penjaminan SET nilai_pertanggungan = :nilai_pertanggungan, plafond_kredit = :plafond_kredit WHERE id_penjaminan = :id_penjaminan",
                {
                  replacements: {
                    id_penjaminan: req.query.id_penjaminan,
                    nilai_pertanggungan: pertanggungan,
                    plafond_kredit: penjaminan[0].plafon_disetujui,
                  },
                  type: model.sequelize.QueryTypes.SELECT,
                  quoteIdentifiers: true,
                }
              );
            })
            .then(function (params) {
              res.status(200).json({
                status: true,
                message: "Request Success",
                transactionID: padWithZeroes(req.query.id_penjaminan, 9),
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                data: {
                  statusSertifikat: "Terbit",
                  noRekening: penjaminan[0].no_rekening_pinjaman,
                  noTransaksiBank: penjaminan[0].transaction_id_bank,
                  noSertifikat: polis,
                  tglSertifikat: dateFormat(new Date(), "yyyymmdd"),
                  tglRekam: dateFormat(new Date(), "yyyymmdd"),
                  linkSertifikat:
                    "http://10.100.10.30:9200/akseptasi?no_polis=" + polis,
                  cabangRekanan: penjaminan[0].kode_cabang_askrindo,
                },
              });
            })
            .then(async function () {
              calon = await postSIKPPerEntry(
                penjaminan[0].transaction_id_bank,
                0
              ).then(async function (return1) {
                if (return1 == "POST SIKP CALON GAGAL!") {
                  var ok = await return1;
                  console.log(ok);
                } else {
                  var ok = await return1;
                  console.log(ok);
                }
              });
            })
            .then(async function () {
              akad = await postSIKPPerEntry(
                penjaminan[0].transaction_id_bank,
                1
              ).then(async function (return2) {
                if (return2 == "POST SIKP AKAD GAGAL!") {
                  var ok = await return2;
                  console.log(ok);
                } else {
                  var ok = await return2;
                  console.log(ok);
                }
              });
            })
            .then(async function () {
              tagihan = await postSIKPPerEntry(
                penjaminan[0].transaction_id_bank,
                2
              ).then(async function (return3) {
                if (return3 == "POST SIKP TAGIHAN GAGAL!") {
                  var ok = await return3;
                  console.log(ok);
                } else {
                  var ok = await return3;
                  console.log(ok);
                }
              });
            });
        });
      });
    } else {
      res.status(400).json({
        status: false,
        errorMessage: "Gagal terbit polis, polis sudah pernah terbit!",
        trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
        data: {},
      });
    }
  });
};

getAllPatchIJP = async function () {
  var ret;
  kode_bank = await model.sequelize
    .query(
      "select * from t_penjaminan_back27082020 tp where tp.id_penjaminan in (582,592,793,299,431,606,615,617,601,149,546,389,399,806,805,190,225,125,529,548,680,758,789,72,58,93,141,70,90,102,82,73,105,108,123,177,97,115,119,126,128,133,266,153,150,156,194,152,139,213,148,170,382,166,155,329,157,161,171,543,178,182,187,192,704,179,201,707,193,191,212,221,335,207,205,206,210,226,227,688,220,239,254,236,256,253,259,277,262,278,255,264,279,319,297,305,310,313,315,312,304,249,331,326,325,317,345,334,288,306,318,579,677,354,353,357,360,371,377,89,368,375,391,385,392,376,388,390,393,383,418,405,407,412,92,403,398,419,422,429,417,423,94,413,416,435,441,450,456,443,451,464,465,462,460,140,473,478,487,472,490,232,238,499,276,488,200,495,517,509,504,503,527,519,528,530,534,523,521,293,547,549,538,308,558,559,560,563,556,551,557,552,587,314,363,566,575,586,595,581,367,378,583,614,410,609,596,600,618,622,434,427,468,637,646,638,439,631,656,658,653,467,674,670,477,664,665,668,663,695,683,512,652,513,625,682,687,497,702,703,706,696,697,698,700,716,718,720,712,723,518,553,562,573,739,740,567,729,731,752,599,743,754,588,746,766,767,761,759,623,772,780,781,775,783,634,751,786,790,791,635,792,620,645,686,669,692,713,724,736,753,762,585,111,117,132,185,328,352,366,397,415,458,522,568,491,591,597,644,628,693,756,481,164,511,218,471,340,337,344,343,526,610,215,248,621,694,414,764,624,137,339,338,485,544,630,676,286,234,500,74,301,594,387,647,657,691,717,727,749,785,231,91,797,223,229,235,237,240,241,311,198,211,361,444,459,466,480,494,496,514,565,347,649,714,715,774,788,629,228,294,373,798,64,204,324,738,230,380,396)",
      {
        // replacements: {id: carIds},
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (kode_bank) {
      if (kode_bank.length == 0) {
        ret = "kosong";
        console.log(ret);
      } else {
        ret = kode_bank;
      }
    });
  return ret;
};

putAkadCovFlag = function (bod, no_sertifikat) {
  var agent;
  agentOptions = {
    host: "202.61.126.162",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };
  return new Promise((resolve) => {
    agent = new https.Agent(agentOptions);

    request(
      {
        url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
        // agent: agent,
        json: {
          username: "askrindo",
          password: "bzMjN9Wc8DeATBKh",
          // "password" :"development"
        },
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      },
      async function (errorfix, responsefix, bodyfix) {
        if (errorfix) {
          console.log(errorfix);
          resolve("ERROR");
        } else {
          console.log(bodyfix);
          if (responsefix.statusCode != 200) {
            resolve("ERROR");
          } else {
            console.log(JSON.stringify(
              {
                rekening_baru: bod.noRekening.replace(/[^0-9a-z_]/gi, ""),
                kode_bank: bod.kodeBank,
                nik: bod.noIdentitas,
                rekening_lama: bod.noRekLama,
                status_akad: "B",
                status_rekening: 1,
                nomor_akad: bod.noPk,
                tgl_akad: new Date(
                  bod.tglPK.substring(0, 4) +
                    "-" +
                    bod.tglPK.substring(4, 6) +
                    "-" +
                    bod.tglPK.substring(6, 8)
                ),
                tgl_penarikan: new Date(
                  bod.tanggalAwal.substring(0, 4) +
                    "-" +
                    bod.tanggalAwal.substring(4, 6) +
                    "-" +
                    bod.tanggalAwal.substring(6, 8)
                ),
                tgl_jatuh_tempo: new Date(
                  bod.tanggalAkhir.substring(0, 4) +
                    "-" +
                    bod.tanggalAkhir.substring(4, 6) +
                    "-" +
                    bod.tanggalAkhir.substring(6, 8)
                ),
                nilai_akad: bod.plafonKredit,
                tgl_penjaminan: new Date(new Date().setHours(7, 0, 0, 0)),
                nomor_penjaminan: no_sertifikat,
                nilai_dijamin: Math.round(bod.plafonKredit * 0.7 * 100) / 100,
                sektor: bod.kodeSektor,
              }
            ))
            request(
              {
                url:
                  "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/" +
                  bod.kodeBank +
                  "/" +
                  bod.noRekening.replace(/[^0-9a-z_]/gi, ""),
                // agent: agent,
                method: "PUT",
                json: {
                  rekening_baru: bod.noRekening.replace(/[^0-9a-z_]/gi, ""),
                  kode_bank: bod.kodeBank,
                  nik: bod.noIdentitas,
                  rekening_lama: bod.noRekLama,
                  status_akad: "B",
                  status_rekening: 1,
                  nomor_akad: bod.noPk,
                  tgl_akad: new Date(
                    bod.tglPK.substring(0, 4) +
                      "-" +
                      bod.tglPK.substring(4, 6) +
                      "-" +
                      bod.tglPK.substring(6, 8)
                  ),
                  tgl_penarikan: new Date(
                    bod.tanggalAwal.substring(0, 4) +
                      "-" +
                      bod.tanggalAwal.substring(4, 6) +
                      "-" +
                      bod.tanggalAwal.substring(6, 8)
                  ),
                  tgl_jatuh_tempo: new Date(
                    bod.tanggalAkhir.substring(0, 4) +
                      "-" +
                      bod.tanggalAkhir.substring(4, 6) +
                      "-" +
                      bod.tanggalAkhir.substring(6, 8)
                  ),
                  nilai_akad: bod.plafonKredit,
                  tgl_penjaminan: new Date(new Date().setHours(7, 0, 0, 0)),
                  nomor_penjaminan: no_sertifikat,
                  nilai_dijamin: Math.round(bod.plafonKredit * 0.7 * 100) / 100,
                  sektor: bod.kodeSektor,
                },
                headers: {
                  "Content-Type": "application/json",
                  Authorization: "Bearer " + bodyfix.data,
                },
              },
              function (error3re, response3re, body3re) {
                console.log("put akad response");
                console.log(JSON.stringify(body3re));
                if (error3re) {
                  resolve("ERROR");
                } else {
                  if (response3re.statusCode != 200) {
                    resolve("ERROR");
                  } else {
                    if (body3re.code == "45") {
                      request(
                        {
                          url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                          // agent: agent,
                          json: {
                            nomor_tagihan:
                              bod.tgl_sertifikat.substring(
                                0,
                                7
                              ),
                            nomor_rekening:
                              bod.no_rekening_pinjaman.replace(
                                /[^0-9a-z_]/gi,
                                ""
                              ),
                            kode_bank:
                              bod.kode_bank,
                            outstanding:
                              bod.plafond_kredit,
                            tahun: dateFormat(
                              new Date(),
                              "yyyy"
                            ),
                            nilai_ijp: bod.premi,
                            periode: bod.tahun_ke,
                          },
                          method: "POST",
                          headers: {
                            "Content-Type":
                              "application/json",
                            Authorization:
                              "Bearer " +
                              body.data,
                          },
                        },
                        function (
                          error7re,
                          response7re,
                          body7re
                        ) {
                          if (error7re) {
                            console.log(error7re);
                          } else {
                            if (
                              response7re.statusCode !=
                              200
                            ) {
                              resolve("ERROR");
                            } else {
                              if (
                                body7re.code ===
                                "00"
                              ) {
                                resolve("ok");
                              } else {
                                insertLogSIKPCovFlag(
                                  bod.id_penjaminan,
                                  bod.no_rekening_pinjaman,
                                  bod.transaction_id_bank,
                                  bod.tgl_premi,
                                  bod.no_sertifikat,
                                  bod.no_id_debitur,
                                  0,
                                  body7re.message
                                ).then(function (
                                  params
                                ) {
                                  resolve(
                                    body7re
                                  );
                                });
                              }
                            }
                          }
                        }
                      );
                    } else {
                      resolve(body3re);
                    }
                  }
                }
              }
            );
          }
        }
      }
    );
  });
};

putAkadCovFlagBatch = function (bod) {
  var agent;
  agentOptions = {
    host: "202.61.126.162",
    port: "443",
    path: "/",
    rejectUnauthorized: false,
  };
  return new Promise((resolve) => {
    agent = new https.Agent(agentOptions);

    request(
      {
        url: "http://10.238.136.117/pen-umkm/api/v1/Auth",
        // agent: agent,
        json: {
          username: "askrindo",
          password: "bzMjN9Wc8DeATBKh",
          // "password" :"development"
        },
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      },
      async function (errorfix, responsefix, bodyfix) {
        if (errorfix) {
          console.log(errorfix);
          resolve("ERROR");
        } else {
          console.log(bodyfix);
          if (responsefix.statusCode != 200) {
            resolve("ERROR");
          } else {
            request(
              {
                url:
                  "http://10.238.136.117/pen-umkm-dev/api/v1/Debitur" +
                  bod.no_id_debitur,
                method: "GET",
                headers: {
                  "Content-Type": "application/json",
                  Authorization: "Bearer " + bodyfix.data,
                },
              },
              function (error3re, response3re, body3re) {
                if (error3re) {
                  console.log(error3re);
                  resolve("ERROR");
                } else {
                  if (response3re.statusCode != 200) {
                    resolve("ERROR");
                  } else {
                    if (body3re.code == "47") {
                      request(
                        {
                          url:
                            "http://10.238.136.117/pen-umkm-dev/api/v1/Calon" +
                            bod.no_id_debitur,
                          // agent: agent,
                          method: "GET",

                          headers: {
                            "Content-Type": "application/json",
                            Authorization: "Bearer " + bodyfix.data,
                          },
                        },
                        function (error4re, response4re, body4re) {
                          if (error4re) {
                            console.log(error4re);
                            resolve("ERROR");
                          } else {
                            if (response4re.statusCode != 200) {
                              resolve("ERROR");
                            } else {
                              if (body4re.code == "07") {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm-dev/api/v1/Calon/",
                                    // agent: agent,
                                    method: "POST",
                                    json: {
                                      nik: bod.no_id_debitur,
                                      nama: bod.nama_debitur,
                                      tgl_lahir: new Date(bod.tanggal_lahir),
                                      jns_kelamin: bod.jenis_kelamin,
                                      maritas_sts: bod.marital_status,
                                      pendidikan: bod.pendidikan,
                                      pekerjaan: bod.jenis_pekerjaan,
                                      jns_debitur: "R",
                                      alamat: bod.alamat_debitur,
                                      kode_kabkota: substring_ktp,
                                      kode_pos: bod.kode_pos,
                                      npwp: bod.npwp,
                                      mulai_usaha: new Date(
                                        bod.tgl_mulai_usaha
                                      ),
                                      alamat_usaha: bod.alamat_debitur,
                                      ijin_usaha: bod.no_ijin_usaha,
                                      modal_usaha: bod.modal_usaha,
                                      jml_pekerja: 1,
                                      jml_kredit: bod.plafond_kredit,
                                      no_hp: bod.no_hp_debitur,
                                      uraian_agunan: null,
                                    },
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization: "Bearer " + bodyfix.data,
                                    },
                                  },
                                  function (error5re, response5re, body5re) {
                                    if (error5re) {
                                      console.log(error5re);
                                      resolve("ERROR");
                                    } else {
                                      if (response5re.statusCode != 200) {
                                        resolve("ERROR");
                                      } else {
                                        if (body5re.code == "00") {
                                          request(
                                            {
                                              url: "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/",
                                              // agent: agent,
                                              method: "POST",
                                              json: {
                                                rekening_baru:
                                                  bod.no_rekening_pinjaman.replace(
                                                    /[^0-9a-z_]/gi,
                                                    ""
                                                  ),
                                                kode_bank: bod.kode_bank,
                                                nik: bod.no_id_debitur,
                                                rekening_lama: bod.no_rek_lama,
                                                status_akad: "B",
                                                status_rekening: 1,
                                                nomor_akad:
                                                  bod.no_perjanjian_kredit,
                                                tgl_akad: new Date(bod.tgl_pk),
                                                tgl_penarikan: new Date(
                                                  bod.tgl_awal_pertanggungan
                                                ),
                                                tgl_jatuh_tempo: new Date(
                                                  bod.tgl_akhir_pertanggungan
                                                ),
                                                nilai_akad: bod.plafond_kredit,
                                                tgl_penjaminan: new Date(
                                                  new Date().setHours(
                                                    7,
                                                    0,
                                                    0,
                                                    0
                                                  )
                                                ),
                                                nomor_penjaminan:
                                                  bod.no_sertifikat,
                                                nilai_dijamin:
                                                  Math.round(
                                                    bod.plafonKredit * 0.7 * 100
                                                  ) / 100,
                                                sektor: bod.sektor_ekonomi,
                                              },
                                              headers: {
                                                "Content-Type":
                                                  "application/json",
                                                Authorization:
                                                  "Bearer " + bodyfix.data,
                                              },
                                            },
                                            function (
                                              error6re,
                                              response6re,
                                              body6re
                                            ) {
                                              if (error6re) {
                                                console.log(error6re);
                                                resolve("ERROR");
                                              } else {
                                                if (
                                                  response6re.statusCode != 200
                                                ) {
                                                  resolve("ERROR");
                                                } else {
                                                  if (body6re.code == "00") {
                                                    request(
                                                      {
                                                        url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                                                        // agent: agent,
                                                        json: {
                                                          nomor_tagihan:
                                                            bod.tgl_sertifikat.substring(
                                                              0,
                                                              7
                                                            ),
                                                          nomor_rekening:
                                                            bod.no_rekening_pinjaman.replace(
                                                              /[^0-9a-z_]/gi,
                                                              ""
                                                            ),
                                                          kode_bank:
                                                            bod.kode_bank,
                                                          outstanding:
                                                            bod.plafond_kredit,
                                                          tahun: dateFormat(
                                                            new Date(),
                                                            "yyyy"
                                                          ),
                                                          nilai_ijp: bod.premi,
                                                          periode: bod.tahun_ke,
                                                        },
                                                        method: "POST",
                                                        headers: {
                                                          "Content-Type":
                                                            "application/json",
                                                          Authorization:
                                                            "Bearer " +
                                                            body.data,
                                                        },
                                                      },
                                                      function (
                                                        error7re,
                                                        response7re,
                                                        body7re
                                                      ) {
                                                        if (error7re) {
                                                          console.log(error7re);
                                                        } else {
                                                          if (
                                                            response7re.statusCode !=
                                                            200
                                                          ) {
                                                            resolve("ERROR");
                                                          } else {
                                                            if (
                                                              body7re.code ===
                                                              "00"
                                                            ) {
                                                              resolve("ok");
                                                            } else {
                                                              insertLogSIKPCovFlag(
                                                                bod.id_penjaminan,
                                                                bod.no_rekening_pinjaman,
                                                                bod.transaction_id_bank,
                                                                bod.tgl_premi,
                                                                bod.no_sertifikat,
                                                                bod.no_id_debitur,
                                                                0,
                                                                body7re.message
                                                              ).then(function (
                                                                params
                                                              ) {
                                                                resolve(
                                                                  body7re
                                                                );
                                                              });
                                                            }
                                                          }
                                                        }
                                                      }
                                                    );
                                                  } else {
                                                    insertLogSIKPCovFlag(
                                                      bod.id_penjaminan,
                                                      bod.no_rekening_pinjaman,
                                                      bod.transaction_id_bank,
                                                      bod.tgl_premi,
                                                      bod.no_sertifikat,
                                                      bod.no_id_debitur,
                                                      0,
                                                      body6re.message
                                                    ).then(function (params) {
                                                      resolve(body6re);
                                                    });
                                                  }
                                                }
                                              }
                                            }
                                          );
                                        } else {
                                          insertLogSIKPCovFlag(
                                            bod.id_penjaminan,
                                            bod.no_rekening_pinjaman,
                                            bod.transaction_id_bank,
                                            bod.tgl_premi,
                                            bod.no_sertifikat,
                                            bod.no_id_debitur,
                                            0,
                                            body5re.message
                                          ).then(function (params) {
                                            resolve(body5re);
                                          });
                                        }
                                      }
                                    }
                                  }
                                );
                              } else {
                                insertLogSIKPCovFlag(
                                  bod.id_penjaminan,
                                  bod.no_rekening_pinjaman,
                                  bod.transaction_id_bank,
                                  bod.tgl_premi,
                                  bod.no_sertifikat,
                                  bod.no_id_debitur,
                                  0,
                                  body4re.message
                                ).then(function (params) {
                                  resolve(body4re);
                                });
                              }
                            }
                          }
                        }
                      );
                    } else {
                      request(
                        {
                          url:
                            "http://10.238.136.117/pen-umkm-dev/api/v1/Akad/" +
                            bod.kode_bank +
                            "/" +
                            bod.no_rekening_pinjaman.replace(
                              /[^0-9a-z_]/gi,
                              ""
                            ),
                          // agent: agent,
                          method: "PUT",
                          json: {
                            rekening_baru: bod.no_rekening_pinjaman.replace(
                              /[^0-9a-z_]/gi,
                              ""
                            ),
                            kode_bank: bod.kode_bank,
                            nik: bod.no_id_debitur,
                            rekening_lama: bod.no_rek_lama,
                            status_akad: "B",
                            status_rekening: 1,
                            nomor_akad: bod.no_perjanjian_kredit,
                            tgl_akad: new Date(bod.tgl_pk),
                            tgl_penarikan: new Date(bod.tgl_awal_pertanggungan),
                            tgl_jatuh_tempo: new Date(
                              bod.tgl_akhir_pertanggungan
                            ),
                            nilai_akad: bod.plafond_kredit,
                            tgl_penjaminan: new Date(
                              new Date().setHours(7, 0, 0, 0)
                            ),
                            nomor_penjaminan: bod.no_sertifikat,
                            nilai_dijamin:
                              Math.round(bod.plafonKredit * 0.7 * 100) / 100,
                            sektor: bod.sektor_ekonomi,
                          },
                          headers: {
                            "Content-Type": "application/json",
                            Authorization: "Bearer " + bodyfix.data,
                          },
                        },
                        function (error8re, response8re, body8re) {
                          if (error8re) {
                            console.log(error8re);
                            resolve("ERROR");
                          } else {
                            if (response8re.statusCode != 200) {
                              resolve("ERROR");
                            } else {
                              if (body8re.code == "45") {
                                request(
                                  {
                                    url: "http://10.238.136.117/pen-umkm-dev/api/v1/Tagihan",
                                    // agent: agent,
                                    json: {
                                      nomor_tagihan:
                                        bod.tgl_sertifikat.substring(0, 7),
                                      nomor_rekening:
                                        bod.no_rekening_pinjaman.replace(
                                          /[^0-9a-z_]/gi,
                                          ""
                                        ),
                                      kode_bank: bod.kode_bank,
                                      outstanding: bod.plafond_kredit,
                                      tahun: dateFormat(new Date(), "yyyy"),
                                      nilai_ijp: bod.premi,
                                      periode: bod.tahun_ke,
                                    },
                                    method: "POST",
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization: "Bearer " + body.data,
                                    },
                                  },
                                  function (error9re, response9re, body9re) {
                                    if (error9re) {
                                      console.log(error9re);
                                    } else {
                                      if (response9re.statusCode != 200) {
                                        resolve("ERROR");
                                      } else {
                                        if (body9re.code === "00") {
                                          resolve("ok");
                                        } else {
                                          insertLogSIKPCovFlag(
                                            bod.id_penjaminan,
                                            bod.no_rekening_pinjaman,
                                            bod.transaction_id_bank,
                                            bod.tgl_premi,
                                            bod.no_sertifikat,
                                            bod.no_id_debitur,
                                            0,
                                            body9re.message
                                          ).then(function (params) {
                                            resolve(body9re);
                                          });
                                        }
                                      }
                                    }
                                  }
                                );
                              } else {
                                resolve(body9re);
                              }
                            }
                          }
                        }
                      );
                    }
                  }
                }
              }
            );
          }
        }
      }
    );
  });
};

insertLogSIKPCovFlag = async function (
  id_penjaminan,
  no_rekening,
  no_aplikasi,
  tgl_premi,
  no_sertifikat,
  id_debitur,
  status,
  keterangan
) {
  var ret;
  if (!tgl_premi && !no_sertifikat) {
    tgl_premi = new Date();
    no_sertifikat = "CBC id_penjaminan " + id_penjaminan;
  }
  check = await model.sequelize
    .query(
      "select * from log_cov_flag where id_penjaminan = :id_penjaminan and is_active = true",
      {
        replacements: { id_penjaminan: id_penjaminan },
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(async function (check) {
      if (check.length === 0) {
        insert_log = await model.sequelize
          .query(
            "INSERT INTO log_cov_flag(no_rekening, no_aplikasi, no_sertifikat, id_penjaminan, id_debitur, tgl_premi, status, keterangan, is_active)VALUES(:no_rekening, :no_aplikasi, :no_sertifikat, :id_penjaminan, :id_debitur, :tgl_premi, :status, :keterangan, true);",
            {
              replacements: {
                id_penjaminan: id_penjaminan,
                no_aplikasi: no_aplikasi,
                no_rekening: no_rekening,
                no_sertifikat: no_sertifikat,
                id_debitur: id_debitur,
                status: status,
                keterangan: keterangan,
                tgl_premi: tgl_premi,
              },
              type: model.sequelize.QueryTypes.INSERT,
              quoteIdentifiers: true,
            }
          )
          .then(function (insert_log) {
            ret = "OK";
          });
      } else {
        update_log = await model.sequelize
          .query(
            "update log_cov_flag set is_active = false where id_penjaminan = :id_penjaminan",
            {
              replacements: {
                id_penjaminan: id_penjaminan,
                no_aplikasi: no_aplikasi,
                no_rekening: no_rekening,
                no_sertifikat: no_sertifikat,
                id_debitur: id_debitur,
                status: status,
                keterangan: keterangan,
                tgl_premi: tgl_premi,
              },
              type: model.sequelize.QueryTypes.UPDATE,
              quoteIdentifiers: true,
            }
          )
          .then(async function (update_log) {
            insert_log = await model.sequelize
              .query(
                "INSERT INTO log_cov_flag(no_rekening, no_aplikasi, no_sertifikat, id_penjaminan, id_debitur, tgl_premi, status, keterangan, is_active)VALUES(:no_rekening, :no_aplikasi, :no_sertifikat, :id_penjaminan, :id_debitur, :tgl_premi, :status, :keterangan, true);",
                {
                  replacements: {
                    id_penjaminan: id_penjaminan,
                    no_aplikasi: no_aplikasi,
                    no_rekening: no_rekening,
                    no_sertifikat: no_sertifikat,
                    id_debitur: id_debitur,
                    status: status,
                    keterangan: keterangan,
                    tgl_premi: tgl_premi,
                  },
                  type: model.sequelize.QueryTypes.INSERT,
                  quoteIdentifiers: true,
                }
              )
              .then(function (insert_log) {
                ret = "OK";
              });
          });
      }
    });

  return ret;
};

exports.patchIJP = function (req, res) {
  getAllPatchIJP().then(function (penjaminan) {
    if (penjaminan) {
      penjaminan.forEach((val, i) => {
        setTimeout(function () {
          var tahun_ke = val.jangka_waktu;
          var floor = new Date(val.tgl_awal_pertanggungan);
          var floor_plus = new Date(
            dateFormat(
              new Date(
                +floor.getFullYear() + 1,
                floor.getMonth(),
                floor.getDate()
              ),
              "yyyy-mm-dd"
            )
          );
          var ceil = new Date(val.tgl_akhir_pertanggungan);
          var diff_floor_inst = new DateDiff(floor_plus, floor);
          var max_pert_inst = new DateDiff(ceil, floor);
          var jangka_waktu_hari = max_pert_inst.days();
          var diff_floor = diff_floor_inst.days();
          var max_pert = max_pert_inst.days();
          var premi = [];
          var cadangan = [];
          var jml_hari = [];
          var jml_hari_tahunan = [];
          var stop = true;
          var jatuh_tempo = val.tgl_sertifikat.substring(8, 10);
          if (jatuh_tempo >= 15) {
            if (+val.tgl_sertifikat.substring(5, 7) + 1 > 12) {
              jatuh_tempo =
                +val.tgl_sertifikat.substring(0, 4) +
                1 +
                padWithZeroes(+val.tgl_sertifikat.substring(5, 7) + 1 - 12, 2) +
                "15";
            } else {
              jatuh_tempo =
                val.tgl_sertifikat.substring(0, 4) +
                padWithZeroes(+val.tgl_sertifikat.substring(5, 7) + 1, 2) +
                "15";
            }
          } else {
            jatuh_tempo =
              val.tgl_sertifikat.substring(0, 4) +
              padWithZeroes(val.tgl_sertifikat.substring(5, 7), 2) +
              "15";
          }
          console.log(val.tgl_sertifikat);
          while (stop) {
            if (max_pert > diff_floor) {
              max_pert = max_pert - diff_floor;
              floor = new Date(dateFormat(new Date(+(floor_plus.getFullYear()), (floor_plus.getMonth()), floor_plus.getDate()), "yyyy-mm-dd" ));
              console.log(floor);
              floor_plus = new Date(dateFormat(new Date(+(floor.getFullYear())+1, (floor.getMonth()), floor.getDate()), "yyyy-mm-dd" ));             
              
              diff_floor_inst = new DateDiff(floor_plus, floor);
              diff_floor = diff_floor_inst.days();
              ijp = 0.0456 * val.plafond_kredit * 1;
              cadangan_calc = 0.01 * val.plafond_kredit * 1;
              premi.push(Math.round(ijp));
              cadangan.push(Math.round(cadangan_calc));
            } else {
              
              ijp = 0.0456 * val.plafond_kredit * (max_pert / diff_floor);
              cadangan_calc =
                0.01 * val.plafond_kredit * (max_pert / diff_floor);
              premi.push(Math.round(ijp));
              cadangan.push(Math.round(cadangan_calc));
              stop = false;
            }
            // if(tahun_ke > 12)
            // {
            //     tahun_ke = tahun_ke - 12
            //     ijp = 0.0456 * val.plafon_disetujui * 1
            //     cadangan_calc = 0.008 * val.plafon_disetujui * 1
            //     premi.push(ijp)
            //     cadangan.push(cadangan_calc)
            // }
            // else
            // {
            //     ijp = 0.0456 * val.plafon_disetujui * (tahun_ke/12)
            //     cadangan_calc = 0.008 * val.plafon_disetujui * (tahun_ke/12)
            //     premi.push(ijp)
            //     cadangan.push(cadangan_calc)
            //     stop = false
            // }
          }
          updateTotalIjpPatch(
            premi.reduce((a, b) => a + b, 0),
            jangka_waktu_hari,
            val.id_penjaminan
          ).then(function (params) {
            premi.forEach((val1, ii) => {
              setTimeout(function () {
                insertIjpPatch(
                  val.id_penjaminan,
                  ii + 1,
                  val1,
                  cadangan[ii],
                  val.tgl_sertifikat,
                  jatuh_tempo
                );
              }, i * 1000);
            });
          });
        }, i * 2000);
      });
    } else {
      res.status(400).json({
        status: false,
        errorMessage: "polis sudah pernah terbit!",
        trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
        data: {},
      });
    }
  });
};

exports.postAkseptasiCoveringValidation = function (req, res) {
  var Validator = require("jsonschema").Validator;
  var v = new Validator();
  var akseptasi_validation;

  bod = req.body;
  var tglpklama;
  if (bod.tglPkLama === "") {
    tglpklama = 0;
  } else {
    tglpklama = 8;
  }
  var akseptasi_validation;
  var npwp_custom;
  var ket_validasi_ejamku;
  var validasi_ejamku;
  var jenis_covering;

  var floor = new Date(
    dateFormat(
      new Date(
        bod.tanggalAwal.substring(0, 4),
        bod.tanggalAwal.substring(4, 6) - 1,
        bod.tanggalAwal.substring(6, 8)
      ),
      "yyyy-mm-dd"
    )
  );
  var floor_plus = new Date(
    dateFormat(
      new Date(
        +bod.tanggalAwal.substring(0, 4) + 1,
        bod.tanggalAwal.substring(4, 6) - 1,
        bod.tanggalAwal.substring(6, 8)
      ),
      "yyyy-mm-dd"
    )
  );
  var ceil = new Date(
    dateFormat(
      new Date(
        bod.tanggalAkhir.substring(0, 4),
        bod.tanggalAkhir.substring(4, 6) - 1,
        bod.tanggalAkhir.substring(6, 8)
      ),
      "yyyy-mm-dd"
    )
  );
  var diff_floor_inst = new DateDiff(floor_plus, floor);
  var max_pert_inst = new DateDiff(ceil, floor);
  var jangka_waktu_hari = max_pert_inst.days();
  var diff_floor = diff_floor_inst.days();
  var max_pert = max_pert_inst.days();

  console.log(floor);
  console.log(floor_plus);
  console.log(ceil);
  console.log(jangka_waktu_hari);
  console.log(diff_floor);
  console.log(max_pert);
  
  //process.exit();

  if (bod.plafonKredit <= 1000000000) {
    jenis_covering = "CAC";
    npwp_custom = { type: "string", maxLength: 40 };
  } else {
    jenis_covering = "CBC";
    npwp_custom = { type: "string", minLength: 1, maxLength: 40 };
  }

  if (bod.jenisKelamin == 9 && bod.noIdentitas.length <= 15){
    bod.noIdentitas = bod.npwp + "0";
  }

  console.log("covval npwp + 0");
  console.log(bod.noIdentitas);

  var akseptasi_validation = {
    id: "/akseptasi",
    type: "object",
    disableFormat: false,
    minProperties: 1,
    properties: {
      kodeBank: { type: "string", minLength: 1, maxLength: 8 },
      nomorAplikasi: { type: "string", minLength: 1, maxLength: 50 },
      kodeUker: { type: "string", minLength: 1, maxLength: 8 },
      namaUker: { type: "string", maxLength: 255 },
      noRekening: { type: "string", minLength: 1, maxLength: 30 },
      noRekLama: { type: "string", maxLength: 30 },
      cif: { type: "string", maxLength: 50 },
      noPk: { type: "string", minLength: 1, maxLength: 50 },
      noPkLama: { type: "string", maxLength: 50 },
      tglPK: { type: "string", minLength: 8, maxLength: 8 },
      tglPkLama: { type: "string", minLength: tglpklama, maxLength: 8 },
      tanggalAwal: { type: "string", minLength: 8, maxLength: 8 },
      tanggalAkhir: { type: "string", minLength: 8, maxLength: 8 },
      jangkaWaktu: { type: "number", minimum: 0 },
      namaDebitur: { type: "string", minLength: 1, maxLength: 255 },
      alamatDebitur: { type: "string", minLength: 1, maxLength: 512 },
      kodePos: { type: "string", maxLength: 6 },
      tempatLahir: { type: "string", maxLength: 100 },
      tanggalLahir: { type: "string", minLength: 8, maxLength: 8 },
      jenisKelamin: { type: "number", minimum: 1 },
      noTelepon: { type: "string", maxLength: 20 },
      noHp: { type: "string", minLength: 1, maxLength: 20 },
      pendidikan: { type: "number", minimum: 1 },
      maritalStatus: { type: "number", minimum: 0 },
      sumber: { type: "number" },
      jenisIdentitas: { type: "string", maxLength: 15 },
      noIdentitas: { type: "string", minLength: 1, maxLength: 40 },
      npwp: npwp_custom,
      noIjinUsaha: { type: "string", minLength: 1, maxLength: 100 },
      tglMulaiUsaha: { type: "string", minLength: 8, maxLength: 8 },
      modalUsaha: { type: "number", minimum: 0 },
      jumlahTenagaKerja: { type: "number", minimum: 1 },
      omsetUsaha: { type: "number", minimum: 0 },
      kekayaanBersih: { type: "number", minimum: 1 },
      kodePekerjaan: { type: "number", minimum: 1 },
      statusKepegawaian: { type: "string", maxLength: 1 },
      jenisKredit: { type: "string", minLength: 1, maxLength: 15 },
      plafonKredit: { type: "number", minimum: 1 },
      plafonKreditLama: { type: "number" },
      typeTujuanKredit: { type: "string", maxLength: 1 },
      sukuBunga: { type: "numeric", minimum: 1 },
      kodeSektor: { type: "string", minLength: 1, maxLength: 10 },
      coverage: { type: "number", minimum: 0 },
      statusKolektibilitas: { type: "string", minLength: 1, maxLength: 20 },
      loanType: { type: "string", maxLength: 20 },
      statusAkad: { type: "string", minLength: 1, maxLength: 2 },
      noSertifikatLama: { type: "string", maxLength: 25 },
      createdBy: { type: "string", maxLength: 20 },
      listAgunan: {
        type: "array",
        items: {
          properties: {
            jenisAgunan: { type: "string", minLength: 1, maxLength: 20 },
            jenisPengikatan: { type: "string", minLength: 1, maxLength: 20 },
            lokasiAgunan: { type: "string", maxLength: 512 },
            noAgunan: { type: "string", maxLength: 50 },
            nilaiAgunan: { type: "number", minimum: 0 },
            pemilikAgunan: { type: "string", maxLength: 512 },
            npw: { type: "number" },
            nl: { type: "number" },
            pnpw: { type: "number" },
            pnl: { type: "number" },
          },
          required: ["jenisAgunan", "jenisPengikatan", "nilaiAgunan"],
          additionalProperties: false,
        },
      },
      listOutstanding: {
        type: "array",
        minItems: 1,
        items: {
          properties: {
            tanggalSaldo: { type: "string", minLength: 8, maxLength: 8 },
            outstanding: { type: "number", minimum: 0 },
            angsuranPokok: { type: "number", minimum: 0 },
            angsuranBunga: { type: "number", minimum: 0 },
            angsuranDenda: { type: "number", minimum: 0 },
          },
          required: [
            "tanggalSaldo",
            "outstanding",
            "angsuranPokok",
            "angsuranBunga",
            "angsuranDenda",
          ],
          additionalProperties: false,
        },
      },
    },
    required: [
      "kodeBank",
      "nomorAplikasi",
      "kodeUker",
      "noRekening",
      "noPk",
      "tglPK",
      "tanggalAwal",
      "tanggalAkhir",
      "jangkaWaktu",
      "namaDebitur",
      "alamatDebitur",
      "tanggalLahir",
      "jenisKelamin",
      "noHp",
      "pendidikan",
      "maritalStatus",
      "noIdentitas",
      "npwp",
      "noIjinUsaha",
      "tglMulaiUsaha",
      "modalUsaha",
      "jumlahTenagaKerja",
      "omsetUsaha",
      "kekayaanBersih",
      "kodePekerjaan",
      "jenisKredit",
      "plafonKredit",
      "sukuBunga",
      "kodeSektor",
      "coverage",
      "statusKolektibilitas",
      "statusAkad",
      "listOutstanding",
    ],
    additionalProperties: false,
  };

  var results = v.validate(bod, akseptasi_validation);
  var json_ori = JSON.stringify(bod).replace(/""|" "/g, "null");
  var json_fix = JSON.parse(json_ori);
  console.log(json_fix);
  if (results.errors.length > 0) {
    var json_ori = JSON.stringify(bod).replace(/""|" "/g, "null");
    var json_fix = JSON.parse(json_ori);
    var messages = [];
    console.log(results.errors);
    console.log(json_fix);
    getKodeCabangAskrindo(json_fix.kodeBank, json_fix.kodeUker).then(function (
      params
    ) {
      if (params == "") {
        for (i = 0; i < results.errors.length; i++) {
          console.log(results.errors[i].name);
          if (results.errors[i].name === "additionalProperties") {
            messages.push({
              status: false,
              errorCode: "0102",
              errorType: "JSON Structure Error",
              errorMessage:
                "Field JSON " + results.errors[i].argument + " Not Allowed",
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              cabangRekanan: "Not Found",
            });
          } else if (results.errors[i].name !== "additionalProperties") {
            if (results.errors[i].name === "type") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "Datatype of " +
                  results.errors[i].property.split("instance.").join("") +
                  " must be " +
                  results.errors[i].argument[0],
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "required") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].argument.split("instance.").join("") +
                  " is Required",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "minLength") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates minimal length of string",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "maxLength") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates maximal length of string",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "minItems") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " cannot be empty",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "minimum") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates minimum amount of number",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "maximum") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates maximum amount of number",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            }
          }
        }
        console.log("messages 1 " +messages);
        res.status(400).json({
          error: true,
          trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          listError: messages,
        });
      } else {
        console.log(results.errors);
        for (i = 0; i < results.errors.length; i++) {
          console.log(results.errors[i].name);
          if (results.errors[i].name === "additionalProperties") {
            messages.push({
              status: false,
              errorCode: "0102",
              errorType: "JSON Structure Error",
              errorMessage:
                "Field JSON " + results.errors[i].argument + " Not Allowed",
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              cabangRekanan: params,
            });
          } else if (results.errors[i].name !== "additionalProperties") {
            if (results.errors[i].name === "type") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "Datatype of " +
                  results.errors[i].property.split("instance.").join("") +
                  " must be " +
                  results.errors[i].argument[0],
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "required") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].argument.split("instance.").join("") +
                  " is Required",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "minLength") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates minimal length of string",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "maxLength") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates maximal length of string",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "minItems") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " cannot be empty",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "minimum") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates minimum amount of number",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "maximum") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates maximum amount of number",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            }
          }
        }
        console.log(messages);
        res.status(400).json({
          error: true,
          trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          listError: messages,
        });
      }
    });
  } else if (jenis_covering == "CAC") {
    cekNIK(json_fix.noIdentitas)
      .then(function (success_cek_nik) {
        console.log("success_cek_nik 3 ="+success_cek_nik );
        getAllPenjaminan(json_fix).then(function (success) {
          console.log("success val");
          console.log("success_cek_nik 1 ="+success_cek_nik );
          if (success !== "OK" && success_cek_nik == "FAILED") {
            success.push({
              status: false,
              errorCode: "0202",
              errorType: "Data Validation",
              errorMessage: "NIK telah terdaftar di penjamin lain (Jamkrindo)",
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              cabangRekanan: success[0].cabangRekanan,
            });
            console.log(success);
            res.status(400).json({
              error: true,
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              listError: success,
            });
          } else if (success == "OK" && success_cek_nik == "FAILED") {
            console.log(success);
            res.status(400).json({
              error: true,
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              listError: [
                {
                  status: false,
                  errorCode: "0202",
                  errorType: "Data Validation",
                  errorMessage:
                    "NIK telah terdaftar di penjamin lain (Jamkrindo)",
                  trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                  cabangRekanan: "Not Found",
                },
              ],
            });
          } else if (success !== "OK" && success_cek_nik == "OK") {
            console.log(success);
            res.status(400).json({
              error: true,
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              listError: success,
            });
          } else if (success !== "OK" && success_cek_nik == "RTO") {
            console.log(success);
            res.status(400).json({
              error: true,
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              listError: success,
            });
          } else {
            if (success_cek_nik == "RTO") {
              ket_validasi_ejamku = "RTO";
              validasi_ejamku = true;
            } else {
              ket_validasi_ejamku = null;
              validasi_ejamku = false;
            }
            json_fix = JSON.parse(json_ori);
            console.log("ket_validasi_ejamku");
            console.log(ket_validasi_ejamku);
            console.log("validasi_ejamku");
            console.log(validasi_ejamku);
            
            cekDebitur(json_fix, false).then(function (cek_debitur) {
              if (cek_debitur == "ERROR") {
                res.status(400).json({
                  status: false,
                  errorMessage: "DJPPR API error or timed out",
                  trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                });
              } else if (cek_debitur == "SUCCESS") {
                if (
                  !json_fix.mekanismePenyaluran ||
                  json_fix.mekanismePenyaluran == ""
                ) {
                  json_fix.mekanismePenyaluran = "1";
                }
                insertTanpaAcs(
                  json_fix,
                  11,
                  ket_validasi_ejamku,
                  validasi_ejamku,
                  2
                ).then(function (params) {
                  json_fix = JSON.parse(json_ori);
                  getIdPenjaminan(json_fix)
                    .then(function (id_penjaminan) {
                      json_fix.listOutstanding.forEach((obj, i) => {
                        setTimeout(function () {
                          insertOutstanding(obj, id_penjaminan).then(function (
                            params
                          ) {
                            console.log("insert outstanding done!");
                          });
                        }, i * 2000);
                      });
                    })
                    .then(function (params) {
                      json_fix = JSON.parse(json_ori);
                      if (
                        json_fix.listAgunan &&
                        json_fix.listAgunan.length > 0
                      ) {
                        getIdPenjaminan(json_fix).then(function (
                          id_penjaminan
                        ) {
                          json_fix.listAgunan.forEach((object, i) => {
                            setTimeout(function () {
                              if (json_fix.listAgunan) {
                                insertAgunan(object, id_penjaminan);
                              }
                            }, i * 2000);
                          });
                        });
                      }
                    })
                    .then(function (params) {
                      getIdPenjaminan(json_fix).then(function (id_penjaminan) {
                        var keterangan;
                        var status;
                        keterangan = "SUCCESS";
                        status = 11;
                        updateStatusPenjaminan(
                          id_penjaminan,
                          null,
                          dateFormat(new Date(), "yyyymmdd"),
                          keterangan,
                          status
                        ).then(
                          getPenjaminanById(id_penjaminan).then(function (
                            penjaminan
                          ) {
                            res.status(200).json({
                              status: true,
                              message: "Request Success",
                              transactionID: padWithZeroes(id_penjaminan, 9),
                              trxDateResponse: dateFormat(
                                new Date(),
                                "yyyymmddHHMMss"
                              ),
                              data: {
                                statusSertifikat: "Covering validation lolos",
                                noTransaksiBank: json_fix.nomorAplikasi,
                                noRekening: json_fix.noRekening,
                                noSertifikat: "",
                                tglSertifikat: dateFormat(
                                  new Date(),
                                  "yyyymmdd"
                                ),
                                tglRekam: dateFormat(new Date(), "yyyymmdd"),
                                linkSertifikat: "",
                                cabangRekanan:
                                  penjaminan[0].kode_cabang_askrindo,
                              },
                            });
                          })
                        );
                      });
                    });
                });
              } else {
                res.status(400).json({
                  status: false,
                  body: cek_debitur,
                  trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                });
              }
            });
          }
        });
      })
      .catch((error) => console.log(error));
  } else if (jenis_covering == "CBC") {
    console.log("CBC");
    getIdPenjaminanCBC(json_fix).then(function (id_penjaminan) {
      if (id_penjaminan == null) {
        var messages = [];
        messages.push({
          status: false,
          errorCode: "0202",
          errorType: "Data Validation",
          errorMessage: "Permohonan SP3 belum dilakukan/disetujui",
          trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          cabangRekanan: "Not Found",
        });
        res.status(400).json({
          error: true,
          trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          listError: messages,
        });
      } else {
        cekDebitur(json_fix, false).then(function (cek_debitur) {
          if (cek_debitur == "ERROR") {
            res.status(400).json({
              status: false,
              errorMessage: "DJPPR API error or timed out",
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
            });
          } else if (cek_debitur == "SUCCESS") {
            if (
              !json_fix.mekanismePenyaluran ||
              json_fix.mekanismePenyaluran == ""
            ) {
              json_fix.mekanismePenyaluran = "1";
            }
            insertTanpaAcs(
              json_fix,
              11,
              ket_validasi_ejamku,
              validasi_ejamku,
              2
            ).then(function (params) {
              json_fix = JSON.parse(json_ori);
              getIdPenjaminan(json_fix)
                .then(function (id_penjaminan) {
                  json_fix.listOutstanding.forEach((obj, i) => {
                    setTimeout(function () {
                      insertOutstanding(obj, id_penjaminan).then(function (
                        params
                      ) {
                        console.log("insert outstanding done!");
                      });
                    }, i * 2000);
                  });
                })
                .then(function (params) {
                  json_fix = JSON.parse(json_ori);
                  if (
                    json_fix.listAgunan &&
                    json_fix.listAgunan.length > 0
                  ) {
                    getIdPenjaminan(json_fix).then(function (
                      id_penjaminan
                    ) {
                      json_fix.listAgunan.forEach((object, i) => {
                        setTimeout(function () {
                          if (json_fix.listAgunan) {
                            insertAgunan(object, id_penjaminan);
                          }
                        }, i * 2000);
                      });
                    });
                  }
                })
                .then(function (params) {
                  getIdPenjaminan(json_fix).then(function (id_penjaminan) {
                    var keterangan;
                    var status;
                    keterangan = "SUCCESS";
                    status = 11;
                    updateStatusPenjaminan(
                      id_penjaminan,
                      null,
                      dateFormat(new Date(), "yyyymmdd"),
                      keterangan,
                      status
                    ).then(
                      getPenjaminanById(id_penjaminan).then(function (
                        penjaminan
                      ) {
                        res.status(200).json({
                          status: true,
                          message: "Request Success",
                          transactionID: padWithZeroes(id_penjaminan, 9),
                          trxDateResponse: dateFormat(
                            new Date(),
                            "yyyymmddHHMMss"
                          ),
                          data: {
                            statusSertifikat: "Covering validation lolos",
                            noTransaksiBank: json_fix.nomorAplikasi,
                            noRekening: json_fix.noRekening,
                            noSertifikat: "",
                            tglSertifikat: dateFormat(
                              new Date(),
                              "yyyymmdd"
                            ),
                            tglRekam: dateFormat(new Date(), "yyyymmdd"),
                            linkSertifikat: "",
                            cabangRekanan:
                              penjaminan[0].kode_cabang_askrindo,
                          },
                        });
                      })
                    );
                  });
                });
            });
          } else {
            res.status(400).json({
              status: false,
              body: cek_debitur,
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
            });
          }
        });
      }
    });
  }
};

exports.postAkseptasiCoveringFlag = function (req, res) {
  var Validator = require("jsonschema").Validator;
  var v = new Validator();
  var akseptasi_validation;
  
  console.log("cov flag");

  bod = req.body;
  var tglpklama;
  if (bod.tglPkLama === "") {
    tglpklama = 0;
  } else {
    tglpklama = 8;
  }
  var akseptasi_validation;
  var npwp_custom;
  var ket_validasi_ejamku;
  var validasi_ejamku;
  if (bod.plafonKredit > 10000000000) {
    return res.status(400).json({
      status: false,
      errorCode: "0220",
      errorType: "Data Validation",
      errorMessage: "Plafond tidak boleh diatas 10 Miliar",
      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
      cabangRekanan: bod.kodeBank,
    });
  } else {
    if (bod.plafonKredit <= 50000000) {
      npwp_custom = { type: "string", maxLength: 40 };
    } else {
      npwp_custom = { type: "string", minLength: 1, maxLength: 40 };
    }
    var akseptasi_validation = {
      id: "/akseptasi",
      type: "object",
      disableFormat: false,
      minProperties: 1,
      properties: {
        kodeBank: { type: "string", minLength: 1, maxLength: 8 },
        nomorAplikasi: { type: "string", minLength: 1, maxLength: 50 },
        kodeUker: { type: "string", minLength: 1, maxLength: 8 },
        namaUker: { type: "string", maxLength: 255 },
        noRekening: { type: "string", minLength: 1, maxLength: 30 },
        noRekLama: { type: "string", maxLength: 30 },
        cif: { type: "string", maxLength: 50 },
        noPk: { type: "string", minLength: 1, maxLength: 50 },
        noPkLama: { type: "string", maxLength: 50 },
        tglPK: { type: "string", minLength: 8, maxLength: 8 },
        tglPkLama: { type: "string", minLength: tglpklama, maxLength: 8 },
        tanggalAwal: { type: "string", minLength: 8, maxLength: 8 },
        tanggalAkhir: { type: "string", minLength: 8, maxLength: 8 },
        jangkaWaktu: { type: "number", minimum: 0 },
        namaDebitur: { type: "string", minLength: 1, maxLength: 255 },
        alamatDebitur: { type: "string", minLength: 1, maxLength: 512 },
        kodePos: { type: "string", maxLength: 6 },
        tempatLahir: { type: "string", maxLength: 100 },
        tanggalLahir: { type: "string", minLength: 8, maxLength: 8 },
        jenisKelamin: { type: "number", minimum: 1 },
        noTelepon: { type: "string", maxLength: 20 },
        noHp: { type: "string", minLength: 1, maxLength: 20 },
        pendidikan: { type: "number", minimum: 1 },
        maritalStatus: { type: "number", minimum: 0 },
        sumber: { type: "number" },
        jenisIdentitas: { type: "string", maxLength: 15 },
        noIdentitas: { type: "string", minLength: 1, maxLength: 40 },
        npwp: npwp_custom,
        noIjinUsaha: { type: "string", minLength: 1, maxLength: 100 },
        tglMulaiUsaha: { type: "string", minLength: 8, maxLength: 8 },
        modalUsaha: { type: "number", minimum: 0 },
        jumlahTenagaKerja: { type: "number", minimum: 1 },
        omsetUsaha: { type: "number", minimum: 0 },
        kekayaanBersih: { type: "number", minimum: 1 },
        kodePekerjaan: { type: "number", minimum: 1 },
        statusKepegawaian: { type: "string", maxLength: 1 },
        jenisKredit: { type: "string", minLength: 1, maxLength: 15 },
        plafonKredit: { type: "number", minimum: 1 },
        plafonKreditLama: { type: "number" },
        typeTujuanKredit: { type: "string", maxLength: 1 },
        sukuBunga: { type: "numeric", minimum: 1 },
        kodeSektor: { type: "string", minLength: 1, maxLength: 10 },
        coverage: { type: "number", minimum: 0 },
        statusKolektibilitas: { type: "string", minLength: 1, maxLength: 20 },
        loanType: { type: "string", maxLength: 20 },
        statusAkad: { type: "string", minLength: 1, maxLength: 2 },
        noSertifikatLama: { type: "string", maxLength: 25 },
        createdBy: { type: "string", maxLength: 20 },
        listAgunan: {
          type: "array",
          items: {
            properties: {
              jenisAgunan: { type: "string", minLength: 1, maxLength: 20 },
              jenisPengikatan: { type: "string", minLength: 1, maxLength: 20 },
              lokasiAgunan: { type: "string", maxLength: 512 },
              noAgunan: { type: "string", maxLength: 50 },
              nilaiAgunan: { type: "number", minimum: 0 },
              pemilikAgunan: { type: "string", maxLength: 512 },
              npw: { type: "number" },
              nl: { type: "number" },
              pnpw: { type: "number" },
              pnl: { type: "number" },
            },
            required: ["jenisAgunan", "jenisPengikatan", "nilaiAgunan"],
            additionalProperties: false,
          },
        },
        listOutstanding: {
          type: "array",
          minItems: 1,
          items: {
            properties: {
              tanggalSaldo: { type: "string", minLength: 8, maxLength: 8 },
              outstanding: { type: "number", minimum: 0 },
              angsuranPokok: { type: "number", minimum: 0 },
              angsuranBunga: { type: "number", minimum: 0 },
              angsuranDenda: { type: "number", minimum: 0 },
            },
            required: [
              "tanggalSaldo",
              "outstanding",
              "angsuranPokok",
              "angsuranBunga",
              "angsuranDenda",
            ],
            additionalProperties: false,
          },
        },
      },
      required: [
        "kodeBank",
        "nomorAplikasi",
        "kodeUker",
        "noRekening",
        "noPk",
        "tglPK",
        "tanggalAwal",
        "tanggalAkhir",
        "jangkaWaktu",
        "namaDebitur",
        "alamatDebitur",
        "tanggalLahir",
        "jenisKelamin",
        "noHp",
        "pendidikan",
        "maritalStatus",
        "noIdentitas",
        "npwp",
        "noIjinUsaha",
        "tglMulaiUsaha",
        "modalUsaha",
        "jumlahTenagaKerja",
        "omsetUsaha",
        "kekayaanBersih",
        "kodePekerjaan",
        "jenisKredit",
        "plafonKredit",
        "sukuBunga",
        "kodeSektor",
        "coverage",
        "statusKolektibilitas",
        "statusAkad",
        "listOutstanding",
      ],
      additionalProperties: false,
    };

    var results = v.validate(bod, akseptasi_validation);
    if (results.errors.length > 0) {
      var json_ori = JSON.stringify(bod).replace(/""|" "/g, "null");
      var json_fix = JSON.parse(json_ori);
      var messages = [];
      console.log(results.errors);
      console.log(json_fix);
      getKodeCabangAskrindo(json_fix.kodeBank, json_fix.kodeUker).then(
        function (params) {
          if (params == "") {
            for (i = 0; i < results.errors.length; i++) {
              console.log(results.errors[i].name);
              if (results.errors[i].name === "additionalProperties") {
                messages.push({
                  status: false,
                  errorCode: "0102",
                  errorType: "JSON Structure Error",
                  errorMessage:
                    "Field JSON " + results.errors[i].argument + " Not Allowed",
                  trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                  cabangRekanan: "Not Found",
                });
              } else if (results.errors[i].name !== "additionalProperties") {
                if (results.errors[i].name === "type") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "Datatype of " +
                      results.errors[i].property.split("instance.").join("") +
                      " must be " +
                      results.errors[i].argument[0],
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: "Not Found",
                  });
                } else if (results.errors[i].name === "required") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].argument.split("instance.").join("") +
                      " is Required",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: "Not Found",
                  });
                } else if (results.errors[i].name === "minLength") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].property.split("instance.").join("") +
                      " violates minimal length of string",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: "Not Found",
                  });
                } else if (results.errors[i].name === "maxLength") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].property.split("instance.").join("") +
                      " violates maximal length of string",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: "Not Found",
                  });
                } else if (results.errors[i].name === "minItems") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].property.split("instance.").join("") +
                      " cannot be empty",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: "Not Found",
                  });
                } else if (results.errors[i].name === "minimum") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].property.split("instance.").join("") +
                      " violates minimum amount of number",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: "Not Found",
                  });
                } else if (results.errors[i].name === "maximum") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].property.split("instance.").join("") +
                      " violates maximum amount of number",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: "Not Found",
                  });
                }
              }
            }
            console.log(messages);
            res.status(400).json({
              error: true,
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              listError: messages,
            });
          } else {
            console.log(results.errors);
            for (i = 0; i < results.errors.length; i++) {
              console.log(results.errors[i].name);
              if (results.errors[i].name === "additionalProperties") {
                messages.push({
                  status: false,
                  errorCode: "0102",
                  errorType: "JSON Structure Error",
                  errorMessage:
                    "Field JSON " + results.errors[i].argument + " Not Allowed",
                  trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                  cabangRekanan: params,
                });
              } else if (results.errors[i].name !== "additionalProperties") {
                if (results.errors[i].name === "type") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "Datatype of " +
                      results.errors[i].property.split("instance.").join("") +
                      " must be " +
                      results.errors[i].argument[0],
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: params,
                  });
                } else if (results.errors[i].name === "required") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].argument.split("instance.").join("") +
                      " is Required",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: params,
                  });
                } else if (results.errors[i].name === "minLength") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].property.split("instance.").join("") +
                      " violates minimal length of string",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: params,
                  });
                } else if (results.errors[i].name === "maxLength") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].property.split("instance.").join("") +
                      " violates maximal length of string",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: params,
                  });
                } else if (results.errors[i].name === "minItems") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].property.split("instance.").join("") +
                      " cannot be empty",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: params,
                  });
                } else if (results.errors[i].name === "minimum") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].property.split("instance.").join("") +
                      " violates minimum amount of number",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: params,
                  });
                } else if (results.errors[i].name === "maximum") {
                  messages.push({
                    status: false,
                    errorCode: "0101",
                    errorType:
                      "Mandatory Field Validation Error or Datatype Error",
                    errorMessage:
                      "JSON Field " +
                      results.errors[i].property.split("instance.").join("") +
                      " violates maximum amount of number",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: params,
                  });
                }
              }
            }
            console.log(messages);
            res.status(400).json({
              error: true,
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              listError: messages,
            });
          }
        }
      );
    } else {
      var json_ori = JSON.stringify(bod).replace(/""|" "/g, "null");
      var json_fix = JSON.parse(json_ori);
      console.log("cov flag cek 1 json");
      console.log(json_ori);
      
      // cekNIK(json_fix.noIdentitas)
      //   .then(function (success_cek_nik) {
      //     console.log(success_cek_nik);
      //     console.log("validasi cov flag");
      //     getAllPenjaminan(json_fix, 1).then(function (success) {
      //       if (success !== "OK" && success_cek_nik == "FAILED") {
      //         success.push({
      //           status: false,
      //           errorCode: "0202",
      //           errorType: "Data Validation",
      //           errorMessage:
      //             "NIK telah terdaftar di penjamin lain (Jamkrindo)",
      //           trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
      //           cabangRekanan: success[0].cabangRekanan,
      //         });
      //         console.log(success);
      //         res.status(400).json({
      //           error: true,
      //           trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
      //           listError: success,
      //         });
      //       } else if (success == "OK" && success_cek_nik == "FAILED") {
      //         console.log(success);
      //         res.status(400).json({
      //           error: true,
      //           trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
      //           listError: [
      //             {
      //               status: false,
      //               errorCode: "0202",
      //               errorType: "Data Validation",
      //               errorMessage:
      //                 "NIK telah terdaftar di penjamin lain (Jamkrindo)",
      //               trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
      //               cabangRekanan: "Not Found",
      //             },
      //           ],
      //         });
      //       } else if (success !== "OK" && success_cek_nik == "OK") {
      //         console.log(success);
      //         res.status(400).json({
      //           error: true,
      //           trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
      //           listError: success,
      //         });
      //       } else if (success !== "OK" && success_cek_nik == "RTO") {
      //         console.log(success);
      //         res.status(400).json({
      //           error: true,
      //           trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
      //           listError: success,
      //         });
      //       } else {
      //         if (success_cek_nik == "RTO") {
      //           ket_validasi_ejamku = "RTO";
      //           validasi_ejamku = true;
      //         } else {
      //           ket_validasi_ejamku = null;
      //           validasi_ejamku = false;
      //         }
      //         json_fix = JSON.parse(json_ori);

      //         // cekDebitur(json_fix).then(function (cek_debitur) {
      //         //     if(cek_debitur == 'ERROR')
      //         //     {
      //         //         res.status(400).json({
      //         //             status: false,
      //         //             errorMessage:'DJPPR API error or timed out',
      //         //             trxDateResponse: dateFormat(new Date(),"yyyymmddHHMMss" ),
      //         //         })
      //         //     }
      //         // else if(cek_debitur == 'SUCCESS')
      //         // {
      //         if (
      //           !json_fix.mekanismePenyaluran ||
      //           json_fix.mekanismePenyaluran == ""
      //         ) {
      //           json_fix.mekanismePenyaluran = "1";
      //         }
              json_fix = JSON.parse(json_ori);
              getIdPenjaminan(json_fix)
                .then(function (id_penjaminan) {
                  getPenjaminanById(id_penjaminan).then(function (penjaminan) {
                    if (penjaminan[0].status_penjaminan_id == 11) {
                      json_fix = JSON.parse(json_ori);
                      getIdPenjaminan(json_fix).then(function (id_penjaminan) {
                        var tahun_ke = json_fix.jangkaWaktu;
                        var floor = new Date(
                          dateFormat(
                            new Date(
                              json_fix.tanggalAwal.substring(0, 4),
                              json_fix.tanggalAwal.substring(4, 6) - 1,
                              json_fix.tanggalAwal.substring(6, 8)
                            ),
                            "yyyy-mm-dd"
                          )
                        );
                        var floor_plus = new Date(
                          dateFormat(
                            new Date(
                              +json_fix.tanggalAwal.substring(0, 4) + 1,
                              json_fix.tanggalAwal.substring(4, 6) - 1,
                              json_fix.tanggalAwal.substring(6, 8)
                            ),
                            "yyyy-mm-dd"
                          )
                        );
                        var ceil = new Date(
                          dateFormat(
                            new Date(
                              json_fix.tanggalAkhir.substring(0, 4),
                              json_fix.tanggalAkhir.substring(4, 6) - 1,
                              json_fix.tanggalAkhir.substring(6, 8)
                            ),
                            "yyyy-mm-dd"
                          )
                        );
                        var diff_floor_inst = new DateDiff(floor_plus, floor);
                        var max_pert_inst = new DateDiff(ceil, floor);
                        var jangka_waktu_hari = max_pert_inst.days();
                        var diff_floor = diff_floor_inst.days();
                        var max_pert = max_pert_inst.days();
                        var premi = [];
                        var cadangan = [];
                        var jml_hari = [];
                        var jml_hari_tahunan = [];
                        var stop = true;
                        var jatuh_tempo = dateFormat(new Date(), "dd");
                        if (jatuh_tempo >= 15) {
                          if (
                            padWithZeroes(
                              +dateFormat(new Date(), "mm") + 1,
                              2
                            ) > 12
                          ) {
                            jatuh_tempo =
                              +dateFormat(new Date(), "yyyy") +
                              1 +
                              padWithZeroes(
                                +dateFormat(new Date(), "mm") + 1 - 12,
                                2
                              ) +
                              "15";
                          } else {
                            jatuh_tempo =
                              dateFormat(new Date(), "yyyy") +
                              padWithZeroes(
                                +dateFormat(new Date(), "mm") + 1,
                                2
                              ) +
                              "15";
                          }
                        } else {
                          jatuh_tempo = dateFormat(new Date(), "yyyymm") + "15";
                        }
                        while (stop) {
                          if (max_pert > diff_floor) {
                            max_pert = max_pert - diff_floor;

                            floor = new Date(dateFormat(new Date(+(floor_plus.getFullYear()), (floor_plus.getMonth()), floor_plus.getDate()), "yyyy-mm-dd" ));
                            console.log(floor);
                            floor_plus = new Date(dateFormat(new Date(+(floor.getFullYear())+1, (floor.getMonth()), floor.getDate()), "yyyy-mm-dd" ));             
              
                            
                            diff_floor_inst = new DateDiff(floor_plus, floor);
                            diff_floor = diff_floor_inst.days();
                            ijp = 0.0456 * json_fix.plafonKredit * 1;
                            cadangan_calc = 0.008 * json_fix.plafonKredit * 1;
                            premi.push(Math.round(ijp));
                            cadangan.push(Math.round(cadangan_calc));
                          } else {
                      
                            ijp =
                              0.0456 *
                              json_fix.plafonKredit *
                              (max_pert / diff_floor);
                            cadangan_calc =
                              0.008 *
                              json_fix.plafonKredit *
                              (max_pert / diff_floor);
                            premi.push(Math.round(ijp));
                            cadangan.push(Math.round(cadangan_calc));
                            stop = false;
                          }

                        }
                        updateTotalIjp(
                          premi.reduce((a, b) => a + b, 0),
                          jangka_waktu_hari,
                          id_penjaminan
                        ).then(function (params) {
                          premi.forEach((val, i) => {
                            setTimeout(function () {
                              console.log("insert ijp cov flag");
                              insertIjp(
                                id_penjaminan,
                                i + 1,
                                val,
                                cadangan[i],
                                jatuh_tempo
                              );
                            }, i * 2000);
                          });
                        });
                      });
                    }
                  });
                })
                .then(function (params) {
                  getPolis(json_fix).then(function (no_sertifikat) {
                    getIdPenjaminan(json_fix).then(function (id_penjaminan) {
                      var keterangan;
                      var status;
                      keterangan = "SUCCESS";
                      status = 3;
                      getPenjaminanById(id_penjaminan).then(async function (
                        penjaminan
                      ) {
                        if (penjaminan[0].status_penjaminan_id == 11) {
                          updateStatusPenjaminanCovFlag(
                            id_penjaminan,
                            no_sertifikat,
                            dateFormat(new Date(), "yyyymmdd"),
                            keterangan,
                            status
                          ).then(
                            (tagihan = await putAkadCovFlag(
                              json_fix,
                              no_sertifikat
                            )
                              .then(async function (return3) {
                                if (return3 == "ok") {
                                  var ok = await return3;
                                  console.log(ok);
                                  return res.status(200).json({
                                    status: true,
                                    message: "Request Success",
                                    transactionID: padWithZeroes(
                                      id_penjaminan,
                                      9
                                    ),
                                    trxDateResponse: dateFormat(
                                      new Date(),
                                      "yyyymmddHHMMss"
                                    ),
                                    data: {
                                      statusSertifikat: "Terbit",
                                      noTransaksiBank: json_fix.nomorAplikasi,
                                      noRekening: json_fix.noRekening,
                                      noSertifikat: no_sertifikat,
                                      tglSertifikat: dateFormat(
                                        new Date(),
                                        "yyyymmdd"
                                      ),
                                      tglRekam: dateFormat(
                                        new Date(),
                                        "yyyymmdd"
                                      ),
                                      linkSertifikat:
                                        "http://10.100.10.30:9200/akseptasi?no_polis=" +
                                        no_sertifikat +
                                        "&status=3",
                                      cabangRekanan:
                                        penjaminan[0].kode_cabang_askrindo,
                                    },
                                  });
                                } else {
                                  res.status(400).json({
                                    status: false,
                                    errorMessage: return3,
                                    trxDateResponse: dateFormat(
                                      new Date(),
                                      "yyyymmddHHMMss"
                                    ),
                                  });
                                }
                              })
                              .then(async function () {
                                tagihan = await postSIKPPerEntry(
                                  json_fix.nomorAplikasi,
                                  2
                                ).then(async function (return3) {
                                  if (return3 == "POST SIKP TAGIHAN GAGAL!") {
                                    var ok = await return3;
                                    console.log(ok);
                                  } else {
                                    var ok = await return3;
                                    console.log(ok);
                                  }
                                });
                              }))
                          );
                        } else {
                          res.status(400).json({
                            status: false,
                            errorMessage: "Penjaminan sudah pernah terbit",
                            trxDateResponse: dateFormat(
                              new Date(),
                              "yyyymmddHHMMss"
                            ),
                          });
                        }
                      });
                    });
                  });
                });
              // }
              // else
              // {
              //     res.status(400).json({
              //         status: false,
              //         body:cek_debitur,
              //         trxDateResponse: dateFormat(new Date(),"yyyymmddHHMMss" ),
              //     })
              // }
              // })
        //     }
        //   });
        // })
        // .catch((error) => console.log(error));
    }
  }
};

exports.postAkseptasiCoveringFlagBulk = async function (req, res) {
  get_all_data_flag = await model.sequelize
    .query(
      "SELECT * FROM t_penjaminan WHERE status_penjaminan_id = '11' AND ket_audit_trail = '29112021 - Inject H2H BRI'",
      {
        type: model.sequelize.QueryTypes.SELECT,
        quoteIdentifiers: true,
      }
    )
    .then(function (get_all_data_flag) {
      get_all_data_flag.forEach((result_key, i) => {
        bod = result_key;
        var tglpklama;
        if (bod.tglPkLama === "") {
          tglpklama = 0;
        } else {
          tglpklama = 8;
        }
        if (bod.plafonKredit > 1000000000) {
          return res.status(400).json({
            status: false,
            errorCode: "0220",
            errorType: "Data Validation",
            errorMessage: "Plafond tidak boleh diatas 1 Miliar",
            trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
            cabangRekanan: bod.kode_bank,
          });
        } else {
          // json_fix = JSON.parse(json_ori)

          // cekDebitur(json_fix).then(function (cek_debitur) {
          //     if(cek_debitur == 'ERROR')
          //     {
          //         res.status(400).json({
          //             status: false,
          //             errorMessage:'DJPPR API error or timed out',
          //             trxDateResponse: dateFormat(new Date(),"yyyymmddHHMMss" ),
          //         })
          //     }
          // else if(cek_debitur == 'SUCCESS')
          // {
          // if(!json_fix.mekanismePenyaluran || json_fix.mekanismePenyaluran == "")
          // {
          //     json_fix.mekanismePenyaluran = "1";
          // }
          // json_fix = JSON.parse(json_ori)
          getIdPenjaminanCovBatch(result_key)
            .then(function (id_penjaminan) {
              if (result_key.status_penjaminan_id == 11) {
                getIdPenjaminanCovBatch(result_key).then(function (
                  id_penjaminan
                ) {
                  var tahun_ke = result_key.jangka_waktu;
                  var floor = new Date(result_key.tgl_awal_pertanggungan);
                  var floor_plus = new Date(
                    dateFormat(
                      new Date(
                        +floor.getFullYear() + 1,
                        floor.getMonth(),
                        floor.getDate()
                      ),
                      "yyyy-mm-dd"
                    )
                  );
                  var ceil = new Date(result_key.tgl_akhir_pertanggungan);
                  var diff_floor_inst = new DateDiff(floor_plus, floor);
                  var max_pert_inst = new DateDiff(ceil, floor);
                  var jangka_waktu_hari = max_pert_inst.days();
                  var diff_floor = diff_floor_inst.days();
                  var max_pert = max_pert_inst.days();
                  var premi = [];
                  var cadangan = [];
                  var jml_hari = [];
                  var jml_hari_tahunan = [];
                  var stop = true;
                  var jatuh_tempo = dateFormat(new Date(), "dd");
                  if (jatuh_tempo >= 15) {
                    if (
                      padWithZeroes(+dateFormat(new Date(), "mm") + 1, 2) > 12
                    ) {
                      jatuh_tempo =
                        +dateFormat(new Date(), "yyyy") +
                        1 +
                        padWithZeroes(
                          +dateFormat(new Date(), "mm") + 1 - 12,
                          2
                        ) +
                        "15";
                    } else {
                      jatuh_tempo =
                        dateFormat(new Date(), "yyyy") +
                        padWithZeroes(+dateFormat(new Date(), "mm") + 1, 2) +
                        "15";
                    }
                  } else {
                    jatuh_tempo = dateFormat(new Date(), "yyyymm") + "15";
                  }
                  while (stop) {
                    if (max_pert > diff_floor) {
                      max_pert = max_pert - diff_floor;
                      floor = new Date(dateFormat(new Date(+(floor_plus.getFullYear()), (floor_plus.getMonth()), floor_plus.getDate()), "yyyy-mm-dd" ));
                      console.log(floor);
                      floor_plus = new Date(dateFormat(new Date(+(floor.getFullYear())+1, (floor.getMonth()), floor.getDate()), "yyyy-mm-dd" ));             
              
                      diff_floor_inst = new DateDiff(floor_plus, floor);
                      diff_floor = diff_floor_inst.days();
                      ijp = 0.0456 * result_key.plafond_kredit * 1;
                      cadangan_calc = 0.008 * result_key.plafond_kredit * 1;
                      premi.push(Math.round(ijp));
                      cadangan.push(Math.round(cadangan_calc));
                    } else {
                    
                      ijp =
                        0.0456 *
                        result_key.plafond_kredit *
                        (max_pert / diff_floor);
                      cadangan_calc =
                        0.008 *
                        result_key.plafond_kredit *
                        (max_pert / diff_floor);
                      premi.push(Math.round(ijp));
                      cadangan.push(Math.round(cadangan_calc));
                      stop = false;
                    }
                  }
                  updateTotalIjp(
                    premi.reduce((a, b) => a + b, 0),
                    jangka_waktu_hari,
                    id_penjaminan
                  ).then(function (params) {
                    premi.forEach((val, i) => {
                      setTimeout(function () {
                        console.log("insert ijp 3");
                        insertIjp(
                          id_penjaminan,
                          i + 1,
                          val,
                          cadangan[i],
                          jatuh_tempo
                        );
                      }, i * 2000);
                    });
                  });
                });
              }
            })
            .then(function (params) {
              getPolisCovBatch(result_key).then(function (no_sertifikat) {
                getIdPenjaminanCovBatch(result_key).then(function (
                  id_penjaminan
                ) {
                  var keterangan;
                  var status;
                  keterangan = "SUCCESS";
                  status = 3;
                  if (result_key.status_penjaminan_id == 11) {
                    updateStatusPenjaminanCovFlag(
                      id_penjaminan,
                      no_sertifikat,
                      dateFormat(new Date(), "yyyymmdd"),
                      keterangan,
                      status
                    ).then(async function (params) {
                      tagihan = await putAkadCovFlagBatch(result_key).then(
                        async function (return3) {
                          if (return3 == "ok") {
                            var ok = await return3;
                            console.log(i);
                          } else {
                            res.status(400).json({
                              status: false,
                              errorMessage: return3,
                              trxDateResponse: dateFormat(
                                new Date(),
                                "yyyymmddHHMMss"
                              ),
                            });
                          }
                        }
                      );
                    });
                  } else {
                    res.status(400).json({
                      status: false,
                      errorMessage: "Penjaminan sudah pernah terbit",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    });
                  }
                });
              });
            })
            // }
            // else
            // {
            //     res.status(400).json({
            //         status: false,
            //         body:cek_debitur,
            //         trxDateResponse: dateFormat(new Date(),"yyyymmddHHMMss" ),
            //     })
            // }

            // })

            .catch((error) => console.log(error));
        }
      });
    });
};

insertTanpaAcsAkseptasi = async function (
  params,
  statuspenjaminan,
  ket_validasi_ejamku,
  validasi_ejamku,
  keterangan = "SUCCESS",
  status_sikp = 0
) {
  try {
    return await model.sequelize.transaction(async (t) => {
      var ret;
      var kode_cabang_askrindo_ret;
      var is_cac;
      var sumber;

      kode_bank = await model.sequelize
        .query(
          "select * from m_mapping_bank where kode_bank = '" +
            params.kodeBank +
            "' and kode_cabang_bank ='" +
            params.kodeUker +
            "'",
          {
            // replacements: {id: carIds},
            type: model.sequelize.QueryTypes.SELECT,
            quoteIdentifiers: true,
            transaction: t,
          }
        )
        .then(async function (kode_bank) {
          no_pks = await model.sequelize
            .query(
              "select * from m_bank where kode_bank = " +
                "'" +
                params.kodeBank +
                "'",
              {
                // replacements: {id: carIds},
                type: model.sequelize.QueryTypes.SELECT,
                quoteIdentifiers: true,
                transaction: t,
              }
            )
            .then(async function (no_pks) {
              if (!params.sumber) {
                sumber = 1;
              } else {
                sumber = params.sumber;
              }
              if (params.plafonKredit <= 1000000000) {
                is_cac = true;
              } else {
                is_cac = false;
              }
              if (!params.uploadId) {
                params.uploadId = null;
              } else {
                params.uploadId = "'" + params.uploadId + "'";
              }
              if (!params.kodeBank) {
                params.kodeBank = null;
              } else {
                params.kodeBank = "'" + params.kodeBank + "'";
              }
              if (!params.nomorAplikasi) {
                params.nomorAplikasi = null;
              } else {
                params.nomorAplikasi = "'" + params.nomorAplikasi + "'";
              }
              if (!params.kodeUker) {
                params.kodeUker = null;
              } else {
                params.kodeUker = "'" + params.kodeUker + "'";
              }
              if (!params.namaUker) {
                params.namaUker = null;
              } else {
                params.namaUker = "'" + params.namaUker + "'";
              }
              if (!params.noRekening) {
                params.noRekening = null;
              } else {
                params.noRekening =
                  "'" + params.noRekening.replace(/[^0-9a-z]/gi, "") + "'";
              }
              if (!params.noRekLama) {
                params.noRekLama = null;
              } else {
                params.noRekLama = "'" + params.noRekLama + "'";
              }
              if (!params.cif) {
                params.cif = null;
              } else {
                params.cif = "'" + params.cif + "'";
              }
              if (!params.noPk) {
                params.noPk = null;
              } else {
                params.noPk = "'" + params.noPk + "'";
              }
              if (!params.noPkLama) {
                params.noPkLama = null;
              } else {
                params.noPkLama = "'" + params.noPkLama + "'";
              }
              if (!params.tglPK) {
                params.tglPK = null;
              } else {
                params.tglPK = "'" + params.tglPK + "'";
              }
              if (!params.tglPkLama) {
                params.tglPkLama = null;
              } else {
                params.tglPkLama = "'" + params.tglPkLama + "'";
              }
              if (!params.tanggalAwal) {
                params.tanggalAwal = null;
              } else {
                params.tanggalAwal = "'" + params.tanggalAwal + "'";
              }
              if (!params.tanggalAkhir) {
                params.tanggalAkhir = null;
              } else {
                params.tanggalAkhir = "'" + params.tanggalAkhir + "'";
              }
              if (!params.jangkaWaktu) {
                params.jangkaWaktu = null;
              } else {
                params.jangkaWaktu = params.jangkaWaktu;
              }
              if (!params.namaDebitur) {
                params.namaDebitur = null;
              } else {
                params.namaDebitur = params.namaDebitur;
              }
              if (!params.alamatDebitur) {
                params.alamatDebitur = null;
              } else {
                params.alamatDebitur = params.alamatDebitur;
              }
              if (!params.kodePos) {
                params.kodePos = null;
              } else {
                params.kodePos = "'" + params.kodePos + "'";
              }
              if (!params.tempatLahir) {
                params.tempatLahir = null;
              } else {
                params.tempatLahir = "'" + params.tempatLahir + "'";
              }
              if (!params.tanggalLahir) {
                params.tanggalLahir = null;
              } else {
                params.tanggalLahir = "'" + params.tanggalLahir + "'";
              }
              if (!params.jenisKelamin) {
                params.jenisKelamin = null;
              } else {
                params.jenisKelamin = params.jenisKelamin;
              }
              if (!params.noTelepon) {
                params.noTelepon = null;
              } else {
                params.noTelepon = "'" + params.noTelepon + "'";
              }
              if (!params.noHp) {
                params.noHp = null;
              } else {
                params.noHp = "'" + params.noHp + "'";
              }
              if (!params.pendidikan) {
                params.pendidikan = null;
              } else {
                params.pendidikan = params.pendidikan;
              }
              if (!params.maritalStatus && params.maritalStatus != 0) {
                params.maritalStatus = null;
              } else {
                params.maritalStatus = params.maritalStatus;
              }
              if (!params.jenisIdentitas) {
                params.jenisIdentitas = null;
              } else {
                params.jenisIdentitas = "'" + params.jenisIdentitas + "'";
              }
              if (!params.noIdentitas) {
                params.noIdentitas = null;
              } else {
                params.noIdentitas = "'" + params.noIdentitas + "'";
              }
              if (!params.npwp) {
                params.npwp = null;
              } else {
                params.npwp = "'" + params.npwp + "'";
              }
              if (!params.noIjinUsaha) {
                params.noIjinUsaha = null;
              } else {
                params.noIjinUsaha = "'" + params.noIjinUsaha + "'";
              }
              if (!params.tglMulaiUsaha) {
                params.tglMulaiUsaha = null;
              } else {
                params.tglMulaiUsaha = "'" + params.tglMulaiUsaha + "'";
              }
              if (!params.modalUsaha && params.modalUsaha !== 0) {
                params.modalUsaha = null;
              } else {
                params.modalUsaha = params.modalUsaha;
              }
              if (!params.jumlahTenagaKerja && params.jumlahTenagaKerja !== 0) {
                params.jumlahTenagaKerja = null;
              } else {
                params.jumlahTenagaKerja = params.jumlahTenagaKerja;
              }
              if (!params.omsetUsaha && params.omsetUsaha !== 0) {
                params.omsetUsaha = null;
              } else {
                params.omsetUsaha = params.omsetUsaha;
              }
              if (!params.kekayaanBersih && params.kekayaanBersih !== 0) {
                params.kekayaanBersih = null;
              } else {
                params.kekayaanBersih = params.kekayaanBersih;
              }
              if (!params.kodePekerjaan) {
                params.kodePekerjaan = null;
              } else {
                params.kodePekerjaan = params.kodePekerjaan;
              }
              if (!params.statusKepegawaian) {
                params.statusKepegawaian = null;
              } else {
                params.statusKepegawaian = "'" + params.statusKepegawaian + "'";
              }
              if (!params.jenisKredit) {
                params.jenisKredit = "GEN2";
              } else {
                params.jenisKredit = "GEN2";
                params.jenisKredit = "'" + params.jenisKredit + "'";
              }
              if (!params.plafonKredit && params.plafonKredit !== 0) {
                params.plafonKredit = null;
              } else {
                params.plafonKredit = params.plafonKredit;
              }
              if (!params.plafonKreditLama && params.plafonKreditLama !== 0) {
                params.plafonKreditLama = null;
              } else {
                params.plafonKreditLama = params.plafonKreditLama;
              }
              if (!params.typeTujuanKredit) {
                params.typeTujuanKredit = null;
              } else {
                params.typeTujuanKredit = "'" + params.typeTujuanKredit + "'";
              }
              if (!params.sukuBunga) {
                params.sukuBunga = null;
              } else {
                params.sukuBunga = "'" + params.sukuBunga + "'";
              }
              if (!params.kodeSektor) {
                params.kodeSektor = null;
              } else {
                params.kodeSektor = "'" + params.kodeSektor + "'";
              }
              if (!params.coverage) {
                params.coverage = null;
              } else {
                params.coverage = params.coverage;
              }
              if (!params.statusKolektibilitas) {
                params.statusKolektibilitas = null;
              } else {
                params.statusKolektibilitas =
                  "'" + params.statusKolektibilitas + "'";
              }
              if (!params.loanType) {
                params.loanType = null;
              } else {
                params.loanType = "'" + params.loanType + "'";
              }
              if (!params.statusAkad) {
                params.statusAkad = null;
              } else {
                params.statusAkad = "'" + params.statusAkad + "'";
              }
              if (!params.noSertifikatLama) {
                params.noSertifikatLama = null;
              } else {
                params.noSertifikatLama = "'" + params.noSertifikatLama + "'";
              }
              if (!keterangan) {
                keterangan = null;
              } else {
                keterangan = "'" + keterangan + "'";
              }

              if (!params.createdBy) {
                params.createdBy = "'H2H API Direct'";
              } else {
                params.createdBy = "'" + params.createdBy + "'";
              }
              kode_cabang_askrindo_ret =
                "'" + kode_bank[0].kode_cabang_askrindo + "'";
              no_pks = no_pks[0].no_pks;
              insert = await model.sequelize.query(
                "SET TIMEZONE='Asia/Bangkok'; INSERT INTO public.t_penjaminan(kode_bank, transaction_id_bank, kode_cabang_bank, nama_cabang_bank, kode_cabang_askrindo, no_rekening_pinjaman, no_rek_lama, cif, no_perjanjian_kredit, no_pk_lama, tgl_pk, tgl_pk_lama, tgl_awal_pertanggungan, tgl_akhir_pertanggungan, jangka_waktu, nama_debitur, alamat_debitur, kode_pos, tempat_lahir, tgl_lahir, jenis_kelamin, no_telepon, no_hp_debitur, pendidikan, marital_status, jenis_identitas, no_id_debitur, npwp, no_ijin_usaha, tgl_mulai_usaha, modal_usaha, jumlah_tenaga_kerja, omset_usaha, kekayaan_bersih, jenis_pekerjaan, status_kepegawaian, jenis_kredit, plafond_kredit, bakidebet, nilai_pertanggungan, type_tujuan_kredit, suku_bunga_kredit, currency, sektor_ekonomi, coverage, kolektibilitas_kredit, loan_type, mekanisme_penyaluran, is_cac, sumber, no_sertifikat, tgl_sertifikat, tgl_rekam_sertifikat, rate, total_ijp, status_penjaminan_id, jenis_pengajuan, no_sertifikat_sebelumnya, no_pks, keterangan, version, created_by, created_date, modified_by, modified_date, ket_validasi_ejamku, validasi_ejamku, status_sikp, jenis_pen)VALUES(" +
                  params.kodeBank +
                  ", " +
                  params.nomorAplikasi +
                  ", " +
                  params.kodeUker +
                  ", " +
                  params.namaUker +
                  ", " +
                  kode_cabang_askrindo_ret +
                  ", " +
                  params.noRekening +
                  ", " +
                  params.noRekLama +
                  ", " +
                  params.cif +
                  ", " +
                  params.noPk +
                  ", " +
                  params.noPkLama +
                  ", " +
                  params.tglPK +
                  ", " +
                  params.tglPkLama +
                  ", " +
                  params.tanggalAwal +
                  ", " +
                  params.tanggalAkhir +
                  ", " +
                  params.jangkaWaktu +
                  ", :nama_debitur, :alamat_debitur, " +
                  params.kodePos +
                  ", " +
                  params.tempatLahir +
                  ", " +
                  params.tanggalLahir +
                  ", " +
                  params.jenisKelamin +
                  ", " +
                  params.noTelepon +
                  ", " +
                  params.noHp +
                  ", " +
                  params.pendidikan +
                  ", " +
                  params.maritalStatus +
                  ", " +
                  params.jenisIdentitas +
                  ", " +
                  params.noIdentitas +
                  ", " +
                  params.npwp +
                  ", " +
                  params.noIjinUsaha +
                  ", " +
                  params.tglMulaiUsaha +
                  ", " +
                  params.modalUsaha +
                  ", " +
                  params.jumlahTenagaKerja +
                  ", " +
                  params.omsetUsaha +
                  ", " +
                  params.kekayaanBersih +
                  ", " +
                  params.kodePekerjaan +
                  ", " +
                  params.statusKepegawaian +
                  ", " +
                  params.jenisKredit +
                  ", " +
                  params.plafonKredit +
                  ", " +
                  params.plafonKreditLama +
                  ", " +
                  (params.plafonKredit * params.coverage) / 100 +
                  ", " +
                  params.typeTujuanKredit +
                  ", " +
                  params.sukuBunga +
                  ", 'IDR', " +
                  params.kodeSektor +
                  ", " +
                  params.coverage +
                  ", " +
                  params.statusKolektibilitas +
                  ", " +
                  params.loanType +
                  ", '1', " +
                  is_cac +
                  ", :sumber, NULL, NULL, NULL, 0, 0, :status_penjaminan_id, " +
                  params.statusAkad +
                  ", " +
                  params.noSertifikatLama +
                  ", '" +
                  no_pks +
                  "', NULL, 1, " +
                  params.createdBy +
                  ", now(), NULL, NULL, :ket_validasi_ejamku, :validasi_ejamku, :status_sikp, 'GEN2') returning id_penjaminan, kode_cabang_askrindo;",
                {
                  replacements: {
                    status_penjaminan_id: statuspenjaminan,
                    sumber: sumber,
                    nama_debitur: params.namaDebitur,
                    alamat_debitur: params.alamatDebitur,
                    validasi_ejamku: validasi_ejamku,
                    ket_validasi_ejamku: ket_validasi_ejamku,
                    status_sikp: status_sikp,
                  },
                  type: model.sequelize.QueryTypes.INSERT,
                  quoteIdentifiers: true,
                  transaction: t,
                }
              );

              params.listOutstanding.forEach(async (obj, i) => {
                if (!obj.outstanding && obj.outstanding !== 0) {
                  obj.outstanding = null;
                } else {
                  obj.outstanding = obj.outstanding;
                }
                if (!obj.angsuranPokok && obj.angsuranPokok !== 0) {
                  obj.angsuranPokok = null;
                } else {
                  obj.angsuranPokok = obj.angsuranPokok;
                }
                if (!obj.angsuranBunga && obj.angsuranBunga !== 0) {
                  obj.angsuranBunga = null;
                } else {
                  obj.angsuranBunga = obj.angsuranBunga;
                }
                if (!obj.angsuranDenda && obj.angsuranDenda !== 0) {
                  obj.angsuranDenda = null;
                } else {
                  obj.angsuranDenda = obj.angsuranDenda;
                }

                outstanding = await model.sequelize.query(
                  "INSERT INTO public.t_outstanding_teoritis(id_penjaminan, tanggal_saldo, outstanding, angsuran_pokok, angsuran_bunga, angsuran_denda, version, created_by, created_date, modified_by, modified_date)VALUES(:id_penjaminan, '" +
                    obj.tanggalSaldo +
                    "', " +
                    obj.outstanding +
                    ", " +
                    obj.angsuranPokok +
                    ", " +
                    obj.angsuranBunga +
                    ", " +
                    obj.angsuranDenda +
                    ", 1, " +
                    params.createdBy +
                    ", now(), NULL, NULL)",
                  {
                    replacements: { id_penjaminan: insert[0][0].id_penjaminan },
                    type: model.sequelize.QueryTypes.INSERT,
                    quoteIdentifiers: true,
                    transaction: t,
                  }
                );
              });

              params.listAgunan.forEach(async (object, i) => {
                if (params.listAgunan) {
                  if (!object.jenisAgunan) {
                    object.jenisAgunan = null;
                  } else {
                    object.jenisAgunan = "'" + object.jenisAgunan + "'";
                  }
                  if (!object.jenisPengikatan) {
                    object.jenisPengikatan = null;
                  } else {
                    object.jenisPengikatan = "'" + object.jenisPengikatan + "'";
                  }
                  if (!object.noAgunan) {
                    object.noAgunan = null;
                  } else {
                    object.noAgunan = "'" + object.noAgunan + "'";
                  }
                  if (!object.lokasiAgunan) {
                    object.lokasiAgunan = null;
                  } else {
                    object.lokasiAgunan = object.lokasiAgunan;
                  }
                  if (!object.pemilikAgunan) {
                    object.pemilikAgunan = null;
                  } else {
                    object.pemilikAgunan = object.pemilikAgunan;
                  }
                  if (!object.npw && object.npw !== 0) {
                    object.npw = null;
                  } else {
                    object.npw = object.npw;
                  }
                  if (!object.nl && object.nl !== 0) {
                    object.nl = null;
                  } else {
                    object.nl = object.nl;
                  }
                  if (!object.pnpw && object.pnpw !== 0) {
                    object.pnpw = null;
                  } else {
                    object.pnpw = object.pnpw;
                  }
                  if (!object.pnl && object.pnl !== 0) {
                    object.pnl = null;
                  } else {
                    object.pnl = object.pnl;
                  }
                  if (!object.nilaiAgunan && object.nilaiAgunan !== 0) {
                    object.nilaiAgunan = null;
                  } else {
                    object.nilaiAgunan = object.nilaiAgunan;
                  }
                  agunan = await model.sequelize.query(
                    "INSERT INTO public.t_penjaminan_agunan(id_penjaminan, jenis_agunan, jenis_pengikatan, no_agunan, lokasi_agunan, pemilik_agunan, npw, nl, pnpw, pnl, version, created_by, created_date, modified_by, modified_date, nilai_agunan)VALUES(:id_penjaminan, " +
                      object.jenisAgunan +
                      ", " +
                      object.jenisPengikatan +
                      ", " +
                      object.noAgunan +
                      ", :lokasi_agunan, :pemilik_agunan, " +
                      object.npw +
                      ", " +
                      object.nl +
                      ", " +
                      object.pnpw +
                      ", " +
                      object.pnl +
                      ", 1, " +
                      params.createdBy +
                      ", now(), NULL, NULL, " +
                      object.nilaiAgunan +
                      ")",
                    {
                      replacements: {
                        id_penjaminan: insert[0][0].id_penjaminan,
                        pemilik_agunan: object.pemilikAgunan,
                        lokasi_agunan: object.lokasiAgunan,
                      },
                      type: model.sequelize.QueryTypes.INSERT,
                      quoteIdentifiers: true,
                      transaction: t,
                    }
                  );
                }
              });

              var tahun_ke = params.jangkaWaktu;
              var floor = new Date(
                dateFormat(
                  new Date(
                    params.tanggalAwal.substring(1, 5),
                    params.tanggalAwal.substring(5, 7) - 1,
                    params.tanggalAwal.substring(7, 9)
                  ),
                  "yyyy-mm-dd"
                )
              );
              var floor_plus = new Date(
                dateFormat(
                  new Date(
                    +params.tanggalAwal.substring(1, 5) + 1,
                    params.tanggalAwal.substring(5, 7) - 1,
                    params.tanggalAwal.substring(7, 9)
                  ),
                  "yyyy-mm-dd"
                )
              );
              var ceil = new Date(
                dateFormat(
                  new Date(
                    params.tanggalAkhir.substring(1, 5),
                    params.tanggalAkhir.substring(5, 7) - 1,
                    params.tanggalAkhir.substring(7, 9)
                  ),
                  "yyyy-mm-dd"
                )
              );
              var diff_floor_inst = new DateDiff(floor_plus, floor);
              var max_pert_inst = new DateDiff(ceil, floor);
              var jangka_waktu_hari = max_pert_inst.days();
              var diff_floor = diff_floor_inst.days();
              var max_pert = max_pert_inst.days();
              var premi = [];
              var cadangan = [];
              var jml_hari = [];
              var jml_hari_tahunan = [];
              var stop = true;
              var jatuh_tempo = dateFormat(new Date(), "dd");
              if (jatuh_tempo >= 15) {
                if (padWithZeroes(+dateFormat(new Date(), "mm") + 1, 2) > 12) {
                  jatuh_tempo =
                    +dateFormat(new Date(), "yyyy") +
                    1 +
                    padWithZeroes(+dateFormat(new Date(), "mm") + 1 - 12, 2) +
                    "15";
                } else {
                  jatuh_tempo =
                    dateFormat(new Date(), "yyyy") +
                    padWithZeroes(+dateFormat(new Date(), "mm") + 1, 2) +
                    "15";
                }
              } else {
                jatuh_tempo = dateFormat(new Date(), "yyyymm") + "15";
              }
              while (stop) {
                if (max_pert > diff_floor) {
                  max_pert = max_pert - diff_floor;
                  floor = new Date(dateFormat(new Date(+(floor_plus.getFullYear()), (floor_plus.getMonth()), floor_plus.getDate()), "yyyy-mm-dd" ));
                  console.log(floor);
                  floor_plus = new Date(dateFormat(new Date(+(floor.getFullYear())+1, (floor.getMonth()), floor.getDate()), "yyyy-mm-dd" ));             
              
                  diff_floor_inst = new DateDiff(floor_plus, floor);
                  diff_floor = diff_floor_inst.days();
                  ijp = 0.0456 * params.plafonKredit * 1;
                  cadangan_calc = 0.008 * params.plafonKredit * 1;
                  premi.push(Math.round(ijp));
                  jml_hari_tahunan.push(diff_floor);
                } else {
                  
                  ijp = 0.0456 * params.plafonKredit * (max_pert / diff_floor);
                  cadangan_calc =
                    0.008 * params.plafonKredit * (max_pert / diff_floor);
                  premi.push(Math.round(ijp));
                  cadangan.push(Math.round(cadangan_calc));
                  stop = false;
                }
              }
              update_total_ijp = await model.sequelize.query(
                "UPDATE t_penjaminan SET jangka_waktu_hari = :jangka_waktu_hari, total_ijp = :total_ijp WHERE id_penjaminan = :id_penjaminan",
                {
                  replacements: {
                    total_ijp: premi.reduce((a, b) => a + b, 0),
                    jangka_waktu_hari: jangka_waktu_hari,
                    id_penjaminan: insert[0][0].id_penjaminan,
                  },
                  type: model.sequelize.QueryTypes.SELECT,
                  quoteIdentifiers: true,
                  transaction: t,
                }
              );

              premi.forEach(async (val, i) => {
                ijp = await model.sequelize.query(
                  "INSERT INTO public.t_penjaminan_ijp(id_penjaminan, tahun_ke, tgl_premi, premi, jatuh_tempo, premi_dibayar, status_bayar, no_bukti_bayar, tgl_bayar, version, created_by, created_date, modified_by, modified_date, cadangan, jml_hari, jml_hari_tahunan)VALUES(:id_penjaminan, :tahun_ke, (CURRENT_DATE + INTERVAL '" +
                    (tahun_ke - 1) +
                    " year'), :premi, (date(:jatuh_tempo) + INTERVAL '" +
                    (tahun_ke - 1) +
                    " year'), 0, false, NULL, NULL, 1, " +
                    params.createdBy +
                    ", now(), NULL, NULL, :cadangan, :jml_hari, :jml_hari_tahunan);",
                  {
                    replacements: {
                      id_penjaminan: insert[0][0].id_penjaminan,
                      tahun_ke: i + 1,
                      premi: val,
                      cadangan: cadangan[i],
                      jatuh_tempo: jatuh_tempo,
                      jml_hari: 0,
                      jml_hari_tahunan: 0,
                    },
                    type: model.sequelize.QueryTypes.INSERT,
                    quoteIdentifiers: true,
                    transaction: t,
                  }
                );
              });

              let sertifikat;

              kode_bank = await model.sequelize
                .query(
                  "select * from m_mapping_bank where kode_bank = " +
                    "" +
                    params.kodeBank +
                    "" +
                    "and kode_cabang_bank =" +
                    "" +
                    params.kodeUker +
                    "",
                  {
                    // replacements: {id: carIds},
                    type: model.sequelize.QueryTypes.SELECT,
                    quoteIdentifiers: true,
                    transaction: t,
                  }
                )
                .then(async function (kode_bank) {
                  m_cabang = await model.sequelize
                    .query(
                      "select * from m_cabang where kode_cabang = " +
                        "'" +
                        kode_bank[0].kode_cabang_askrindo +
                        "' and group_id = 2",
                      {
                        // replacements: {id: carIds},
                        type: model.sequelize.QueryTypes.SELECT,
                        quoteIdentifiers: true,
                        transaction: t,
                      }
                    )
                    .then(async function (m_cabang) {
                      console.log(m_cabang);
                      counter = await model.sequelize
                        .query(
                          "select counter from t_gen_number where toc = '1401' and kode_cabang = " +
                            "'" +
                            m_cabang[0].kode_cabang_acs +
                            "' and tahun = " +
                            "'" +
                            dateFormat(new Date(), "yyyy") +
                            "'",
                          {
                            // replacements: {id: carIds},
                            type: model.sequelize.QueryTypes.SELECT,
                            quoteIdentifiers: true,
                            transaction: t,
                          }
                        )
                        .then(async function (counter) {
                          var counter_temp;
                          if (counter.length > 0) {
                            counter_temp = counter[0].counter;
                            counter = await model.sequelize
                              .query(
                                "UPDATE t_gen_number SET counter = " +
                                  (+counter_temp + 1) +
                                  " WHERE toc='1401' and kode_cabang='" +
                                  m_cabang[0].kode_cabang_acs +
                                  "' and tahun='" +
                                  dateFormat(new Date(), "yyyy") +
                                  "'",
                                {
                                  // replacements: {id: carIds},
                                  type: model.sequelize.QueryTypes.SELECT,
                                  quoteIdentifiers: true,
                                  transaction: t,
                                }
                              )
                              .then(function (params) {
                                var toc = "1401";
                                var kode_cabang_askrindo =
                                  m_cabang[0].kode_cabang_acs; //parameter
                                var tahun = dateFormat(new Date(), "yy");
                                var counter_fix = padWithZeroes(
                                  +counter_temp + 1,
                                  8
                                ); //parameter dalam kurung
                                // var cek_digit = (toc*9 + kode_cabang_askrindo*4 + tahun + counter_fix*3)%9
                                sertifikat =
                                  "0" +
                                  kode_cabang_askrindo +
                                  "." +
                                  toc +
                                  "." +
                                  tahun +
                                  "9" +
                                  counter_fix +
                                  "/000";
                              });
                          } else {
                            counter_temp = 0;
                            counter = await model.sequelize
                              .query(
                                "INSERT INTO t_gen_number(toc, kode_cabang, tahun, counter)VALUES('1401', '" +
                                  m_cabang[0].kode_cabang_acs +
                                  "', '" +
                                  dateFormat(new Date(), "yyyy") +
                                  "', 1)",
                                {
                                  // replacements: {id: carIds},
                                  type: model.sequelize.QueryTypes.SELECT,
                                  quoteIdentifiers: true,
                                  transaction: t,
                                }
                              )
                              .then(function (params) {
                                var toc = "1401";
                                var kode_cabang_askrindo =
                                  m_cabang[0].kode_cabang_acs; //parameter
                                var tahun = dateFormat(new Date(), "yy");
                                var counter_fix = padWithZeroes(
                                  +counter_temp + 1,
                                  8
                                ); //parameter dalam kurung
                                // var cek_digit = (toc*9 + kode_cabang_askrindo*4 + tahun + counter_fix*3)%9
                                sertifikat =
                                  "0" +
                                  kode_cabang_askrindo +
                                  "." +
                                  toc +
                                  "." +
                                  tahun +
                                  "9" +
                                  counter_fix +
                                  "/000";
                              });
                          }
                        });
                    });
                });

              update_sertifikat = await model.sequelize.query(
                "UPDATE t_penjaminan SET status_penjaminan_id = :status, keterangan = :keterangan, no_sertifikat = :no_sertifikat, tgl_sertifikat = :tgl_rekam, tgl_rekam_sertifikat = :tgl_rekam WHERE id_penjaminan = :id_penjaminan and status_penjaminan_id != 4",
                {
                  replacements: {
                    id_penjaminan: insert[0][0].id_penjaminan,
                    keterangan: "SUCCESS",
                    status: 3,
                    no_sertifikat: sertifikat,
                    tgl_rekam: dateFormat(new Date(), "yyyymmdd"),
                  },
                  type: model.sequelize.QueryTypes.SELECT,
                  quoteIdentifiers: true,
                  transaction: t,
                }
              );
              ret = {
                status: true,
                message: "Request Success",
                transactionID: padWithZeroes(insert[0][0].id_penjaminan, 9),
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                data: {
                  statusSertifikat: "Terbit",
                  noTransaksiBank: params.nomorAplikasi,
                  noRekening: params.noRekening,
                  noSertifikat: sertifikat,
                  tglSertifikat: dateFormat(new Date(), "yyyymmdd"),
                  tglRekam: dateFormat(new Date(), "yyyymmdd"),
                  linkSertifikat:
                    "http://10.100.10.30:9200/akseptasi?no_polis=" +
                    sertifikat +
                    "&status=3",
                  cabangRekanan: insert[0][0].kode_cabang_askrindo,
                },
              };
            });
        });

      return ret;
    });
  } catch (e) {
    console.log(e);
    throw new Error(e);
  }
};

exports.postAkseptasiStaging = function name(req, res) {
  var Validator = require("jsonschema").Validator;
  var v = new Validator();
  var akseptasi_validation;

  bod = req.body;
  console.log(JSON.stringify(bod));
  var tglpklama;
  if (bod.tglPkLama === "") {
    tglpklama = 0;
  } else {
    tglpklama = 8;
  }
  var akseptasi_validation;
  var npwp_custom;
  var ket_validasi_ejamku;
  var validasi_ejamku;
  if (bod.plafonKredit <= 50000000) {
    npwp_custom = { type: "string", maxLength: 40 };
  } else {
    npwp_custom = { type: "string", minLength: 1, maxLength: 40 };
  }
  if (bod.plafonKredit <= 1000000000) {
    var akseptasi_validation = {
      id: "/akseptasi",
      type: "object",
      disableFormat: false,
      minProperties: 1,
      properties: {
        kodeBank: { type: "string", minLength: 1, maxLength: 8 },
        nomorAplikasi: { type: "string", minLength: 1, maxLength: 50 },
        kodeUker: { type: "string", minLength: 1, maxLength: 8 },
        namaUker: { type: "string", maxLength: 255 },
        noRekening: { type: "string", minLength: 1, maxLength: 30 },
        noRekLama: { type: "string", maxLength: 30 },
        cif: { type: "string", maxLength: 50 },
        noPk: { type: "string", minLength: 1, maxLength: 50 },
        noPkLama: { type: "string", maxLength: 50 },
        tglPK: { type: "string", minLength: 8, maxLength: 8 },
        tglPkLama: { type: "string", minLength: tglpklama, maxLength: 8 },
        tanggalAwal: { type: "string", minLength: 8, maxLength: 8 },
        tanggalAkhir: { type: "string", minLength: 8, maxLength: 8 },
        jangkaWaktu: { type: "number", minimum: 0 },
        namaDebitur: { type: "string", minLength: 1, maxLength: 255 },
        alamatDebitur: { type: "string", minLength: 1, maxLength: 512 },
        kodePos: { type: "string", maxLength: 6 },
        tempatLahir: { type: "string", maxLength: 100 },
        tanggalLahir: { type: "string", minLength: 8, maxLength: 8 },
        jenisKelamin: { type: "number", minimum: 1 },
        noTelepon: { type: "string", maxLength: 20 },
        noHp: { type: "string", minLength: 1, maxLength: 20 },
        pendidikan: { type: "number", minimum: 1 },
        maritalStatus: { type: "number", minimum: 0 },
        sumber: { type: "number" },
        jenisIdentitas: { type: "string", maxLength: 15 },
        noIdentitas: { type: "string", minLength: 1, maxLength: 40 },
        npwp: npwp_custom,
        noIjinUsaha: { type: "string", minLength: 1, maxLength: 100 },
        tglMulaiUsaha: { type: "string", minLength: 8, maxLength: 8 },
        modalUsaha: { type: "number", minimum: 0 },
        jumlahTenagaKerja: { type: "number", minimum: 1 },
        omsetUsaha: { type: "number", minimum: 0 },
        kekayaanBersih: { type: "number", minimum: 1 },
        kodePekerjaan: { type: "number", minimum: 1 },
        statusKepegawaian: { type: "string", maxLength: 1 },
        jenisKredit: { type: "string", minLength: 1, maxLength: 15 },
        plafonKredit: { type: "number", minimum: 1 },
        plafonKreditLama: { type: "number" },
        typeTujuanKredit: { type: "string", maxLength: 1 },
        sukuBunga: { type: "numeric", minimum: 1 },
        kodeSektor: { type: "string", minLength: 1, maxLength: 10 },
        coverage: { type: "number", minimum: 0 },
        statusKolektibilitas: { type: "string", minLength: 1, maxLength: 20 },
        loanType: { type: "string", maxLength: 20 },
        statusAkad: { type: "string", minLength: 1, maxLength: 2 },
        noSertifikatLama: { type: "string", maxLength: 25 },
        createdBy: { type: "string", maxLength: 20 },
        listAgunan: {
          type: "array",
          items: {
            properties: {
              jenisAgunan: { type: "string", minLength: 1, maxLength: 20 },
              jenisPengikatan: { type: "string", minLength: 1, maxLength: 20 },
              lokasiAgunan: { type: "string", maxLength: 512 },
              noAgunan: { type: "string", maxLength: 50 },
              nilaiAgunan: { type: "number", minimum: 0 },
              pemilikAgunan: { type: "string", maxLength: 512 },
              npw: { type: "number" },
              nl: { type: "number" },
              pnpw: { type: "number" },
              pnl: { type: "number" },
            },
            required: ["jenisAgunan", "jenisPengikatan", "nilaiAgunan"],
            additionalProperties: false,
          },
        },
        listOutstanding: {
          type: "array",
          minItems: 1,
          items: {
            properties: {
              tanggalSaldo: { type: "string", minLength: 8, maxLength: 8 },
              outstanding: { type: "number", minimum: 0 },
              angsuranPokok: { type: "number", minimum: 0 },
              angsuranBunga: { type: "number", minimum: 0 },
              angsuranDenda: { type: "number", minimum: 0 },
            },
            required: [
              "tanggalSaldo",
              "outstanding",
              "angsuranPokok",
              "angsuranBunga",
              "angsuranDenda",
            ],
            additionalProperties: false,
          },
        },
      },
      required: [
        "kodeBank",
        "nomorAplikasi",
        "kodeUker",
        "noRekening",
        "noPk",
        "tglPK",
        "tanggalAwal",
        "tanggalAkhir",
        "jangkaWaktu",
        "namaDebitur",
        "alamatDebitur",
        "tanggalLahir",
        "jenisKelamin",
        "noHp",
        "pendidikan",
        "maritalStatus",
        "noIdentitas",
        "npwp",
        "noIjinUsaha",
        "tglMulaiUsaha",
        "jumlahTenagaKerja",
        "kekayaanBersih",
        "kodePekerjaan",
        "jenisKredit",
        "plafonKredit",
        "sukuBunga",
        "kodeSektor",
        "coverage",
        "statusKolektibilitas",
        "statusAkad",
        "listOutstanding",
      ],
      additionalProperties: false,
    };
  } else if (bod.plafonKredit > 1000000000 && bod.plafonKredit <= 10000000000) {
    var akseptasi_validation = {
      id: "/akseptasi",
      type: "object",
      disableFormat: false,
      minProperties: 1,
      properties: {
        kodeBank: { type: "string", minLength: 1, maxLength: 8 },
        nomorAplikasi: { type: "string", minLength: 1, maxLength: 50 },
        kodeUker: { type: "string", minLength: 1, maxLength: 8 },
        namaUker: { type: "string", maxLength: 255 },
        noRekening: { type: "string", maxLength: 30 },
        noRekLama: { type: "string", maxLength: 30 },
        cif: { type: "string", maxLength: 50 },
        noPk: { type: "string", maxLength: 50 },
        noPkLama: { type: "string", maxLength: 50 },
        tglPK: { type: "string", maxLength: 8 },
        tglPkLama: { type: "string", minLength: tglpklama, maxLength: 8 },
        tanggalAwal: { type: "string", maxLength: 8 },
        tanggalAkhir: { type: "string", maxLength: 8 },
        jangkaWaktu: { type: "number" },
        namaDebitur: { type: "string", minLength: 1, maxLength: 255 },
        alamatDebitur: { type: "string", minLength: 1, maxLength: 512 },
        kodePos: { type: "string", maxLength: 6 },
        tempatLahir: { type: "string", maxLength: 100 },
        tanggalLahir: { type: "string", minLength: 8, maxLength: 8 },
        jenisKelamin: { type: "number", minimum: 1 },
        noTelepon: { type: "string", maxLength: 20 },
        noHp: { type: "string", minLength: 1, maxLength: 20 },
        pendidikan: { type: "number", minimum: 1 },
        maritalStatus: { type: "number", minimum: 0 },
        sumber: { type: "number" },
        jenisIdentitas: { type: "string", maxLength: 15 },
        noIdentitas: { type: "string", minLength: 1, maxLength: 40 },
        npwp: npwp_custom,
        noIjinUsaha: { type: "string", minLength: 1, maxLength: 100 },
        tglMulaiUsaha: { type: "string", minLength: 8, maxLength: 8 },
        modalUsaha: { type: "number", minimum: 0 },
        jumlahTenagaKerja: { type: "number", minimum: 1 },
        omsetUsaha: { type: "number", minimum: 0 },
        kekayaanBersih: { type: "number", minimum: 1 },
        kodePekerjaan: { type: "number", minimum: 1 },
        statusKepegawaian: { type: "string", maxLength: 1 },
        jenisKredit: { type: "string", minLength: 1, maxLength: 15 },
        plafonKredit: { type: "number", minimum: 1 },
        plafonKreditLama: { type: "number" },
        typeTujuanKredit: { type: "string", maxLength: 1 },
        sukuBunga: { type: "numeric", minimum: 0 },
        kodeSektor: { type: "string", minLength: 1, maxLength: 10 },
        coverage: { type: "number", minimum: 0 },
        statusKolektibilitas: { type: "string", minLength: 1, maxLength: 20 },
        loanType: { type: "string", maxLength: 20 },
        statusAkad: { type: "string", minLength: 1, maxLength: 2 },
        noSertifikatLama: { type: "string", maxLength: 25 },
        createdBy: { type: "string", maxLength: 20 },
        listAgunan: {
          type: "array",
          minItems: 1,
          items: {
            properties: {
              jenisAgunan: { type: "string", minLength: 1, maxLength: 20 },
              jenisPengikatan: { type: "string", minLength: 1, maxLength: 20 },
              lokasiAgunan: { type: "string", maxLength: 512 },
              noAgunan: { type: "string", maxLength: 50 },
              nilaiAgunan: { type: "number", minimum: 0 },
              pemilikAgunan: { type: "string", maxLength: 512 },
              npw: { type: "number" },
              nl: { type: "number" },
              pnpw: { type: "number" },
              pnl: { type: "number" },
            },
            required: ["jenisAgunan", "jenisPengikatan", "nilaiAgunan"],
            additionalProperties: false,
          },
        },
        listOutstanding: {
          type: "array",
          items: {
            properties: {
              tanggalSaldo: { type: "string", minLength: 8, maxLength: 8 },
              outstanding: { type: "number", minimum: 0 },
              angsuranPokok: { type: "number", minimum: 0 },
              angsuranBunga: { type: "number", minimum: 0 },
              angsuranDenda: { type: "number", minimum: 0 },
            },
            required: [
              "tanggalSaldo",
              "outstanding",
              "angsuranPokok",
              "angsuranBunga",
              "angsuranDenda",
            ],
            additionalProperties: false,
          },
        },
      },
      required: [
        "kodeBank",
        "nomorAplikasi",
        "kodeUker",
        "namaDebitur",
        "alamatDebitur",
        "tanggalLahir",
        "jenisKelamin",
        "noHp",
        "pendidikan",
        "maritalStatus",
        "noIdentitas",
        "npwp",
        "noIjinUsaha",
        "tglMulaiUsaha",
        "modalUsaha",
        "jumlahTenagaKerja",
        "omsetUsaha",
        "kekayaanBersih",
        "kodePekerjaan",
        "jenisKredit",
        "plafonKredit",
        "sukuBunga",
        "kodeSektor",
        "coverage",
        "statusKolektibilitas",
        "statusAkad",
        "listAgunan",
      ],
      additionalProperties: false,
    };
  } else {
    var akseptasi_validation = {
      id: "/akseptasi",
      type: "object",
      disableFormat: false,
      minProperties: 1,
      properties: {
        kodeBank: { type: "string", minLength: 1, maxLength: 8 },
        nomorAplikasi: { type: "string", minLength: 1, maxLength: 50 },
        kodeUker: { type: "string", minLength: 1, maxLength: 8 },
        namaUker: { type: "string", maxLength: 255 },
        noRekening: { type: "string", minLength: 1, maxLength: 30 },
        noRekLama: { type: "string", maxLength: 30 },
        cif: { type: "string", maxLength: 50 },
        noPk: { type: "string", minLength: 1, maxLength: 50 },
        noPkLama: { type: "string", minLength: tglpklama, maxLength: 50 },
        tglPK: { type: "string", minLength: 8, maxLength: 8 },
        tglPkLama: { type: "string", minLength: tglpklama, maxLength: 8 },
        tanggalAwal: { type: "string", minLength: 8, maxLength: 8 },
        tanggalAkhir: { type: "string", minLength: 8, maxLength: 8 },
        jangkaWaktu: { type: "number", minimum: 0 },
        namaDebitur: { type: "string", minLength: 1, maxLength: 255 },
        alamatDebitur: { type: "string", minLength: 1, maxLength: 512 },
        kodePos: { type: "string", maxLength: 6 },
        tempatLahir: { type: "string", maxLength: 100 },
        tanggalLahir: { type: "string", minLength: 8, maxLength: 8 },
        jenisKelamin: { type: "number", minimum: 1 },
        noTelepon: { type: "string", maxLength: 20 },
        noHp: { type: "string", minLength: 1, maxLength: 20 },
        pendidikan: { type: "number", minimum: 1 },
        maritalStatus: { type: "number", minimum: 0 },
        sumber: { type: "number" },
        jenisIdentitas: { type: "string", maxLength: 15 },
        noIdentitas: { type: "string", minLength: 1, maxLength: 40 },
        npwp: npwp_custom,
        noIjinUsaha: { type: "string", minLength: 1, maxLength: 100 },
        tglMulaiUsaha: { type: "string", minLength: 8, maxLength: 8 },
        modalUsaha: { type: "number", minimum: 0 },
        jumlahTenagaKerja: { type: "number", minimum: 1 },
        omsetUsaha: { type: "number", minimum: 0 },
        kekayaanBersih: { type: "number", minimum: 1 },
        kodePekerjaan: { type: "number", minimum: 1 },
        statusKepegawaian: { type: "string", maxLength: 1 },
        jenisKredit: { type: "string", minLength: 1, maxLength: 15 },
        plafonKredit: { type: "number", minimum: 1 },
        plafonKreditLama: { type: "number" },
        typeTujuanKredit: { type: "string", maxLength: 1 },
        sukuBunga: { type: "numeric", minimum: 0 },
        kodeSektor: { type: "string", minLength: 1, maxLength: 10 },
        coverage: { type: "number", minimum: 0 },
        statusKolektibilitas: { type: "string", minLength: 1, maxLength: 20 },
        loanType: { type: "string", maxLength: 20 },
        statusAkad: { type: "string", minLength: 1, maxLength: 2 },
        noSertifikatLama: { type: "string", maxLength: 25 },
        createdBy: { type: "string", maxLength: 20 },
        listAgunan: {
          type: "array",
          items: {
            properties: {
              jenisAgunan: { type: "string", minLength: 1, maxLength: 20 },
              jenisPengikatan: { type: "string", minLength: 1, maxLength: 20 },
              lokasiAgunan: { type: "string", maxLength: 512 },
              noAgunan: { type: "string", maxLength: 50 },
              nilaiAgunan: { type: "number", minimum: 0 },
              pemilikAgunan: { type: "string", maxLength: 512 },
              npw: { type: "number" },
              nl: { type: "number" },
              pnpw: { type: "number" },
              pnl: { type: "number" },
            },
            required: ["jenisAgunan", "jenisPengikatan", "nilaiAgunan"],
            additionalProperties: false,
          },
        },
        listOutstanding: {
          type: "array",
          minItems: 1,
          items: {
            properties: {
              tanggalSaldo: { type: "string", minLength: 0, maxLength: 8 },
              outstanding: { type: "number", minimum: 0 },
              angsuranPokok: { type: "number", minimum: 0 },
              angsuranBunga: { type: "number", minimum: 0 },
              angsuranDenda: { type: "number", minimum: 0 },
            },
            required: [
              "tanggalSaldo",
              "outstanding",
              "angsuranPokok",
              "angsuranBunga",
              "angsuranDenda",
            ],
            additionalProperties: false,
          },
        },
      },
      required: [
        "kodeBank",
        "nomorAplikasi",
        "kodeUker",
        "noRekening",
        "noPk",
        "tglPK",
        "tanggalAwal",
        "tanggalAkhir",
        "jangkaWaktu",
        "namaDebitur",
        "alamatDebitur",
        "tanggalLahir",
        "jenisKelamin",
        "noHp",
        "pendidikan",
        "maritalStatus",
        "noIdentitas",
        "npwp",
        "noIjinUsaha",
        "tglMulaiUsaha",
        "modalUsaha",
        "jumlahTenagaKerja",
        "omsetUsaha",
        "kekayaanBersih",
        "kodePekerjaan",
        "jenisKredit",
        "plafonKredit",
        "sukuBunga",
        "kodeSektor",
        "coverage",
        "statusKolektibilitas",
        "statusAkad",
        "listOutstanding",
      ],
      additionalProperties: false,
    };
  }

  var results = v.validate(bod, akseptasi_validation);
  if (results.errors.length > 0) {
    var json_ori = JSON.stringify(bod).replace(/""|" "/g, "null");
    var json_fix = JSON.parse(json_ori);
    var messages = [];
    console.log(results.errors);
    console.log(json_fix);
    getKodeCabangAskrindo(json_fix.kodeBank, json_fix.kodeUker).then(function (
      params
    ) {
      if (params == "") {
        for (i = 0; i < results.errors.length; i++) {
          console.log(results.errors[i].name);
          if (results.errors[i].name === "additionalProperties") {
            messages.push({
              status: false,
              errorCode: "0102",
              errorType: "JSON Structure Error",
              errorMessage:
                "Field JSON " + results.errors[i].argument + " Not Allowed",
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              cabangRekanan: "Not Found",
            });
          } else if (results.errors[i].name !== "additionalProperties") {
            if (results.errors[i].name === "type") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "Datatype of " +
                  results.errors[i].property.split("instance.").join("") +
                  " must be " +
                  results.errors[i].argument[0],
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "required") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].argument.split("instance.").join("") +
                  " is Required",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "minLength") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates minimal length of string",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "maxLength") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates maximal length of string",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "minItems") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " cannot be empty",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "minimum") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates minimum amount of number",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            } else if (results.errors[i].name === "maximum") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates maximum amount of number",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: "Not Found",
              });
            }
          }
        }
        console.log(messages);
        res.status(400).json({
          error: true,
          trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          listError: messages,
        });
      } else {
        console.log(results.errors);
        for (i = 0; i < results.errors.length; i++) {
          console.log(results.errors[i].name);
          if (results.errors[i].name === "additionalProperties") {
            messages.push({
              status: false,
              errorCode: "0102",
              errorType: "JSON Structure Error",
              errorMessage:
                "Field JSON " + results.errors[i].argument + " Not Allowed",
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              cabangRekanan: params,
            });
          } else if (results.errors[i].name !== "additionalProperties") {
            if (results.errors[i].name === "type") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "Datatype of " +
                  results.errors[i].property.split("instance.").join("") +
                  " must be " +
                  results.errors[i].argument[0],
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "required") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].argument.split("instance.").join("") +
                  " is Required",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "minLength") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates minimal length of string",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "maxLength") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates maximal length of string",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "minItems") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " cannot be empty",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "minimum") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates minimum amount of number",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            } else if (results.errors[i].name === "maximum") {
              messages.push({
                status: false,
                errorCode: "0101",
                errorType: "Mandatory Field Validation Error or Datatype Error",
                errorMessage:
                  "JSON Field " +
                  results.errors[i].property.split("instance.").join("") +
                  " violates maximum amount of number",
                trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                cabangRekanan: params,
              });
            }
          }
        }
        console.log(messages);
        res.status(400).json({
          error: true,
          trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
          listError: messages,
        });
      }
    });
  } else {
    var json_ori = JSON.stringify(bod).replace(/""|" "/g, "null");
    var json_fix = JSON.parse(json_ori);
    console.log(json_fix);
    cekNIK(json_fix.noIdentitas)
      .then(function (success_cek_nik) {
        console.log(success_cek_nik);
        console.log("success_cek_nik 2 ="+success_cek_nik );
        getAllPenjaminan(json_fix).then(async function (success) {
          if (success !== "OK" && success_cek_nik == "FAILED") {
            success.push({
              status: false,
              errorCode: "0202",
              errorType: "Data Validation",
              errorMessage: "NIK telah terdaftar di penjamin lain (Jamkrindo)",
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              cabangRekanan: success[0].cabangRekanan,
            });
            console.log(success);
            res.status(400).json({
              error: true,
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              listError: success,
            });
          } else if (success == "OK" && success_cek_nik == "FAILED") {
            console.log(success);
            res.status(400).json({
              error: true,
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              listError: [
                {
                  status: false,
                  errorCode: "0202",
                  errorType: "Data Validation",
                  errorMessage:
                    "NIK telah terdaftar di penjamin lain (Jamkrindo)",
                  trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                  cabangRekanan: "Not Found",
                },
              ],
            });
          } else if (success !== "OK" && success_cek_nik == "OK") {
            console.log(success);
            res.status(400).json({
              error: true,
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              listError: success,
            });
          } else if (success !== "OK" && success_cek_nik == "RTO") {
            console.log(success);
            res.status(400).json({
              error: true,
              trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
              listError: success,
            });
          } else {
            if (success_cek_nik == "RTO") {
              ket_validasi_ejamku = "RTO";
              validasi_ejamku = true;
            } else {
              ket_validasi_ejamku = null;
              validasi_ejamku = false;
            }
            if (json_fix.plafonKredit <= 1000000000) {
              json_fix = JSON.parse(json_ori);
              console.log("akseptasi CAC");

              cekDebitur(json_fix, false).then(function (cek_debitur) {
                if (cek_debitur == "ERROR") {
                  res.status(400).json({
                    status: false,
                    errorMessage: "DJPPR API error or timed out",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                  });
                } else if (cek_debitur == "SUCCESS") {
                  if (
                    !json_fix.mekanismePenyaluran ||
                    json_fix.mekanismePenyaluran == ""
                  ) {
                    json_fix.mekanismePenyaluran = "1";
                  }
                  insertTanpaAcs(
                    json_fix,
                    3,
                    ket_validasi_ejamku,
                    validasi_ejamku
                  ).then(function (params) {
                    json_fix = JSON.parse(json_ori);
                    getIdPenjaminan(json_fix)
                      .then(function (id_penjaminan) {
                        json_fix.listOutstanding.forEach((obj, i) => {
                          setTimeout(function () {
                            insertOutstanding(obj, id_penjaminan).then(function (
                              params
                            ) {
                              console.log("insert outstanding done!");
                            });
                          }, i * 2000);
                        });
                      })
                      .then(function (params) {
                        json_fix = JSON.parse(json_ori);
                        if (json_fix.listAgunan && json_fix.listAgunan.length > 0) {
                          getIdPenjaminan(json_fix).then(function (id_penjaminan) {
                            json_fix.listAgunan.forEach((object, i) => {
                              setTimeout(function () {
                                if (json_fix.listAgunan) {
                                  insertAgunan(object, id_penjaminan);
                                }
                              }, i * 2000);
                            });
                          });
                        }
                      })
                      .then(function (params) {
                        json_fix = JSON.parse(json_ori);
                        getIdPenjaminan(json_fix).then(function (id_penjaminan) {
                          var tahun_ke = json_fix.jangkaWaktu;
                          var floor = new Date(
                            dateFormat(
                              new Date(
                                json_fix.tanggalAwal.substring(0, 4),
                                json_fix.tanggalAwal.substring(4, 6) - 1,
                                json_fix.tanggalAwal.substring(6, 8)
                              ),
                              "yyyy-mm-dd"
                            )
                          );
                          var floor_plus = new Date(
                            dateFormat(
                              new Date(
                                +json_fix.tanggalAwal.substring(0, 4) + 1,
                                json_fix.tanggalAwal.substring(4, 6) - 1,
                                json_fix.tanggalAwal.substring(6, 8)
                              ),
                              "yyyy-mm-dd"
                            )
                          );
                          var ceil = new Date(
                            dateFormat(
                              new Date(
                                json_fix.tanggalAkhir.substring(0, 4),
                                json_fix.tanggalAkhir.substring(4, 6) - 1,
                                json_fix.tanggalAkhir.substring(6, 8)
                              ),
                              "yyyy-mm-dd"
                            )
                          );
                          var diff_floor_inst = new DateDiff(floor_plus, floor);
                          var max_pert_inst = new DateDiff(ceil, floor);
                          var jangka_waktu_hari = max_pert_inst.days();
                          var diff_floor = diff_floor_inst.days();
                          var max_pert = max_pert_inst.days();
                          var premi = [];
                          var cadangan = [];
                          var jml_hari = [];
                          var jml_hari_tahunan = [];
                          var stop = true;
                          var jatuh_tempo = dateFormat(new Date(), "dd");
                          if (jatuh_tempo >= 15) {
                            if (
                              padWithZeroes(+dateFormat(new Date(), "mm") + 1, 2) >
                              12
                            ) {
                              jatuh_tempo =
                                +dateFormat(new Date(), "yyyy") +
                                1 +
                                padWithZeroes(
                                  +dateFormat(new Date(), "mm") + 1 - 12,
                                  2
                                ) +
                                "15";
                            } else {
                              jatuh_tempo =
                                dateFormat(new Date(), "yyyy") +
                                padWithZeroes(
                                  +dateFormat(new Date(), "mm") + 1,
                                  2
                                ) +
                                "15";
                            }
                          } else {
                            jatuh_tempo = dateFormat(new Date(), "yyyymm") + "15";
                          }
                          while (stop) {
                            console.log("floor = "+floor);
                            console.log("floor_plus = "+floor_plus);
                            console.log("ceil = "+ceil);
                            console.log("max_pert 2= "+max_pert);
                            console.log("diff_floor 2= "+diff_floor);
                            if (max_pert > diff_floor) {
                              max_pert = max_pert - diff_floor;
                              floor = new Date(dateFormat(new Date(+(floor_plus.getFullYear()), (floor_plus.getMonth()), floor_plus.getDate()), "yyyy-mm-dd" ));
                              console.log(floor);
                              floor_plus = new Date(dateFormat(new Date(+(floor.getFullYear())+1, (floor.getMonth()), floor.getDate()), "yyyy-mm-dd" ));             
                              
                              diff_floor_inst = new DateDiff(floor_plus, floor);
                              diff_floor = diff_floor_inst.days();
                              ijp = 0.0456 * json_fix.plafonKredit * 1;
                              cadangan_calc = 0.008 * json_fix.plafonKredit * 1;
                              premi.push(Math.round(ijp));
                              cadangan.push(Math.round(cadangan_calc));
                            } else {
                              ijp =
                                0.0456 *
                                json_fix.plafonKredit *
                                (max_pert / diff_floor);
                              cadangan_calc =
                                0.008 *
                                json_fix.plafonKredit *
                                (max_pert / diff_floor);
                              premi.push(Math.round(ijp));
                              cadangan.push(Math.round(cadangan_calc));
                              stop = false;
                            }
                          }
                          updateTotalIjp(
                            premi.reduce((a, b) => a + b, 0),
                            jangka_waktu_hari,
                            id_penjaminan
                          ).then(function (params) {
                            premi.forEach((val, i) => {
                              setTimeout(function () {
                                insertIjp(
                                  id_penjaminan,
                                  i + 1,
                                  val,
                                  cadangan[i],
                                  jatuh_tempo
                                );
                              }, i * 2000);
                            });
                          });
                        });
                      })
                      .then(function (params) {
                        getPolis(json_fix).then(function (no_sertifikat) {
                          getIdPenjaminan(json_fix).then(function (id_penjaminan) {
                            var keterangan;
                            var status;
                            // if(json_fix.kodeBank == '008')
                            // {
                            //     keterangan = 'Terbit (Mandiri)'
                            //     status = 11
                            // }
                            // else
                            // {
                            keterangan = "SUCCESS";
                            status = 3;
                            // }
                            updateStatusPenjaminan(
                              id_penjaminan,
                              no_sertifikat,
                              dateFormat(new Date(), "yyyymmdd"),
                              keterangan,
                              status
                            ).then(
                              getPenjaminanById(id_penjaminan).then(function (
                                penjaminan
                              ) {
                                // if(json_fix.kodeBank == '008')
                                // {
                                //     res.status(200).json({
                                //         status: true,
                                //         message: "Request Success",
                                //         transactionID: padWithZeroes(id_penjaminan, 9),
                                //         trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss" ),
                                //         data: {
                                //             statusSertifikat:"Terbit",
                                //             noTransaksiBank: json_fix.nomorAplikasi,
                                //             noRekening: json_fix.noRekening,
                                //             noSertifikat: no_sertifikat,
                                //             tglSertifikat: dateFormat(new Date(), "yyyymmdd" ),
                                //             tglRekam: dateFormat(new Date(), "yyyymmdd" ),
                                //             linkSertifikat: "http://10.100.10.30:9200/akseptasi?no_polis="+no_sertifikat+"&status=11",
                                //             cabangRekanan: penjaminan[0].kode_cabang_askrindo
                                //         }
                                //     });
                                // }
                                // else
                                // {
                                res.status(200).json({
                                  status: true,
                                  message: "Request Success",
                                  transactionID: padWithZeroes(id_penjaminan, 9),
                                  trxDateResponse: dateFormat(
                                    new Date(),
                                    "yyyymmddHHMMss"
                                  ),
                                  data: {
                                    statusSertifikat: "Terbit",
                                    noTransaksiBank: json_fix.nomorAplikasi,
                                    noRekening: json_fix.noRekening,
                                    noSertifikat: no_sertifikat,
                                    tglSertifikat: dateFormat(
                                      new Date(),
                                      "yyyymmdd"
                                    ),
                                    tglRekam: dateFormat(new Date(), "yyyymmdd"),
                                    linkSertifikat:
                                      "http://10.100.10.30:9200/akseptasi?no_polis=" +
                                      no_sertifikat +
                                      "&status=3",
                                    cabangRekanan:
                                      penjaminan[0].kode_cabang_askrindo,
                                  },
                                });
                                // }
                              })
                              // .then(async function () {
                              //     calon = await postSIKPPerEntry(json_fix.nomorAplikasi, 0).then(async function (return1) {
                              //         if (return1 == 'POST SIKP CALON GAGAL!') {
                              //             var ok = await return1
                              //             console.log(return1)
                              //         }
                              //         else {
                              //             var ok = await return1
                              //             console.log(return1)
                              //         }
                              //     })
                              // }
                              // ).then(async function () {
                              //     if (json_fix.kodeBank != '008') {
                              //         akad = await postSIKPPerEntry(json_fix.nomorAplikasi, 1).then(async function (return2) {
                              //             if (return2 == 'POST SIKP AKAD GAGAL!') {
                              //                 var ok = await return2
                              //                 console.log(return2)
                              //             }
                              //             else {
                              //                 var ok = await return2
                              //                 console.log(return2)
                              //             }
                              //         })
                              //     }
                              // }
                              // ).then(async function () {
                              //     if (json_fix.kodeBank != '008') {
                              //         tagihan = await postSIKPPerEntry(json_fix.nomorAplikasi, 2).then(async function (return3) {
                              //             if (return3 == 'POST SIKP TAGIHAN GAGAL!') {
                              //                 var ok = await return3
                              //                 console.log(return3)
                              //             }
                              //             else {
                              //                 var ok = await return3
                              //                 console.log(return3)
                              //             }
                              //         })
                              //     }
                              // })
                            );
                          });
                        });
                      });
                  });
                } else {
                  res.status(400).json({
                    status: false,
                    body: cek_debitur,
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                  });
                }
              });

              // if (
              //   !json_fix.mekanismePenyaluran ||
              //   json_fix.mekanismePenyaluran == ""
              // ) {
              //   json_fix.mekanismePenyaluran = "1";
              // }
              // try {
              //     let akseptasi_push = await insertTanpaAcsAkseptasi(json_fix, 3, ket_validasi_ejamku, validasi_ejamku).then(async function () {
              //         calon = await postSIKPPerEntry(json_fix.nomorAplikasi, 0).then(async function (return1) {
              //             if (return1 == 'POST SIKP CALON GAGAL!') {
              //                 var ok = await return1
              //                 console.log(return1)
              //             }
              //             else {
              //                 var ok = await return1
              //                 console.log(return1)
              //             }
              //         })
              //     }
              //     ).then(async function () {
              //         akad = await postSIKPPerEntry(json_fix.nomorAplikasi, 1).then(async function (return2) {
              //             if (return2 == 'POST SIKP AKAD GAGAL!') {
              //                 var ok = await return2
              //                 console.log(return2)
              //             }
              //             else {
              //                 var ok = await return2
              //                 console.log(return2)
              //             }
              //         })
              //     }
              //     ).then(async function () {
              //         tagihan = await postSIKPPerEntry(json_fix.nomorAplikasi, 2).then(async function (return3) {
              //             if (return3 == 'POST SIKP TAGIHAN GAGAL!') {
              //                 var ok = await return3
              //                 console.log(return3)
              //             }
              //             else {
              //                 var ok = await return3
              //                 console.log(return3)
              //             }
              //         })
              //     })
              //     res.json(akseptasi_push)
              // }
              // catch (e) {
              //     res.status(400).json({ message: e })
              // }
            } else if (
              json_fix.plafonKredit > 1000000000 &&
              json_fix.plafonKredit <= 10000000000
            ) {
              json_fix = JSON.parse(json_ori);
              console.log("akseptasi CBC");

              cekDebitur(json_fix, true).then(function (cek_debitur) {
                if (cek_debitur == "ERROR") {
                  res.status(400).json({
                    status: false,
                    errorMessage: "DJPPR API error or timed out",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                  });
                } else if (cek_debitur == "SUCCESS") {
                  if (
                    !json_fix.mekanismePenyaluran ||
                    json_fix.mekanismePenyaluran == ""
                  ) {
                    json_fix.mekanismePenyaluran = "1";
                  }
                  insertTanpaAcs(
                    json_fix,
                    3,
                    ket_validasi_ejamku,
                    validasi_ejamku
                  ).then(function (params) {
                    json_fix = JSON.parse(json_ori);
                    getIdPenjaminan(json_fix)
                      .then(function (id_penjaminan) {
                        json_fix.listOutstanding.forEach((obj, i) => {
                          setTimeout(function () {
                            insertOutstanding(obj, id_penjaminan).then(function (
                              params
                            ) {});
                          }, i * 2000);
                        });
                      })
                      .then(function (params) {
                        json_fix = JSON.parse(json_ori);
                        getIdPenjaminan(json_fix).then(function (id_penjaminan) {
                          json_fix.listAgunan.forEach((object, i) => {
                            setTimeout(function () {
                              if (json_fix.listAgunan) {
                                insertAgunan(object, id_penjaminan);
                              }
                            }, i * 2000);
                          });
                        });
                      })
                      .then(function (params) {
                        getSektorEkonomi(json_fix).then(function (sektor_ekonomi) {
                          getIdPenjaminan(json_fix).then(function (id_penjaminan) {
                            updateStatusPenjaminan(
                              id_penjaminan,
                              null,
                              null,
                              "Penjaminan Baru",
                              1
                            ).then(
                              getPenjaminanById(id_penjaminan)
                                .then(function (penjaminan) {
                                  res.status(200).json({
                                    status: true,
                                    message: "Request Success",
                                    transactionID: padWithZeroes(id_penjaminan, 9),
                                    trxDateResponse: dateFormat(
                                      new Date(),
                                      "yyyymmddHHMMss"
                                    ),
                                    data: {
                                      statusSertifikat: "Proses CBC On Progress",
                                      noTransaksiBank:
                                        penjaminan[0].transaction_id_bank,
                                      noRekening: json_fix.noRekening,
                                      noSertifikat: "",
                                      tglSertifikat: "",
                                      tglRekam: "",
                                      linkSertifikat: "",
                                      cabangRekanan:
                                        penjaminan[0].kode_cabang_askrindo,
                                    },
                                  });
                                })
                                .then(async function () {
                                  calon = await postSIKPPerEntry(
                                    json_fix.nomorAplikasi,
                                    0,
                                    "CBC"
                                  ).then(async function (return1) {
                                    if (return1 == "POST SIKP CALON GAGAL!") {
                                      var ok = await return1;
                                      console.log(ok);
                                    } else {
                                      var ok = await return1;
                                      console.log(ok);
                                    }
                                  });
                                })
                            );
                          });
                        });
                      });
                  });
                } else {
                  res.status(400).json({
                    status: false,
                    body: cek_debitur,
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                  });
                }
              });
            }
          }
        });
      })
      .catch((error) => console.log(error));
  }
};

exports.postAkseptasiStagingBulk = function name(req, res) {
  res.status(200).json({ message: "Upload Data Sukses" });
  var Validator = require("jsonschema").Validator;
  var v = new Validator();

  var ditolak = 0;
  var diterima = 0;

  req.body.forEach((bod, i) => {
    setTimeout(function () {
      var akseptasi_validation;
      var tglpklama;
      var npwp_custom;
      var ket_validasi_ejamku;
      var validasi_ejamku;
      if (bod.tglPkLama === "") {
        tglpklama = 0;
      } else {
        tglpklama = 8;
      }
      if (bod.plafonKredit <= 50000000) {
        npwp_custom = { type: "string", maxLength: 40 };
      } else {
        npwp_custom = { type: "string", minLength: 1, maxLength: 40 };
      }
      if (bod.plafonKredit <= 1000000000) {
        var akseptasi_validation = {
          id: "/akseptasi",
          type: "object",
          disableFormat: false,
          properties: {
            uploadId: { type: "string", minLength: 1 },
            kodeBank: { type: "string", minLength: 1, maxLength: 8 },
            nomorAplikasi: { type: "string", minLength: 1, maxLength: 50 },
            kodeUker: { type: "string", minLength: 1, maxLength: 8 },
            namaUker: { type: "string", maxLength: 255 },
            noRekening: { type: "string", minLength: 1, maxLength: 30 },
            noRekLama: { type: "string", maxLength: 30 },
            cif: { type: "string", maxLength: 50 },
            noPk: { type: "string", minLength: 1, maxLength: 50 },
            noPkLama: { type: "string", maxLength: 50 },
            tglPK: { type: "string", minLength: 8, maxLength: 8 },
            tglPkLama: { type: "string", minLength: tglpklama, maxLength: 8 },
            tanggalAwal: { type: "string", minLength: 8, maxLength: 8 },
            tanggalAkhir: { type: "string", minLength: 8, maxLength: 8 },
            jangkaWaktu: { type: "number", minimum: 0 },
            namaDebitur: { type: "string", minLength: 1, maxLength: 255 },
            alamatDebitur: { type: "string", minLength: 1, maxLength: 512 },
            kodePos: { type: "string", maxLength: 6 },
            tempatLahir: { type: "string", maxLength: 100 },
            tanggalLahir: { type: "string", minLength: 8, maxLength: 8 },
            jenisKelamin: { type: "number", minimum: 1 },
            noTelepon: { type: "string", maxLength: 20 },
            noHp: { type: "string", minLength: 1, maxLength: 20 },
            pendidikan: { type: "number", minimum: 1 },
            maritalStatus: { type: "number", minimum: 0 },
            sumber: { type: "number" },
            jenisIdentitas: { type: "string", maxLength: 15 },
            noIdentitas: { type: "string", minLength: 1, maxLength: 40 },
            npwp: npwp_custom,
            noIjinUsaha: { type: "string", minLength: 1, maxLength: 100 },
            tglMulaiUsaha: { type: "string", minLength: 8, maxLength: 8 },
            modalUsaha: { type: "number", minimum: 0 },
            jumlahTenagaKerja: { type: "number", minimum: 1 },
            omsetUsaha: { type: "number", minimum: 0 },
            kekayaanBersih: { type: "number", minimum: 1 },
            kodePekerjaan: { type: "number", minimum: 1 },
            statusKepegawaian: { type: "string", maxLength: 1 },
            jenisKredit: { type: "string", minLength: 1, maxLength: 15 },
            plafonKredit: { type: "number", minimum: 1 },
            plafonKreditLama: { type: "number" },
            typeTujuanKredit: { type: "string", maxLength: 1 },
            sukuBunga: { type: "numeric", minimum: 0 },
            kodeSektor: { type: "string", minLength: 1, maxLength: 10 },
            coverage: { type: "number", minimum: 0 },
            statusKolektibilitas: {
              type: "string",
              minLength: 1,
              maxLength: 20,
            },
            loanType: { type: "string", maxLength: 20 },
            statusAkad: { type: "string", minLength: 1, maxLength: 2 },
            noSertifikatLama: { type: "string", maxLength: 25 },
            createdBy: { type: "string", maxLength: 20 },
            listAgunan: {
              type: "array",
              items: {
                properties: {
                  jenisAgunan: { type: "string", minLength: 1, maxLength: 20 },
                  jenisPengikatan: {
                    type: "string",
                    minLength: 1,
                    maxLength: 20,
                  },
                  lokasiAgunan: { type: "string", maxLength: 512 },
                  noAgunan: { type: "string", maxLength: 50 },
                  nilaiAgunan: { type: "number", minimum: 0 },
                  pemilikAgunan: { type: "string", maxLength: 512 },
                  npw: { type: "number" },
                  nl: { type: "number" },
                  pnpw: { type: "number" },
                  pnl: { type: "number" },
                },
                required: ["jenisAgunan", "jenisPengikatan", "nilaiAgunan"],
                additionalProperties: false,
              },
            },
            listOutstanding: {
              type: "array",
              minItems: 1,
              items: {
                properties: {
                  tanggalSaldo: { type: "string", minLength: 8, maxLength: 8 },
                  outstanding: { type: "number", minimum: 0 },
                  angsuranPokok: { type: "number", minimum: 0 },
                  angsuranBunga: { type: "number", minimum: 0 },
                  angsuranDenda: { type: "number", minimum: 0 },
                },
                required: [
                  "tanggalSaldo",
                  "outstanding",
                  "angsuranPokok",
                  "angsuranBunga",
                  "angsuranDenda",
                ],
                additionalProperties: false,
              },
            },
          },
          required: [
            "uploadId",
            "kodeBank",
            "nomorAplikasi",
            "kodeUker",
            "noRekening",
            "noPk",
            "tglPK",
            "tanggalAwal",
            "tanggalAkhir",
            "jangkaWaktu",
            "namaDebitur",
            "alamatDebitur",
            "tanggalLahir",
            "jenisKelamin",
            "noHp",
            "pendidikan",
            "maritalStatus",
            "noIdentitas",
            "npwp",
            "noIjinUsaha",
            "tglMulaiUsaha",
            "modalUsaha",
            "jumlahTenagaKerja",
            "omsetUsaha",
            "kekayaanBersih",
            "kodePekerjaan",
            "jenisKredit",
            "plafonKredit",
            "sukuBunga",
            "kodeSektor",
            "coverage",
            "statusKolektibilitas",
            "statusAkad",
            "listOutstanding",
          ],
          additionalProperties: false,
        };
      } else if (
        bod.plafonKredit > 1000000000 &&
        bod.plafonKredit <= 10000000000
      ) {
        var akseptasi_validation = {
          id: "/akseptasi",
          type: "object",
          disableFormat: false,
          properties: {
            uploadId: { type: "string", minLength: 1 },
            kodeBank: { type: "string", minLength: 1, maxLength: 8 },
            nomorAplikasi: { type: "string", minLength: 1, maxLength: 50 },
            kodeUker: { type: "string", minLength: 1, maxLength: 8 },
            namaUker: { type: "string", maxLength: 255 },
            noRekening: { type: "string", maxLength: 30 },
            noRekLama: { type: "string", maxLength: 30 },
            cif: { type: "string", maxLength: 50 },
            noPk: { type: "string", maxLength: 50 },
            noPkLama: { type: "string", maxLength: 50 },
            tglPK: { type: "string", maxLength: 8 },
            tglPkLama: { type: "string", minLength: tglpklama, maxLength: 8 },
            tanggalAwal: { type: "string", maxLength: 8 },
            tanggalAkhir: { type: "string", maxLength: 8 },
            jangkaWaktu: { type: "number" },
            namaDebitur: { type: "string", minLength: 1, maxLength: 255 },
            alamatDebitur: { type: "string", minLength: 1, maxLength: 512 },
            kodePos: { type: "string", maxLength: 6 },
            tempatLahir: { type: "string", maxLength: 100 },
            tanggalLahir: { type: "string", minLength: 8, maxLength: 8 },
            jenisKelamin: { type: "number", minimum: 1 },
            noTelepon: { type: "string", maxLength: 20 },
            noHp: { type: "string", minLength: 1, maxLength: 20 },
            pendidikan: { type: "number", minimum: 1 },
            maritalStatus: { type: "number", minimum: 0 },
            sumber: { type: "number" },
            jenisIdentitas: { type: "string", maxLength: 15 },
            noIdentitas: { type: "string", minLength: 1, maxLength: 40 },
            npwp: npwp_custom,
            noIjinUsaha: { type: "string", minLength: 1, maxLength: 100 },
            tglMulaiUsaha: { type: "string", minLength: 8, maxLength: 8 },
            modalUsaha: { type: "number", minimum: 0 },
            jumlahTenagaKerja: { type: "number", minimum: 1 },
            omsetUsaha: { type: "number", minimum: 0 },
            kekayaanBersih: { type: "number", minimum: 1 },
            kodePekerjaan: { type: "number", minimum: 1 },
            statusKepegawaian: { type: "string", maxLength: 1 },
            jenisKredit: { type: "string", minLength: 1, maxLength: 15 },
            plafonKredit: { type: "number", minimum: 1 },
            plafonKreditLama: { type: "number" },
            typeTujuanKredit: { type: "string", maxLength: 1 },
            sukuBunga: { type: "numeric", minimum: 0 },
            kodeSektor: { type: "string", minLength: 1, maxLength: 10 },
            coverage: { type: "number", minimum: 0 },
            statusKolektibilitas: {
              type: "string",
              minLength: 1,
              maxLength: 20,
            },
            loanType: { type: "string", maxLength: 20 },
            statusAkad: { type: "string", minLength: 1, maxLength: 2 },
            noSertifikatLama: { type: "string", maxLength: 25 },
            createdBy: { type: "string", maxLength: 20 },
            listAgunan: {
              type: "array",
              minItems: 1,
              items: {
                properties: {
                  jenisAgunan: { type: "string", minLength: 1, maxLength: 20 },
                  jenisPengikatan: {
                    type: "string",
                    minLength: 1,
                    maxLength: 20,
                  },
                  lokasiAgunan: { type: "string", maxLength: 512 },
                  noAgunan: { type: "string", maxLength: 50 },
                  nilaiAgunan: { type: "number", minimum: 0 },
                  pemilikAgunan: { type: "string", maxLength: 512 },
                  npw: { type: "number" },
                  nl: { type: "number" },
                  pnpw: { type: "number" },
                  pnl: { type: "number" },
                },
                required: ["jenisAgunan", "jenisPengikatan", "nilaiAgunan"],
                additionalProperties: false,
              },
            },
            listOutstanding: {
              type: "array",
              items: {
                properties: {
                  tanggalSaldo: { type: "string", minLength: 8, maxLength: 8 },
                  outstanding: { type: "number", minimum: 0 },
                  angsuranPokok: { type: "number", minimum: 0 },
                  angsuranBunga: { type: "number", minimum: 0 },
                  angsuranDenda: { type: "number", minimum: 0 },
                },
                required: [
                  "tanggalSaldo",
                  "outstanding",
                  "angsuranPokok",
                  "angsuranBunga",
                  "angsuranDenda",
                ],
                additionalProperties: false,
              },
            },
          },
          required: [
            "uploadId",
            "kodeBank",
            "nomorAplikasi",
            "kodeUker",
            "tanggalAwal",
            "tanggalAkhir",
            "jangkaWaktu",
            "namaDebitur",
            "alamatDebitur",
            "tanggalLahir",
            "jenisKelamin",
            "noHp",
            "pendidikan",
            "maritalStatus",
            "noIdentitas",
            "npwp",
            "noIjinUsaha",
            "tglMulaiUsaha",
            "modalUsaha",
            "jumlahTenagaKerja",
            "omsetUsaha",
            "kekayaanBersih",
            "kodePekerjaan",
            "jenisKredit",
            "plafonKredit",
            "sukuBunga",
            "kodeSektor",
            "coverage",
            "statusKolektibilitas",
            "statusAkad",
            "listAgunan",
          ],
          additionalProperties: false,
        };
      } else {
        var akseptasi_validation = {
          id: "/akseptasi",
          type: "object",
          disableFormat: false,
          minProperties: 1,
          properties: {
            kodeBank: { type: "string", minLength: 1, maxLength: 8 },
            nomorAplikasi: { type: "string", minLength: 1, maxLength: 50 },
            kodeUker: { type: "string", minLength: 1, maxLength: 8 },
            namaUker: { type: "string", maxLength: 255 },
            noRekening: { type: "string", minLength: 1, maxLength: 30 },
            noRekLama: { type: "string", maxLength: 30 },
            cif: { type: "string", maxLength: 50 },
            noPk: { type: "string", minLength: 1, maxLength: 50 },
            noPkLama: { type: "string", minLength: tglpklama, maxLength: 50 },
            tglPK: { type: "string", minLength: 8, maxLength: 8 },
            tglPkLama: { type: "string", minLength: tglpklama, maxLength: 8 },
            tanggalAwal: { type: "string", minLength: 8, maxLength: 8 },
            tanggalAkhir: { type: "string", minLength: 8, maxLength: 8 },
            jangkaWaktu: { type: "number", minimum: 0 },
            namaDebitur: { type: "string", minLength: 1, maxLength: 255 },
            alamatDebitur: { type: "string", minLength: 1, maxLength: 512 },
            kodePos: { type: "string", maxLength: 6 },
            tempatLahir: { type: "string", maxLength: 100 },
            tanggalLahir: { type: "string", minLength: 8, maxLength: 8 },
            jenisKelamin: { type: "number", minimum: 1 },
            noTelepon: { type: "string", maxLength: 20 },
            noHp: { type: "string", minLength: 1, maxLength: 20 },
            pendidikan: { type: "number", minimum: 1 },
            maritalStatus: { type: "number", minimum: 0 },
            sumber: { type: "number" },
            jenisIdentitas: { type: "string", maxLength: 15 },
            noIdentitas: { type: "string", minLength: 1, maxLength: 40 },
            npwp: npwp_custom,
            noIjinUsaha: { type: "string", minLength: 1, maxLength: 100 },
            tglMulaiUsaha: { type: "string", minLength: 8, maxLength: 8 },
            modalUsaha: { type: "number", minimum: 0 },
            jumlahTenagaKerja: { type: "number", minimum: 1 },
            omsetUsaha: { type: "number", minimum: 0 },
            kekayaanBersih: { type: "number", minimum: 1 },
            kodePekerjaan: { type: "number", minimum: 1 },
            statusKepegawaian: { type: "string", maxLength: 1 },
            jenisKredit: { type: "string", minLength: 1, maxLength: 15 },
            plafonKredit: { type: "number", minimum: 1 },
            plafonKreditLama: { type: "number" },
            typeTujuanKredit: { type: "string", maxLength: 1 },
            sukuBunga: { type: "numeric", minimum: 0 },
            kodeSektor: { type: "string", minLength: 1, maxLength: 10 },
            coverage: { type: "number", minimum: 0 },
            statusKolektibilitas: {
              type: "string",
              minLength: 1,
              maxLength: 20,
            },
            loanType: { type: "string", maxLength: 20 },
            statusAkad: { type: "string", minLength: 1, maxLength: 2 },
            noSertifikatLama: { type: "string", maxLength: 25 },
            createdBy: { type: "string", maxLength: 20 },
            listAgunan: {
              type: "array",
              items: {
                properties: {
                  jenisAgunan: { type: "string", minLength: 1, maxLength: 20 },
                  jenisPengikatan: {
                    type: "string",
                    minLength: 1,
                    maxLength: 20,
                  },
                  lokasiAgunan: { type: "string", maxLength: 512 },
                  noAgunan: { type: "string", maxLength: 50 },
                  nilaiAgunan: { type: "number", minimum: 0 },
                  pemilikAgunan: { type: "string", maxLength: 512 },
                  npw: { type: "number" },
                  nl: { type: "number" },
                  pnpw: { type: "number" },
                  pnl: { type: "number" },
                },
                required: ["jenisAgunan", "jenisPengikatan", "nilaiAgunan"],
                additionalProperties: false,
              },
            },
            listOutstanding: {
              type: "array",
              minItems: 1,
              items: {
                properties: {
                  tanggalSaldo: { type: "string", minLength: 0, maxLength: 8 },
                  outstanding: { type: "number", minimum: 0 },
                  angsuranPokok: { type: "number", minimum: 0 },
                  angsuranBunga: { type: "number", minimum: 0 },
                  angsuranDenda: { type: "number", minimum: 0 },
                },
                required: [
                  "tanggalSaldo",
                  "outstanding",
                  "angsuranPokok",
                  "angsuranBunga",
                  "angsuranDenda",
                ],
                additionalProperties: false,
              },
            },
          },
          required: [
            "kodeBank",
            "nomorAplikasi",
            "kodeUker",
            "noRekening",
            "noPk",
            "tglPK",
            "tanggalAwal",
            "tanggalAkhir",
            "jangkaWaktu",
            "namaDebitur",
            "alamatDebitur",
            "tanggalLahir",
            "jenisKelamin",
            "noHp",
            "pendidikan",
            "maritalStatus",
            "noIdentitas",
            "npwp",
            "noIjinUsaha",
            "tglMulaiUsaha",
            "modalUsaha",
            "jumlahTenagaKerja",
            "omsetUsaha",
            "kekayaanBersih",
            "kodePekerjaan",
            "jenisKredit",
            "plafonKredit",
            "sukuBunga",
            "kodeSektor",
            "coverage",
            "statusKolektibilitas",
            "statusAkad",
            "listOutstanding",
          ],
          additionalProperties: false,
        };
      }

      var results = v.validate(bod, akseptasi_validation);
      if (results.errors.length > 0) {
        var json_ori = JSON.stringify(bod).replace(/""|" "/g, "null");
        var json_fix = JSON.parse(json_ori);
        var messages = [];
        console.log(json_fix);
        console.log(results.errors);
        getKodeCabangAskrindo(json_fix.kodeBank, json_fix.kodeUker).then(
          function (params) {
            if (params == "") {
              for (i = 0; i < results.errors.length; i++) {
                console.log(results.errors[i].name);
                if (results.errors[i].name === "additionalProperties") {
                  messages.push({
                    status: false,
                    errorCode: "0102",
                    errorType: "JSON Structure Error",
                    errorMessage:
                      "Field JSON " +
                      results.errors[i].argument +
                      " Not Allowed",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: "Not Found",
                  });
                } else if (results.errors[i].name !== "additionalProperties") {
                  if (results.errors[i].name === "type") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "Datatype of " +
                        results.errors[i].property.split("instance.").join("") +
                        " must be " +
                        results.errors[i].argument[0],
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: "Not Found",
                    });
                  } else if (results.errors[i].name === "required") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].argument.split("instance.").join("") +
                        " is Required",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: "Not Found",
                    });
                  } else if (results.errors[i].name === "minLength") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].property.split("instance.").join("") +
                        " violates minimal length of string",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: "Not Found",
                    });
                  } else if (results.errors[i].name === "maxLength") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].property.split("instance.").join("") +
                        " violates maximal length of string",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: "Not Found",
                    });
                  } else if (results.errors[i].name === "minItems") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].property.split("instance.").join("") +
                        " cannot be empty",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: "Not Found",
                    });
                  } else if (results.errors[i].name === "minimum") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].property.split("instance.").join("") +
                        " violates minimum amount of number",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: "Not Found",
                    });
                  } else if (results.errors[i].name === "maximum") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].property.split("instance.").join("") +
                        " violates maximum amount of number",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: "Not Found",
                    });
                  }
                }
              }
            } else {
              for (i = 0; i < results.errors.length; i++) {
                console.log(results.errors[i].name);
                if (results.errors[i].name === "additionalProperties") {
                  messages.push({
                    status: false,
                    errorCode: "0102",
                    errorType: "JSON Structure Error",
                    errorMessage:
                      "Field JSON " +
                      results.errors[i].argument +
                      " Not Allowed",
                    trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                    cabangRekanan: params,
                  });
                } else if (results.errors[i].name !== "additionalProperties") {
                  if (results.errors[i].name === "type") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "Datatype of " +
                        results.errors[i].property.split("instance.").join("") +
                        " must be " +
                        results.errors[i].argument[0],
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: params,
                    });
                  } else if (results.errors[i].name === "required") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].argument.split("instance.").join("") +
                        " is Required",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: params,
                    });
                  } else if (results.errors[i].name === "minLength") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].property.split("instance.").join("") +
                        " violates minimal length of string",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: params,
                    });
                  } else if (results.errors[i].name === "maxLength") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].property.split("instance.").join("") +
                        " violates maximal length of string",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: params,
                    });
                  } else if (results.errors[i].name === "minItems") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].property.split("instance.").join("") +
                        " cannot be empty",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: params,
                    });
                  } else if (results.errors[i].name === "minimum") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].property.split("instance.").join("") +
                        " violates minimum amount of number",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: params,
                    });
                  } else if (results.errors[i].name === "maximum") {
                    messages.push({
                      status: false,
                      errorCode: "0101",
                      errorType:
                        "Mandatory Field Validation Error or Datatype Error",
                      errorMessage:
                        "JSON Field " +
                        results.errors[i].property.split("instance.").join("") +
                        " violates maximum amount of number",
                      trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                      cabangRekanan: params,
                    });
                  }
                }
              }
            }
            var messages_fix = messages.map((e) => e.errorMessage).join(",");
            setTimeout(function () {
              insertReject(json_fix, messages_fix)
                .then(ditolak++)
                .then(function (params) {
                  json_fix = JSON.parse(json_ori);
                  updateSummaryUpload(
                    json_fix.uploadId,
                    diterima,
                    ditolak
                  ).then(function () {
                    console.log(
                      "Done! Sukses " + diterima + " dan gagal " + ditolak + ""
                    );
                  });
                });
            }, 2000);
          }
        );
      } else {
        var json_ori = JSON.stringify(bod).replace(/""|" "/g, "null");
        var json_fix = JSON.parse(json_ori);
        console.log(json_fix);
            success_cek_nik = "OK";
            console.log(success_cek_nik);
            getAllPenjaminan(json_fix).then(function (success) {
              if (success !== "OK" && success_cek_nik == "FAILED") {
                success.push({
                  status: false,
                  errorCode: "0202",
                  errorType: "Data Validation",
                  errorMessage:
                    "NIK telah terdaftar di penjamin lain (Jamkrindo)",
                  trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                  cabangRekanan: success[0].cabangRekanan,
                });
                var messages = success.map((e) => e.errorMessage).join(",");
                console.log(success.map((e) => e.errorMessage).join(","));
                setTimeout(function () {
                  insertReject(json_fix, messages)
                    .then(ditolak++)
                    .then(function (params) {
                      json_fix = JSON.parse(json_ori);
                      updateSummaryUpload(
                        json_fix.uploadId,
                        diterima,
                        ditolak
                      ).then(function () {
                        console.log(
                          "Done! Sukses " +
                            diterima +
                            " dan gagal " +
                            ditolak +
                            ""
                        );
                      });
                    });
                }, 2000);
              } else if (success == "OK" && success_cek_nik == "FAILED") {
                var success1 = [];
                success1.push({
                  status: false,
                  errorCode: "0202",
                  errorType: "Data Validation",
                  errorMessage:
                    "NIK telah terdaftar di penjamin lain (Jamkrindo)",
                  trxDateResponse: dateFormat(new Date(), "yyyymmddHHMMss"),
                  cabangRekanan: "Not Found",
                });
                var messages = success1.map((e) => e.errorMessage).join(",");
                console.log(success1.map((e) => e.errorMessage).join(","));
                setTimeout(function () {
                  insertReject(json_fix, messages)
                    .then(ditolak++)
                    .then(function (params) {
                      json_fix = JSON.parse(json_ori);
                      updateSummaryUpload(
                        json_fix.uploadId,
                        diterima,
                        ditolak
                      ).then(function () {
                        console.log(
                          "Done! Sukses " +
                            diterima +
                            " dan gagal " +
                            ditolak +
                            ""
                        );
                      });
                    });
                }, 2000);
              } else if (success !== "OK" && success_cek_nik == "OK") {
                var messages = success.map((e) => e.errorMessage).join(",");
                console.log(success.map((e) => e.errorMessage).join(","));
                setTimeout(function () {
                  insertReject(json_fix, messages)
                    .then(ditolak++)
                    .then(function (params) {
                      json_fix = JSON.parse(json_ori);
                      updateSummaryUpload(
                        json_fix.uploadId,
                        diterima,
                        ditolak
                      ).then(function () {
                        console.log(
                          "Done! Sukses " +
                            diterima +
                            " dan gagal " +
                            ditolak +
                            ""
                        );
                      });
                    });
                }, 2000);
              } else if (success !== "OK" && success_cek_nik == "RTO") {
                var messages = success.map((e) => e.errorMessage).join(",");
                console.log(success.map((e) => e.errorMessage).join(","));
                setTimeout(function () {
                  insertReject(json_fix, messages)
                    .then(ditolak++)
                    .then(function (params) {
                      json_fix = JSON.parse(json_ori);
                      updateSummaryUpload(
                        json_fix.uploadId,
                        diterima,
                        ditolak
                      ).then(function () {
                        console.log(
                          "Done! Sukses " +
                            diterima +
                            " dan gagal " +
                            ditolak +
                            ""
                        );
                      });
                    });
                }, 2000);
              } else {
                if (success_cek_nik == "RTO") {
                  ket_validasi_ejamku = "RTO";
                  validasi_ejamku = true;
                } else {
                  ket_validasi_ejamku = null;
                  validasi_ejamku = false;
                }
                if (json_fix.plafonKredit <= 1000000000) {
                  json_fix = JSON.parse(json_ori);
                  

                  if (
                    !json_fix.mekanismePenyaluran ||
                    json_fix.mekanismePenyaluran == ""
                  ) {
                    json_fix.mekanismePenyaluran = "1";
                  } else {
                    ket_validasi_ejamku = null;
                    validasi_ejamku = false;
                  }
                  
                  insertTanpaAcs(
                    json_fix,
                    3,
                    ket_validasi_ejamku,
                    validasi_ejamku
                  ).then(function (params) {
                    json_fix = JSON.parse(json_ori);
                    getIdPenjaminan(json_fix)
                      .then(function (id_penjaminan) {
                        json_fix.listOutstanding.forEach((obj, i) => {
                          setTimeout(function () {
                            insertOutstanding(obj, id_penjaminan).then(
                              function (params) {
                                return "insert outstanding done!";
                              }
                            );
                          }, i * 2000);
                        });
                      })
                      .then(function (params) {
                        json_fix = JSON.parse(json_ori);
                        if (
                          json_fix.listAgunan &&
                          json_fix.listAgunan.length > 0
                        ) {
                          getIdPenjaminan(json_fix).then(function (
                            id_penjaminan
                          ) {
                            json_fix.listAgunan.forEach((object, i) => {
                              setTimeout(function () {
                                if (json_fix.listAgunan) {
                                  insertAgunan(object, id_penjaminan);
                                }
                              }, i * 2000);
                            });
                          });
                        }
                      })
                      .then(function (params) {
                        json_fix = JSON.parse(json_ori);
                        getIdPenjaminan(json_fix).then(function (
                          id_penjaminan
                        ) {
                          var tahun_ke = json_fix.jangkaWaktu;
                          var floor = new Date(
                            dateFormat(
                              new Date(
                                json_fix.tanggalAwal.substring(0, 4),
                                json_fix.tanggalAwal.substring(4, 6) - 1,
                                json_fix.tanggalAwal.substring(6, 8)
                              ),
                              "yyyy-mm-dd"
                            )
                          );
                          var floor_plus = new Date(
                            dateFormat(
                              new Date(
                                +json_fix.tanggalAwal.substring(0, 4) + 1,
                                json_fix.tanggalAwal.substring(4, 6) - 1,
                                json_fix.tanggalAwal.substring(6, 8)
                              ),
                              "yyyy-mm-dd"
                            )
                          );
                          var ceil = new Date(
                            dateFormat(
                              new Date(
                                json_fix.tanggalAkhir.substring(0, 4),
                                json_fix.tanggalAkhir.substring(4, 6) - 1,
                                json_fix.tanggalAkhir.substring(6, 8)
                              ),
                              "yyyy-mm-dd"
                            )
                          );
                          var diff_floor_inst = new DateDiff(floor_plus, floor);
                          var max_pert_inst = new DateDiff(ceil, floor);
                          var jangka_waktu_hari = max_pert_inst.days();
                          var diff_floor = diff_floor_inst.days();
                          var max_pert = max_pert_inst.days();
                          var premi = [];
                          var cadangan = [];
                          var jml_hari = [];
                          var jml_hari_tahunan = [];
                          var stop = true;
                          var jatuh_tempo = dateFormat(new Date(), "dd");
                          if (jatuh_tempo >= 15) {
                            if (
                              padWithZeroes(
                                +dateFormat(new Date(), "mm") + 1,
                                2
                              ) > 12
                            ) {
                              jatuh_tempo =
                                +dateFormat(new Date(), "yyyy") +
                                1 +
                                padWithZeroes(
                                  +dateFormat(new Date(), "mm") + 1 - 12,
                                  2
                                ) +
                                "15";
                            } else {
                              jatuh_tempo =
                                dateFormat(new Date(), "yyyy") +
                                padWithZeroes(
                                  +dateFormat(new Date(), "mm") + 1,
                                  2
                                ) +
                                "15";
                            }
                          } else {
                            jatuh_tempo =
                              dateFormat(new Date(), "yyyymm") + "15";
                          }
                          while (stop) {
                            if (max_pert > diff_floor) {
                              max_pert = max_pert - diff_floor;
                              floor = new Date(dateFormat(new Date(+(floor_plus.getFullYear()), (floor_plus.getMonth()), floor_plus.getDate()), "yyyy-mm-dd" ));
                              console.log(floor);
                              floor_plus = new Date(dateFormat(new Date(+(floor.getFullYear())+1, (floor.getMonth()), floor.getDate()), "yyyy-mm-dd" ));             
              
                              diff_floor_inst = new DateDiff(floor_plus, floor);
                              diff_floor = diff_floor_inst.days();
                              ijp = 0.0456 * json_fix.plafonKredit * 1;
                              cadangan_calc = 0.008 * json_fix.plafonKredit * 1;
                              premi.push(Math.round(ijp));
                              cadangan.push(Math.round(cadangan_calc));
                            } else {
                              console.log("max_pert 3= "+max_pert);
                              console.log("diff_floor 3= "+diff_floor);
                              ijp =
                                0.0456 *
                                json_fix.plafonKredit *
                                (max_pert / diff_floor);
                              cadangan_calc =
                                0.008 *
                                json_fix.plafonKredit *
                                (max_pert / diff_floor);
                              premi.push(Math.round(ijp));
                              cadangan.push(Math.round(cadangan_calc));
                              stop = false;
                            }
                          }
                          updateTotalIjp(
                            premi.reduce((a, b) => a + b, 0),
                            jangka_waktu_hari,
                            id_penjaminan
                          ).then(function (params) {
                            premi.forEach((val, i) => {
                              setTimeout(function () {
                                console.log("insert ijp 5");
                                insertIjp(
                                  id_penjaminan,
                                  i + 1,
                                  val,
                                  cadangan[i],
                                  jatuh_tempo
                                );
                              }, i * 2000);
                            });
                          });
                        });
                      })
                      .then(function (params) {
                        getIdPenjaminan(json_fix).then(function (
                          id_penjaminan
                        ) {
                          getPolis(json_fix).then(function (no_sertifikat) {
                            var keterangan;
                            var status;
                            // if(json_fix.kodeBank == '008')
                            // {
                            //     keterangan = 'Terbit (Mandiri)'
                            //     status = 11
                            // }
                            // else
                            // {
                            keterangan = "SUCCESS";
                            status = 3;
                            // }
                            updateStatusPenjaminan(
                              id_penjaminan,
                              no_sertifikat,
                              dateFormat(new Date(), "yyyymmdd"),
                              keterangan,
                              status
                            )
                              .then(function (params) {
                                diterima++;
                                console.log("sukses " + diterima);
                              })
                              .then(function () {
                                console.log(diterima);
                                updateSummaryUpload(
                                  json_fix.uploadId,
                                  diterima,
                                  ditolak
                                ).then(function () {
                                  console.log(
                                    "Done! Sukses " +
                                      diterima +
                                      " dan gagal " +
                                      ditolak +
                                      ""
                                  );
                                });
                              })
                              .then(async function () {
                                calon = await postSIKPPerEntry(
                                  json_fix.nomorAplikasi,
                                  0
                                ).then(async function (return1) {
                                  if (return1 == "POST SIKP CALON GAGAL!") {
                                    var ok = await return1;
                                    console.log(ok);
                                  } else {
                                    var ok = await return1;
                                    console.log(ok);
                                  }
                                });
                              })
                              .then(async function () {
                                akad = await postSIKPPerEntry(
                                  json_fix.nomorAplikasi,
                                  1
                                ).then(async function (return2) {
                                  if (return2 == "POST SIKP AKAD GAGAL!") {
                                    var ok = await return2;
                                    console.log(ok);
                                  } else {
                                    var ok = await return2;
                                    console.log(ok);
                                  }
                                });
                              })
                              .then(async function () {
                                tagihan = await postSIKPPerEntry(
                                  json_fix.nomorAplikasi,
                                  2
                                ).then(async function (return3) {
                                  if (return3 == "POST SIKP TAGIHAN GAGAL!") {
                                    var ok = await return3;
                                    console.log(ok);
                                  } else {
                                    var ok = await return3;
                                    console.log(ok);
                                  }
                                });
                              });
                          });
                        });
                      });
                  });
                } else if (
                  json_fix.plafonKredit > 1000000000 &&
                  json_fix.plafonKredit <= 10000000000
                ) {
                  json_fix = JSON.parse(json_ori);

                  if (
                    !json_fix.mekanismePenyaluran ||
                    json_fix.mekanismePenyaluran == ""
                  ) {
                    json_fix.mekanismePenyaluran = "1";
                  }
                  json_fix = JSON.parse(json_ori);

                  if (
                    !json_fix.mekanismePenyaluran ||
                    json_fix.mekanismePenyaluran == ""
                  ) {
                    json_fix.mekanismePenyaluran = "1";
                  }
                  insertTanpaAcs(
                    json_fix,
                    3,
                    ket_validasi_ejamku,
                    validasi_ejamku
                  ).then(function (params) {
                    json_fix = JSON.parse(json_ori);
                    getIdPenjaminan(json_fix)
                      .then(function (id_penjaminan) {
                        json_fix.listOutstanding.forEach((obj, i) => {
                          setTimeout(function () {
                            insertOutstanding(obj, id_penjaminan).then(
                              function (params) {}
                            );
                          }, i * 2000);
                        });
                      })
                      .then(function (params) {
                        json_fix = JSON.parse(json_ori);
                        getIdPenjaminan(json_fix).then(function (
                          id_penjaminan
                        ) {
                          json_fix.listAgunan.forEach((object, i) => {
                            setTimeout(function () {
                              if (json_fix.listAgunan) {
                                insertAgunan(object, id_penjaminan);
                              }
                            }, i * 2000);
                          });
                        });
                      })
                      .then(function (params) {
                        getSektorEkonomi(json_fix).then(function (
                          sektor_ekonomi
                        ) {
                          getIdPenjaminan(json_fix).then(function (
                            id_penjaminan
                          ) {
                            updateStatusPenjaminan(
                              id_penjaminan,
                              null,
                              null,
                              "Penjaminan Baru",
                              1
                            )
                              .then(function (params) {
                                diterima++;
                                console.log("sukses " + diterima);
                              })
                              .then(function () {
                                console.log(diterima);
                                updateSummaryUpload(
                                  req.body[0].uploadId,
                                  diterima,
                                  ditolak
                                ).then(function () {
                                  console.log(
                                    "Done! Sukses " +
                                      diterima +
                                      " dan gagal " +
                                      ditolak +
                                      ""
                                  );
                                });
                              })
                              .then(async function () {
                                calon = await postSIKPPerEntry(
                                  json_fix.nomorAplikasi,
                                  0,
                                  "CBC"
                                ).then(async function (return1) {
                                  if (return1 == "POST SIKP CALON GAGAL!") {
                                    var ok = await return1;
                                    console.log(ok);
                                  } else {
                                    var ok = await return1;
                                    console.log(ok);
                                  }
                                });
                              });
                          });
                        });
                      });
                  });
                }
              }
            });
          
          // .then(function () {
          //     console.log(diterima)
          //     updateSummaryUpload(req.body[0].uploadId, diterima, ditolak).then(
          //         function () {
          //             console.log('Done! Sukses '+diterima+' dan gagal '+ditolak+'')
          //         }
          //     )
          // })
          //.catch((error) => console.log(error));
      }
    }, i * 7000);
  });
};
